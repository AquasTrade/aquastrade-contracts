{
  "address": "0xB4174a2DCd5873fc730dea58c7aD33d533d5c46c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAmmRouter",
          "type": "address"
        }
      ],
      "name": "AmmRouterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSwapHops",
          "type": "uint256"
        }
      ],
      "name": "MaxHopsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newNftAdmin",
          "type": "address"
        }
      ],
      "name": "NftAdminSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "stablePool",
          "type": "address"
        }
      ],
      "name": "StablePoolDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "stablePool",
          "type": "address"
        }
      ],
      "name": "StablePoolEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0In",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1Out",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ammRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "stablePool",
          "type": "address"
        }
      ],
      "name": "disableStablePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "stablePool",
          "type": "address"
        }
      ],
      "name": "enableStablePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "",
          "type": "address"
        }
      ],
      "name": "enabledStablePools",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "_ammRouter",
          "type": "address"
        },
        {
          "internalType": "contract ISwap",
          "name": "_stablePool",
          "type": "address"
        },
        {
          "internalType": "contract INFTAdmin",
          "name": "_nftAdmin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxSwapHops_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftAdmin",
      "outputs": [
        {
          "internalType": "contract INFTAdmin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rubyStableSwap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "newAmmRouter",
          "type": "address"
        }
      ],
      "name": "setAmmRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxSwapHops",
          "type": "uint256"
        }
      ],
      "name": "setMaxHops",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INFTAdmin",
          "name": "newNftAdmin",
          "type": "address"
        }
      ],
      "name": "setNftAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AMMSwapType",
                  "name": "swapType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountIn",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountOut",
                  "type": "uint256"
                },
                {
                  "internalType": "address[]",
                  "name": "path",
                  "type": "address[]"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AMMSwapDetails[]",
              "name": "ammSwaps",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "stablePool",
                  "type": "address"
                },
                {
                  "internalType": "uint8",
                  "name": "tokenIndexFrom",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "tokenIndexTo",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "dx",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minDy",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StableSwapDetails[]",
              "name": "stableSwaps",
              "type": "tuple[]"
            },
            {
              "internalType": "enum SwapType[]",
              "name": "order",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct SwapDetails",
          "name": "swapDetails",
          "type": "tuple"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb4c542f60a8b9b46962f4228e0410b676c81339cc915cf9532885964585b892a",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0xCDeb7F7974D89Fd71089487D65AA9731d7E846F5",
    "contractAddress": "0xB4174a2DCd5873fc730dea58c7aD33d533d5c46c",
    "transactionIndex": 0,
    "gasUsed": "4557622",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x885756b102b8de0db033bc7df1cd7f03d8d64090d89671d4137eec718a618878",
    "transactionHash": "0xb4c542f60a8b9b46962f4228e0410b676c81339cc915cf9532885964585b892a",
    "logs": [],
    "blockNumber": 4082402,
    "cumulativeGasUsed": "4557622",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3d89f9afe19855674199611950045571",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAmmRouter\",\"type\":\"address\"}],\"name\":\"AmmRouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSwapHops\",\"type\":\"uint256\"}],\"name\":\"MaxHopsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newNftAdmin\",\"type\":\"address\"}],\"name\":\"NftAdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stablePool\",\"type\":\"address\"}],\"name\":\"StablePoolDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stablePool\",\"type\":\"address\"}],\"name\":\"StablePoolEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ammRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"stablePool\",\"type\":\"address\"}],\"name\":\"disableStablePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"stablePool\",\"type\":\"address\"}],\"name\":\"enableStablePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enabledStablePools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_ammRouter\",\"type\":\"address\"},{\"internalType\":\"contract ISwap\",\"name\":\"_stablePool\",\"type\":\"address\"},{\"internalType\":\"contract INFTAdmin\",\"name\":\"_nftAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSwapHops_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAdmin\",\"outputs\":[{\"internalType\":\"contract INFTAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rubyStableSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"newAmmRouter\",\"type\":\"address\"}],\"name\":\"setAmmRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSwapHops\",\"type\":\"uint256\"}],\"name\":\"setMaxHops\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INFTAdmin\",\"name\":\"newNftAdmin\",\"type\":\"address\"}],\"name\":\"setNftAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AMMSwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct AMMSwapDetails[]\",\"name\":\"ammSwaps\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"stablePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct StableSwapDetails[]\",\"name\":\"stableSwaps\",\"type\":\"tuple[]\"},{\"internalType\":\"enum SwapType[]\",\"name\":\"order\",\"type\":\"uint8[]\"}],\"internalType\":\"struct SwapDetails\",\"name\":\"swapDetails\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/router/AquasRouter.sol\":\"AquasRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/amm/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        uint256 feeMultiplicator,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x6977b5fc518821550bb1be231e696b770e5196c96ed60aff7f5cbbba11ae866d\",\"license\":\"GPL-3.0\"},\"contracts/amm/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint256 feeMultiplier\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint256 feeMultiplier\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] calldata path,\\n        uint256 feeMultiplier\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        uint256 feeMultiplier\\n    ) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xa91e35729661da1916c81248ba75074bfbd9eed60ba873d8b4d7e0a27ac3a8b2\",\"license\":\"GPL-3.0\"},\"contracts/amm/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.2;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\nimport \\\"../../interfaces/INFTAdmin.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n\\n    event FactorySet(address indexed newFactory);\\n\\n    event NFTAdminSet(address indexed newNftAdmin);\\n\\n    function nftAdmin() external pure returns (INFTAdmin);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function setFactory(address newFactory) external;\\n\\n    function setNftAdmin(INFTAdmin newNftAdmin) external;\\n}\\n\",\"keccak256\":\"0x562b3c45491aefb04f5d0140f8fb59276fd47bf15a08fa75316d09561fb7d7d2\",\"license\":\"GPL-3.0\"},\"contracts/amm/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathUniswap {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x74e9a209f55cb2930a84eeec3df3bba635abefc49a2a9b5e1c398a07c8ec15e1\",\"license\":\"GPL-3.0\"},\"contracts/amm/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x24cf55605ab9aa3b0b949e9cb495e1f9eb566d3da1e97d22d4107ef5a165a247\",\"license\":\"GPL-3.0\"},\"contracts/amm/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMathUniswap for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"6ef9e427f9c071a27efafa75b3b56e02dd81c7e0d3f18b9b62d3a2fb194077bd\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // 1. Given an input amount of an asset, pair reserves and trading fee multiplier, \\n    //    returns the maximum output amount of the other asset\\n    // 2. The calculation takes in feeMultiplier argument, which is used to calculate amountOut based on\\n    //    the trading fee used. \\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint256 feeMultiplier\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        require(feeMultiplier >= 997 && feeMultiplier <= 1000, \\\"UniswapV2Library: FEE_MULTIPLIER\\\");\\n        uint256 amountInWithFee = amountIn.mul(feeMultiplier);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // 1. Given an output amount of an asset, pair reserves and trading fee multiplier, \\n    //    returns a required input amount of the other asset\\n    // 2. The calculation takes in feeMultiplier argument, which is used to calculate amountIn based on\\n    //    the trading fee used. \\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint256 feeMultiplier\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        require(feeMultiplier >= 997 && feeMultiplier <= 1000, \\\"UniswapV2Library: FEE_MULTIPLIER\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(feeMultiplier);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // 1. Performs chained getAmountOut calculations on any number of pairs\\n    // 2. The calculation takes in feeMultiplier argument, which is used to calculate amounts out based on\\n    //    the trading fee used. The feeMultiplier is the same for all pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path,\\n        uint256 feeMultiplier\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, feeMultiplier);\\n        }\\n    }\\n\\n    // 1. Performs chained getAmountIn calculations on any number of pairs\\n    // 2. The calculation takes in feeMultiplier argument, which is used to calculate amounts in based on\\n    //    the trading fee used. The feeMultiplier is the same for all pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path,\\n        uint256 feeMultiplier\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut, feeMultiplier);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fe7f84847eefedbd55cd5dfbcf468d348269768506a8f36b756b65f6528c215\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INFTAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface INFTAdmin {\\n    event MinterSet(address indexed minter, bool allowance);\\n\\n    event GoldSwapNFTSet(address indexed goldSwapNFT);\\n    event SilverSwapNFTSet(address indexed silverSwapNFT);\\n    event BronzeSwapNFTSet(address indexed bronzeSwapNFT);\\n    event ProfileNFTset(address indexed profileNFT);\\n\\n    function profileNFT() external view returns (address);\\n\\n    function goldSwapNFT() external view returns (address);\\n\\n    function silverSwapNFT() external view returns (address);\\n    \\n    function bronzeSwapNFT() external view returns (address);\\n\\n    function minters(address minter) external view returns (bool);\\n\\n    function calculateAmmSwapFeeDeduction(address user) external view returns (uint256 feeMultiplier);\\n\\n    function mintProfileNFT(address user) external;\\n\\n    function setProfileNFT(address newProfileNFT) external;\\n\\n    function setGoldSwapNFT(address newSwapNFT) external;\\n\\n    function setSilverSwapNFT(address newSwapNFT) external;\\n\\n    function setBronzeSwapNFT(address newSwapNFT) external;\\n\\n    function setMinter(address minter, bool allowance) external;\\n}\\n\",\"keccak256\":\"0x618a3cd3fe5ffd63a4783243665ac3f4b3ff9ff1f0034b72b326137b72a89572\",\"license\":\"MIT\"},\"contracts/router/AquasRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../amm/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../amm/libraries/TransferHelper.sol\\\";\\nimport \\\"../amm/libraries/UniswapV2Library.sol\\\";\\nimport \\\"../stable_swap/interfaces/ISwap.sol\\\";\\nimport \\\"../interfaces/INFTAdmin.sol\\\";\\n\\n\\nimport { SwapType, AMMSwapType, AMMSwapDetails, StableSwapDetails, SwapDetails } from \\\"./RouterUtils.sol\\\";\\n\\ncontract AquasRouter is OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    address public rubyStableSwap;\\n    IUniswapV2Router02 public ammRouter;\\n    INFTAdmin public nftAdmin;\\n    mapping(ISwap => bool) public enabledStablePools;\\n\\n    // Should be set to 3 with a single stable pool.\\n    // Set as a variable for future upgradeability\\n    uint256 private _maxSwapHops;\\n    \\n\\n    /*** EVENTS ***/\\n    event StablePoolEnabled(address stablePool);\\n    event StablePoolDisabled(address stablePool);\\n    event AmmRouterSet(address newAmmRouter);\\n    event NftAdminSet(address newNftAdmin);\\n    event MaxHopsSet(uint256 maxSwapHops);\\n\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1Out,\\n        address token0,\\n        address token1,\\n        address indexed to);\\n\\n    function initialize(\\n        address _owner,\\n        IUniswapV2Router02 _ammRouter,\\n        ISwap _stablePool,\\n        INFTAdmin _nftAdmin,\\n        uint256 maxSwapHops_\\n    ) public initializer {\\n        require(_owner != address(0), \\\"AquasRouter: Invalid owner.\\\");\\n        require(address(_ammRouter) != address(0), \\\"AquasRouter: Invalid AMM router address.\\\");\\n        require(address(_stablePool) != address(0), \\\"AquasRouter: Invalid Stable Pool address.\\\");\\n        require(address(_nftAdmin) != address(0), \\\"AquasRouter: Invalid NFT admin address.\\\");\\n        require(maxSwapHops_ != 0, \\\"AquasRouter: Invalid max swap hops.\\\");\\n\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n\\n        rubyStableSwap = address(_stablePool);\\n        ammRouter = _ammRouter;\\n        nftAdmin = _nftAdmin;\\n        _maxSwapHops = maxSwapHops_;\\n\\n        enableStablePool(_stablePool);\\n        enabledStablePools[_stablePool] = true;\\n    }\\n\\n    function swap(SwapDetails calldata swapDetails) public returns (uint256 outputAmount) {\\n        require(swapDetails.order.length <= _maxSwapHops, \\\"Invalid number of swap calls\\\");\\n\\n        (address tokenInAddr, uint256 amountIn) = _handleInputToken(swapDetails);\\n\\n        uint256 ammSwapIndex = 0;\\n        uint256 stableSwapIndex = 0;\\n        for (uint256 i = 0; i < swapDetails.order.length; i++) {\\n            require(\\n                swapDetails.order[i] == SwapType.AMM || swapDetails.order[i] == SwapType.STABLE_POOL,\\n                \\\"AquasRouter: Invalid swap type\\\"\\n            );\\n\\n            if (swapDetails.order[i] == SwapType.AMM) {\\n                outputAmount = _swapAmm(swapDetails.ammSwaps[ammSwapIndex]);\\n                ammSwapIndex++;\\n            } else {\\n                outputAmount = _swapStablePool(swapDetails.stableSwaps[stableSwapIndex]);\\n                stableSwapIndex++;\\n            }\\n        }\\n\\n        address tokenOutAddr = _handleOutputToken(swapDetails, outputAmount);\\n\\n        // mint a profile NFT if the user does not hold any Profile NFT already\\n        nftAdmin.mintProfileNFT(tx.origin);\\n\\n        emit Swap(msg.sender, amountIn, outputAmount, tokenInAddr, tokenOutAddr, tx.origin);\\n    }\\n\\n    function _handleInputToken(SwapDetails calldata swapDetails) private returns (address tokenInAddr, uint256 amountIn) {\\n\\n        if (swapDetails.order[0] == SwapType.AMM) {\\n            uint256[] memory amounts;\\n            if (swapDetails.ammSwaps[0].swapType == AMMSwapType.EXACT_TOKENS_FOR_TOKENS) {\\n                amounts = UniswapV2Library.getAmountsOut(\\n                    ammRouter.factory(),\\n                    swapDetails.ammSwaps[0].amountIn,\\n                    swapDetails.ammSwaps[0].path,\\n                    nftAdmin.calculateAmmSwapFeeDeduction(tx.origin)\\n                );\\n            } else {\\n                amounts = UniswapV2Library.getAmountsIn(\\n                    ammRouter.factory(),\\n                    swapDetails.ammSwaps[0].amountOut,\\n                    swapDetails.ammSwaps[0].path,\\n                    nftAdmin.calculateAmmSwapFeeDeduction(tx.origin)\\n                );\\n            }\\n            tokenInAddr = swapDetails.ammSwaps[0].path[0];\\n            amountIn = amounts[0];\\n        } else {\\n            //StableSwap\\n            ISwap stablePool = ISwap(swapDetails.stableSwaps[0].stablePool);\\n            require(enabledStablePools[stablePool], \\\"AquasRouter: The stable pool is not enabled\\\");\\n            tokenInAddr = address(stablePool.getToken(swapDetails.stableSwaps[0].tokenIndexFrom));\\n            amountIn = swapDetails.stableSwaps[0].dx;\\n        }\\n\\n        IERC20 tokenIn = IERC20(tokenInAddr);\\n        tokenIn.safeTransferFrom(msg.sender, address(this), amountIn);\\n    }\\n\\n    // Transfers the output token back to the user\\n    function _handleOutputToken(SwapDetails calldata swapDetails, uint256 amountOut) private returns (address tokenOutAddr) {\\n\\n        uint256 lastHopIndex = swapDetails.order.length - 1;\\n        if (swapDetails.order[lastHopIndex] == SwapType.AMM) {\\n            uint256 lastAmmSwapIndex = swapDetails.ammSwaps.length - 1;\\n            uint256 lastTokenIndex = swapDetails.ammSwaps[lastAmmSwapIndex].path.length - 1;\\n\\n            tokenOutAddr = swapDetails.ammSwaps[lastAmmSwapIndex].path[lastTokenIndex];\\n        } else {\\n            //StableSwap\\n            uint256 lastStableSwapIndex = swapDetails.stableSwaps.length - 1;\\n            ISwap stablePool = ISwap(swapDetails.stableSwaps[lastStableSwapIndex].stablePool);\\n            tokenOutAddr = address(stablePool.getToken(swapDetails.stableSwaps[lastStableSwapIndex].tokenIndexTo));\\n        }\\n\\n        IERC20 tokenOut = IERC20(tokenOutAddr);\\n        tokenOut.safeTransfer(msg.sender, amountOut);\\n    }\\n\\n    function _swapAmm(AMMSwapDetails calldata swapDetails) private returns (uint256 outputAmount) {\\n        require(\\n            swapDetails.swapType == AMMSwapType.EXACT_TOKENS_FOR_TOKENS ||\\n                swapDetails.swapType == AMMSwapType.TOKENS_FOR_EXACT_TOKENS,\\n            \\\"AquasRouter: Invalid AMM swap type\\\"\\n        );\\n        uint256[] memory outputAmounts;\\n\\n        _increaseTokenAllowance(swapDetails.path[0], address(ammRouter), swapDetails.amountIn);\\n\\n        if (swapDetails.swapType == AMMSwapType.EXACT_TOKENS_FOR_TOKENS) {\\n            outputAmounts = ammRouter.swapExactTokensForTokens(\\n                swapDetails.amountIn,\\n                swapDetails.amountOut,\\n                swapDetails.path,\\n                swapDetails.to,\\n                swapDetails.deadline\\n            );\\n        } else {\\n            outputAmounts = ammRouter.swapTokensForExactTokens(\\n                swapDetails.amountOut,\\n                swapDetails.amountIn,\\n                swapDetails.path,\\n                swapDetails.to,\\n                swapDetails.deadline\\n            );\\n        }\\n        outputAmount = outputAmounts[outputAmounts.length - 1];\\n    }\\n\\n    function _swapStablePool(StableSwapDetails calldata swapDetails) private returns (uint256 outputAmount) {\\n        ISwap stablePool = ISwap(swapDetails.stablePool);\\n        require(enabledStablePools[stablePool], \\\"AquasRouter: The stable pool is not enabled\\\");\\n\\n        address tokenAddress = address(stablePool.getToken(swapDetails.tokenIndexFrom));\\n        _increaseTokenAllowance(tokenAddress, swapDetails.stablePool, swapDetails.dx);\\n\\n        outputAmount = ISwap(swapDetails.stablePool).swap(\\n            swapDetails.tokenIndexFrom,\\n            swapDetails.tokenIndexTo,\\n            swapDetails.dx,\\n            swapDetails.minDy,\\n            swapDetails.deadline\\n        );\\n    }\\n\\n    function _increaseTokenAllowance(\\n        address token,\\n        address spender,\\n        uint256 amountIn\\n    ) private {\\n        IERC20 tokenIn = IERC20(token);\\n        uint256 tokenAllowance = tokenIn.allowance(address(this), spender);\\n        if (tokenAllowance < amountIn) {\\n            tokenIn.safeIncreaseAllowance(spender, amountIn);\\n        }\\n    }\\n\\n    function enableStablePool(ISwap stablePool) public onlyOwner {\\n        require(address(stablePool) != address(0), \\\"AquasRouter: The stablePool cannot be the zero address\\\");\\n        enabledStablePools[stablePool] = true;\\n        emit StablePoolEnabled(address(stablePool));\\n    }\\n\\n    function disableStablePool(ISwap stablePool) public onlyOwner {\\n        require(address(stablePool) != address(0), \\\"AquasRouter: The stablePool cannot be the zero address\\\");\\n        enabledStablePools[stablePool] = false;\\n        emit StablePoolDisabled(address(stablePool));\\n    }\\n\\n    function setAmmRouter(IUniswapV2Router02 newAmmRouter) public onlyOwner {\\n        require(address(newAmmRouter) != address(0), \\\"AquasRouter: Invalid AMM router address.\\\");\\n        ammRouter = newAmmRouter;\\n        emit AmmRouterSet(address(newAmmRouter));\\n    }\\n\\n    function setNftAdmin(INFTAdmin newNftAdmin) public onlyOwner {\\n        require(address(newNftAdmin) != address(0), \\\"AquasRouter: Invalid NFT admin address.\\\");\\n        nftAdmin = newNftAdmin;\\n        emit NftAdminSet(address(newNftAdmin));\\n    }\\n\\n    function setMaxHops(uint256 maxSwapHops) public onlyOwner {\\n        require(maxSwapHops > 0, \\\"AquasRouter: Invalid max swap hops;\\\");\\n        _maxSwapHops = maxSwapHops;\\n        emit MaxHopsSet(maxSwapHops);\\n    }\\n}\",\"keccak256\":\"0x26ecca2b33db9d6f8343af2ea41fbc13b068724d332a14d7d638e14f74bc948c\",\"license\":\"MIT\"},\"contracts/router/RouterUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nenum SwapType {\\n    AMM,\\n    STABLE_POOL\\n}\\n\\nenum AMMSwapType {\\n    EXACT_TOKENS_FOR_TOKENS,\\n    TOKENS_FOR_EXACT_TOKENS\\n}\\n\\nstruct AMMSwapDetails {\\n    AMMSwapType swapType;\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    address[] path;\\n    address to;\\n    uint256 deadline;\\n}\\n\\nstruct StableSwapDetails {\\n    address stablePool;\\n    uint8 tokenIndexFrom;\\n    uint8 tokenIndexTo;\\n    uint256 dx;\\n    uint256 minDy;\\n    uint256 deadline;\\n}\\n\\nstruct SwapDetails {\\n    AMMSwapDetails[] ammSwaps;\\n    StableSwapDetails[] stableSwaps;\\n    SwapType[] order;\\n}\\n\",\"keccak256\":\"0x1f8d5f2711c8a22aff4d4ea7887d0dffd708f1a7e38cd570c3bf11bc20eb93a6\",\"license\":\"MIT\"},\"contracts/stable_swap/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IAllowlist {\\n    function getPoolAccountLimit(address poolAddress) external view returns (uint256);\\n\\n    function getPoolCap(address poolAddress) external view returns (uint256);\\n\\n    function verifyAddress(address account, bytes32[] calldata merkleProof) external returns (bool);\\n}\\n\\ninterface ISwap {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getAllowlist() external view returns (IAllowlist);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function isGuarded() external view returns (bool);\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex)\\n        external\\n        view\\n        returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function initialize(\\n        IERC20[] memory pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 a,\\n        uint256 fee,\\n        uint256 adminFee,\\n        address lpTokenTargetAddress\\n    ) external;\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n}\",\"keccak256\":\"0xbc0045d3d248e2c2fe5a9ed36e3901e0f7f034da7af844907c3eb6e596a08961\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506151e0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80639360bfad1161008c578063c39b2e9911610066578063c39b2e9914610225578063f2fde38b14610241578063f7013ef61461025d578063fefcbe1314610279576100ea565b80639360bfad146101bb578063a26f5796146101d9578063b8af6a5314610209576100ea565b8063715018a6116100c8578063715018a6146101595780637e29ca87146101635780638da5cb5b1461017f57806390b3c4e71461019d576100ea565b80630f5567c2146100ef57806339c6980b1461010d57806362ea3db214610129575b600080fd5b6100f7610295565b60405161010491906146a9565b60405180910390f35b61012760048036038101906101229190613939565b6102bb565b005b610143600480360381019061013e91906139b4565b610422565b6040516101509190614b5b565b60405180910390f35b61016161075f565b005b61017d60048036038101906101789190613910565b61089c565b005b610187610a1a565b60405161019491906146a9565b60405180910390f35b6101a5610a44565b6040516101b2919061479e565b60405180910390f35b6101c3610a6a565b6040516101d09190614783565b60405180910390f35b6101f360048036038101906101ee9190613910565b610a90565b6040516102009190614768565b60405180910390f35b610223600480360381019061021e9190613a44565b610ab0565b005b61023f600480360381019061023a9190613910565b610bb0565b005b61025b6004803603810190610256919061378b565b610d2e565b005b610277600480360381019061027291906137dd565b610eda565b005b610293600480360381019061028e91906138e7565b611307565b005b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102c361146e565b73ffffffffffffffffffffffffffffffffffffffff166102e1610a1a565b73ffffffffffffffffffffffffffffffffffffffff1614610337576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032e90614a3b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156103a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039e90614a5b565b60405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd02944e734a676af7bc6d3c180fcb9a5635972ee68667190d0ec9e1bcedde47b8160405161041791906146a9565b60405180910390a150565b60006069548280604001906104379190614cdc565b9050111561047a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047190614afb565b60405180910390fd5b60008061048684611476565b9150915060008060005b8680604001906104a09190614cdc565b905081101561064e57600060018111156104b657fe5b8780604001906104c69190614cdc565b838181106104d057fe5b90506020020160208101906104e5919061398b565b60018111156104f057fe5b148061053f575060018081111561050357fe5b8780604001906105139190614cdc565b8381811061051d57fe5b9050602002016020810190610532919061398b565b600181111561053d57fe5b145b61057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590614a7b565b60405180910390fd5b6000600181111561058b57fe5b87806040019061059b9190614cdc565b838181106105a557fe5b90506020020160208101906105ba919061398b565b60018111156105c557fe5b141561060e576105ff8780600001906105de9190614d33565b858181106105e857fe5b90506020028101906105fa9190614de1565b611b8c565b95508280600101935050610641565b6106368780602001906106219190614d8a565b8481811061062b57fe5b905060c00201611eb7565b955081806001019250505b8080600101915050610490565b50600061065b87876120f9565b9050606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663818ef019326040518263ffffffff1660e01b81526004016106b891906146c4565b600060405180830381600087803b1580156106d257600080fd5b505af11580156106e6573d6000803e3d6000fd5b505050503273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f1621cb2414b25cfb014ed2e1e8051310c0f691ac8d2ed92928e804595df0553b8689898660405161074d9493929190614b76565b60405180910390a35050505050919050565b61076761146e565b73ffffffffffffffffffffffffffffffffffffffff16610785610a1a565b73ffffffffffffffffffffffffffffffffffffffff16146107db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d290614a3b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6108a461146e565b73ffffffffffffffffffffffffffffffffffffffff166108c2610a1a565b73ffffffffffffffffffffffffffffffffffffffff1614610918576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090f90614a3b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097f9061491b565b60405180910390fd5b6001606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f763ba138b73b63a43de614b1d4efd85711b3240cdb9c79a0a6a67647a95c4a3181604051610a0f91906146a9565b60405180910390a150565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60686020528060005260406000206000915054906101000a900460ff1681565b610ab861146e565b73ffffffffffffffffffffffffffffffffffffffff16610ad6610a1a565b73ffffffffffffffffffffffffffffffffffffffff1614610b2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2390614a3b565b60405180910390fd5b60008111610b6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b66906147fb565b60405180910390fd5b806069819055507f47db5040426af8ac88cc15012b2cf38e2bee85044b14306a1771c34636a8d2b281604051610ba59190614b5b565b60405180910390a150565b610bb861146e565b73ffffffffffffffffffffffffffffffffffffffff16610bd6610a1a565b73ffffffffffffffffffffffffffffffffffffffff1614610c2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2390614a3b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c939061491b565b60405180910390fd5b6000606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f62825d4e3dc47438cdd2a3014131db621a70e653474b90da2dd00d8ddb90bfca81604051610d2391906146a9565b60405180910390a150565b610d3661146e565b73ffffffffffffffffffffffffffffffffffffffff16610d54610a1a565b73ffffffffffffffffffffffffffffffffffffffff1614610daa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da190614a3b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e119061487b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060019054906101000a900460ff1680610ef95750610ef8612366565b5b80610f0f575060008054906101000a900460ff16155b610f4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f45906149bb565b60405180910390fd5b60008060019054906101000a900460ff161590508015610f9e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141561100e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100590614a1b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561107e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107590614a5b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156110ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e590614abb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561115e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611155906149fb565b60405180910390fd5b60008214156111a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111999061485b565b60405180910390fd5b6111aa612377565b6111b386610d2e565b83606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816069819055506112868461089c565b6001606860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080156112ff5760008060016101000a81548160ff0219169083151502179055505b505050505050565b61130f61146e565b73ffffffffffffffffffffffffffffffffffffffff1661132d610a1a565b73ffffffffffffffffffffffffffffffffffffffff1614611383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137a90614a3b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ea906149fb565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f709a60e72bf092aafa932d3f93f26f1cc30afcdda76e5b1f24ccb06e79242edb8160405161146391906146a9565b60405180910390a150565b600033905090565b6000806000600181111561148657fe5b8380604001906114969190614cdc565b60008181106114a157fe5b90506020020160208101906114b6919061398b565b60018111156114c157fe5b14156119ab576060600060018111156114d657fe5b8480600001906114e69190614d33565b60008181106114f157fe5b90506020028101906115039190614de1565b60000160208101906115159190613962565b600181111561152057fe5b141561172d57611726606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561159157600080fd5b505afa1580156115a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c991906137b4565b8580600001906115d99190614d33565b60008181106115e457fe5b90506020028101906115f69190614de1565b6020013586806000019061160a9190614d33565b600081811061161557fe5b90506020028101906116279190614de1565b80606001906116369190614c85565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ea60f361326040518263ffffffff1660e01b81526004016116d191906146c4565b60206040518083038186803b1580156116e957600080fd5b505afa1580156116fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117219190613a6d565b61246f565b9050611930565b61192d606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561179857600080fd5b505afa1580156117ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d091906137b4565b8580600001906117e09190614d33565b60008181106117eb57fe5b90506020028101906117fd9190614de1565b604001358680600001906118119190614d33565b600081811061181c57fe5b905060200281019061182e9190614de1565b806060019061183d9190614c85565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ea60f361326040518263ffffffff1660e01b81526004016118d891906146c4565b60206040518083038186803b1580156118f057600080fd5b505afa158015611904573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119289190613a6d565b6125b6565b90505b8380600001906119409190614d33565b600081811061194b57fe5b905060200281019061195d9190614de1565b806060019061196c9190614c85565b600081811061197757fe5b905060200201602081019061198c919061378b565b92508060008151811061199b57fe5b6020026020010151915050611b54565b60008380602001906119bd9190614d8a565b60008181106119c857fe5b905060c0020160000160208101906119e0919061378b565b9050606860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611a6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a659061481b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166382b86600858060200190611a9a9190614d8a565b6000818110611aa557fe5b905060c002016020016020810190611abd9190613a96565b6040518263ffffffff1660e01b8152600401611ad99190614c17565b60206040518083038186803b158015611af157600080fd5b505afa158015611b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2991906138be565b9250838060200190611b3b9190614d8a565b6000818110611b4657fe5b905060c00201606001359150505b6000829050611b863330848473ffffffffffffffffffffffffffffffffffffffff16612705909392919063ffffffff16565b50915091565b6000806001811115611b9a57fe5b826000016020810190611bad9190613962565b6001811115611bb857fe5b1480611beb5750600180811115611bcb57fe5b826000016020810190611bde9190613962565b6001811115611be957fe5b145b611c2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c219061483b565b60405180910390fd5b6060611c8c838060600190611c3f9190614c85565b6000818110611c4a57fe5b9050602002016020810190611c5f919061378b565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856020013561278e565b60006001811115611c9957fe5b836000016020810190611cac9190613962565b6001811115611cb757fe5b1415611dac57606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173984602001358560400135868060600190611d159190614c85565b886080016020810190611d28919061378b565b8960a001356040518763ffffffff1660e01b8152600401611d4e96959493929190614bbb565b600060405180830381600087803b158015611d6857600080fd5b505af1158015611d7c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611da59190613854565b9050611e97565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638803dbee84604001358560200135868060600190611e049190614c85565b886080016020810190611e17919061378b565b8960a001356040518763ffffffff1660e01b8152600401611e3d96959493929190614bbb565b600060405180830381600087803b158015611e5757600080fd5b505af1158015611e6b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611e949190613854565b90505b80600182510381518110611ea757fe5b6020026020010151915050919050565b600080826000016020810190611ecd919061378b565b9050606860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611f5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f529061481b565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166382b86600856020016020810190611f8c9190613a96565b6040518263ffffffff1660e01b8152600401611fa89190614c17565b60206040518083038186803b158015611fc057600080fd5b505afa158015611fd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff891906138be565b905061201b81856000016020810190612011919061378b565b866060013561278e565b83600001602081019061202e919061378b565b73ffffffffffffffffffffffffffffffffffffffff16639169558685602001602081019061205c9190613a96565b86604001602081019061206f9190613a96565b876060013588608001358960a001356040518663ffffffff1660e01b815260040161209e959493929190614c32565b602060405180830381600087803b1580156120b857600080fd5b505af11580156120cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f09190613a6d565b92505050919050565b600080600184806040019061210e9190614cdc565b90500390506000600181111561212057fe5b8480604001906121309190614cdc565b8381811061213a57fe5b905060200201602081019061214f919061398b565b600181111561215a57fe5b141561222057600060018580600001906121749190614d33565b90500390506000600186806000019061218d9190614d33565b8481811061219757fe5b90506020028101906121a99190614de1565b80606001906121b89190614c85565b90500390508580600001906121cd9190614d33565b838181106121d757fe5b90506020028101906121e99190614de1565b80606001906121f89190614c85565b8281811061220257fe5b9050602002016020810190612217919061378b565b9350505061232e565b600060018580602001906122349190614d8a565b9050039050600085806020019061224b9190614d8a565b8381811061225557fe5b905060c00201600001602081019061226d919061378b565b90508073ffffffffffffffffffffffffffffffffffffffff166382b8660087806020019061229b9190614d8a565b858181106122a557fe5b905060c0020160400160208101906122bd9190613a96565b6040518263ffffffff1660e01b81526004016122d99190614c17565b60206040518083038186803b1580156122f157600080fd5b505afa158015612305573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232991906138be565b935050505b600082905061235e33858373ffffffffffffffffffffffffffffffffffffffff1661285d9092919063ffffffff16565b505092915050565b6000612371306128e3565b15905090565b600060019054906101000a900460ff16806123965750612395612366565b5b806123ac575060008054906101000a900460ff16155b6123eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123e2906149bb565b60405180910390fd5b60008060019054906101000a900460ff16159050801561243b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6124436128f6565b61244b6129de565b801561246c5760008060016101000a81548160ff0219169083151502179055505b50565b60606002835110156124b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ad9061499b565b60405180910390fd5b825167ffffffffffffffff811180156124ce57600080fd5b506040519080825280602002602001820160405280156124fd5781602001602082028036833780820191505090505b509050838160008151811061250e57fe5b60200260200101818152505060005b60018451038110156125ad576000806125608887858151811061253c57fe5b602002602001015188600187018151811061255357fe5b6020026020010151612b6f565b9150915061258384848151811061257357fe5b6020026020010151838388612c81565b84600185018151811061259257fe5b6020026020010181815250505050808060010191505061251d565b50949350505050565b60606002835110156125fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125f49061499b565b60405180910390fd5b825167ffffffffffffffff8111801561261557600080fd5b506040519080825280602002602001820160405280156126445781602001602082028036833780820191505090505b509050838160018351038151811061265857fe5b6020026020010181815250506000600184510390505b60008111156126fc576000806126ae8887600186038151811061268d57fe5b60200260200101518886815181106126a157fe5b6020026020010151612b6f565b915091506126d18484815181106126c157fe5b6020026020010151838388612dd7565b8460018503815181106126e057fe5b602002602001018181525050505080806001900391505061266e565b50949350505050565b612788846323b872dd60e01b85858560405160240161272693929190614708565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612f3a565b50505050565b600083905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b81526004016127d09291906146df565b60206040518083038186803b1580156127e857600080fd5b505afa1580156127fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128209190613a6d565b9050828110156128565761285584848473ffffffffffffffffffffffffffffffffffffffff166130019092919063ffffffff16565b5b5050505050565b6128de8363a9059cbb60e01b848460405160240161287c92919061473f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612f3a565b505050565b600080823b905060008111915050919050565b600060019054906101000a900460ff16806129155750612914612366565b5b8061292b575060008054906101000a900460ff16155b61296a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612961906149bb565b60405180910390fd5b60008060019054906101000a900460ff1615905080156129ba576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156129db5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806129fd57506129fc612366565b5b80612a13575060008054906101000a900460ff16155b612a52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a49906149bb565b60405180910390fd5b60008060019054906101000a900460ff161590508015612aa2576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000612aac61146e565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015612b6c5760008060016101000a81548160ff0219169083151502179055505b50565b6000806000612b7e8585613129565b509050600080612b8f888888613257565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612bd457600080fd5b505afa158015612be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0c91906139f5565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614612c6b578082612c6e565b81815b8095508196505050505050935093915050565b6000808511612cc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cbc90614b3b565b60405180910390fd5b600084118015612cd55750600083115b612d14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d0b906149db565b60405180910390fd5b6103e58210158015612d2857506103e88211155b612d67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d5e9061493b565b60405180910390fd5b6000612d7c83876132c990919063ffffffff16565b90506000612d9385836132c990919063ffffffff16565b90506000612dbe83612db06103e88a6132c990919063ffffffff16565b61332b90919063ffffffff16565b9050808281612dc957fe5b049350505050949350505050565b6000808511612e1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e12906148db565b60405180910390fd5b600084118015612e2b5750600083115b612e6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e61906149db565b60405180910390fd5b6103e58210158015612e7e57506103e88211155b612ebd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612eb49061493b565b60405180910390fd5b6000612ee66103e8612ed888886132c990919063ffffffff16565b6132c990919063ffffffff16565b90506000612f0f84612f01898861337b90919063ffffffff16565b6132c990919063ffffffff16565b9050612f2e6001828481612f1f57fe5b0461332b90919063ffffffff16565b92505050949350505050565b6060612f9c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166133cb9092919063ffffffff16565b9050600081511115612ffc5780806020019051810190612fbc9190613895565b612ffb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ff290614b1b565b60405180910390fd5b5b505050565b60006130a0828573ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30876040518363ffffffff1660e01b81526004016130429291906146df565b60206040518083038186803b15801561305a57600080fd5b505afa15801561306e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130929190613a6d565b6133e390919063ffffffff16565b90506131238463095ea7b360e01b85846040516024016130c192919061473f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612f3a565b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561319b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131929061495b565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106131d55782846131d8565b83835b8092508193505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613250576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161324790614adb565b60405180910390fd5b9250929050565b60008060006132668585613129565b9150915085828260405160200161327e929190614624565b604051602081830303815290604052805190602001206040516020016132a5929190614667565b6040516020818303038152906040528051906020012060001c925050509392505050565b6000808214806132e657508282838502925082816132e357fe5b04145b613325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161331c9061489b565b60405180910390fd5b92915050565b6000828284019150811015613375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161336c906148fb565b60405180910390fd5b92915050565b60008282840391508111156133c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133bc906147db565b60405180910390fd5b92915050565b60606133da8484600085613438565b90509392505050565b60008082840190508381101561342e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613425906148bb565b60405180910390fd5b8091505092915050565b60608247101561347d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134749061497b565b60405180910390fd5b6134868561354d565b6134c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134bc90614a9b565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516134ef9190614650565b60006040518083038185875af1925050503d806000811461352c576040519150601f19603f3d011682016040523d82523d6000602084013e613531565b606091505b5091509150613541828286613560565b92505050949350505050565b600080823b905060008111915050919050565b60608315613570578290506135c0565b6000835111156135835782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135b791906147b9565b60405180910390fd5b9392505050565b6000813590506135d6816150a4565b92915050565b6000815190506135eb816150a4565b92915050565b600082601f83011261360257600080fd5b815161361561361082614e32565b614e05565b9150818183526020840193506020810190508385602084028201111561363a57600080fd5b60005b8381101561366a5781613650888261374c565b84526020840193506020830192505060018101905061363d565b5050505092915050565b600081519050613683816150bb565b92915050565b600081519050613698816150d2565b92915050565b6000813590506136ad816150e9565b92915050565b6000813590506136c281615100565b92915050565b6000813590506136d781615117565b92915050565b6000813590506136ec8161512e565b92915050565b6000813590506137018161513e565b92915050565b60006060828403121561371957600080fd5b81905092915050565b6000815190506137318161514e565b92915050565b60008135905061374681615165565b92915050565b60008151905061375b81615165565b92915050565b6000815190506137708161517c565b92915050565b60008135905061378581615193565b92915050565b60006020828403121561379d57600080fd5b60006137ab848285016135c7565b91505092915050565b6000602082840312156137c657600080fd5b60006137d4848285016135dc565b91505092915050565b600080600080600060a086880312156137f557600080fd5b6000613803888289016135c7565b9550506020613814888289016136c8565b9450506040613825888289016136b3565b93505060606138368882890161369e565b925050608061384788828901613737565b9150509295509295909350565b60006020828403121561386657600080fd5b600082015167ffffffffffffffff81111561388057600080fd5b61388c848285016135f1565b91505092915050565b6000602082840312156138a757600080fd5b60006138b584828501613674565b91505092915050565b6000602082840312156138d057600080fd5b60006138de84828501613689565b91505092915050565b6000602082840312156138f957600080fd5b60006139078482850161369e565b91505092915050565b60006020828403121561392257600080fd5b6000613930848285016136b3565b91505092915050565b60006020828403121561394b57600080fd5b6000613959848285016136c8565b91505092915050565b60006020828403121561397457600080fd5b6000613982848285016136dd565b91505092915050565b60006020828403121561399d57600080fd5b60006139ab848285016136f2565b91505092915050565b6000602082840312156139c657600080fd5b600082013567ffffffffffffffff8111156139e057600080fd5b6139ec84828501613707565b91505092915050565b600080600060608486031215613a0a57600080fd5b6000613a1886828701613722565b9350506020613a2986828701613722565b9250506040613a3a86828701613761565b9150509250925092565b600060208284031215613a5657600080fd5b6000613a6484828501613737565b91505092915050565b600060208284031215613a7f57600080fd5b6000613a8d8482850161374c565b91505092915050565b600060208284031215613aa857600080fd5b6000613ab684828501613776565b91505092915050565b6000613acb8383613ae6565b60208301905092915050565b613ae081614fa7565b82525050565b613aef81614ed6565b82525050565b613afe81614ed6565b82525050565b613b15613b1082614ed6565b615058565b82525050565b6000613b278385614e87565b9350613b3282614e5a565b8060005b85811015613b6b57613b488284614ebf565b613b528882613abf565b9750613b5d83614e7a565b925050600181019050613b36565b5085925050509392505050565b613b8181614ee8565b82525050565b613b98613b9382614ef4565b61506a565b82525050565b6000613ba982614e64565b613bb38185614e98565b9350613bc3818560208601615025565b80840191505092915050565b613bd881614fb9565b82525050565b613be781614fdd565b82525050565b6000613bf882614e6f565b613c028185614ea3565b9350613c12818560208601615025565b613c1b81615086565b840191505092915050565b6000613c33601583614ea3565b91507f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000006000830152602082019050919050565b6000613c73602383614ea3565b91507f4171756173526f757465723a20496e76616c6964206d6178207377617020686f60008301527f70733b00000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613cd9602b83614ea3565b91507f4171756173526f757465723a2054686520737461626c6520706f6f6c2069732060008301527f6e6f7420656e61626c65640000000000000000000000000000000000000000006020830152604082019050919050565b6000613d3f602283614ea3565b91507f4171756173526f757465723a20496e76616c696420414d4d207377617020747960008301527f70650000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613da5602383614ea3565b91507f4171756173526f757465723a20496e76616c6964206d6178207377617020686f60008301527f70732e00000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613e0b602683614ea3565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613e71601483614ea3565b91507f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006000830152602082019050919050565b6000613eb1601b83614ea3565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000613ef1602c83614ea3565b91507f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60008301527f55545055545f414d4f554e5400000000000000000000000000000000000000006020830152604082019050919050565b6000613f57601483614ea3565b91507f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006000830152602082019050919050565b6000613f97603683614ea3565b91507f4171756173526f757465723a2054686520737461626c65506f6f6c2063616e6e60008301527f6f7420626520746865207a65726f2061646472657373000000000000000000006020830152604082019050919050565b6000613ffd602083614ea3565b91507f556e697377617056324c6962726172793a204645455f4d554c5449504c4945526000830152602082019050919050565b600061403d602083614eb4565b91507f6ef9e427f9c071a27efafa75b3b56e02dd81c7e0d3f18b9b62d3a2fb194077bd6000830152602082019050919050565b600061407d602583614ea3565b91507f556e697377617056324c6962726172793a204944454e544943414c5f4144445260008301527f45535345530000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006140e3602683614ea3565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614149601e83614ea3565b91507f556e697377617056324c6962726172793a20494e56414c49445f5041544800006000830152602082019050919050565b6000614189602e83614ea3565b91507f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008301527f647920696e697469616c697a65640000000000000000000000000000000000006020830152604082019050919050565b60006141ef602883614ea3565b91507f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60008301527f49515549444954590000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614255602783614ea3565b91507f4171756173526f757465723a20496e76616c6964204e46542061646d696e206160008301527f6464726573732e000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006142bb601b83614ea3565b91507f4171756173526f757465723a20496e76616c6964206f776e65722e00000000006000830152602082019050919050565b60006142fb600183614eb4565b91507fff000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b600061433b602083614ea3565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600061437b602883614ea3565b91507f4171756173526f757465723a20496e76616c696420414d4d20726f757465722060008301527f616464726573732e0000000000000000000000000000000000000000000000006020830152604082019050919050565b60006143e1601e83614ea3565b91507f4171756173526f757465723a20496e76616c69642073776170207479706500006000830152602082019050919050565b6000614421601d83614ea3565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000614461602983614ea3565b91507f4171756173526f757465723a20496e76616c696420537461626c6520506f6f6c60008301527f20616464726573732e00000000000000000000000000000000000000000000006020830152604082019050919050565b60006144c7601e83614ea3565b91507f556e697377617056324c6962726172793a205a45524f5f4144445245535300006000830152602082019050919050565b6000614507601c83614ea3565b91507f496e76616c6964206e756d626572206f6620737761702063616c6c73000000006000830152602082019050919050565b6000614547602a83614ea3565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b60006145ad602b83614ea3565b91507f556e697377617056324c6962726172793a20494e53554646494349454e545f4960008301527f4e5055545f414d4f554e540000000000000000000000000000000000000000006020830152604082019050919050565b61460f81614f80565b82525050565b61461e81614f9a565b82525050565b60006146308285613b04565b6014820191506146408284613b04565b6014820191508190509392505050565b600061465c8284613b9e565b915081905092915050565b6000614672826142ee565b915061467e8285613b04565b60148201915061468e8284613b87565b60208201915061469d82614030565b91508190509392505050565b60006020820190506146be6000830184613af5565b92915050565b60006020820190506146d96000830184613ad7565b92915050565b60006040820190506146f46000830185613af5565b6147016020830184613af5565b9392505050565b600060608201905061471d6000830186613af5565b61472a6020830185613af5565b6147376040830184614606565b949350505050565b60006040820190506147546000830185613af5565b6147616020830184614606565b9392505050565b600060208201905061477d6000830184613b78565b92915050565b60006020820190506147986000830184613bcf565b92915050565b60006020820190506147b36000830184613bde565b92915050565b600060208201905081810360008301526147d38184613bed565b905092915050565b600060208201905081810360008301526147f481613c26565b9050919050565b6000602082019050818103600083015261481481613c66565b9050919050565b6000602082019050818103600083015261483481613ccc565b9050919050565b6000602082019050818103600083015261485481613d32565b9050919050565b6000602082019050818103600083015261487481613d98565b9050919050565b6000602082019050818103600083015261489481613dfe565b9050919050565b600060208201905081810360008301526148b481613e64565b9050919050565b600060208201905081810360008301526148d481613ea4565b9050919050565b600060208201905081810360008301526148f481613ee4565b9050919050565b6000602082019050818103600083015261491481613f4a565b9050919050565b6000602082019050818103600083015261493481613f8a565b9050919050565b6000602082019050818103600083015261495481613ff0565b9050919050565b6000602082019050818103600083015261497481614070565b9050919050565b60006020820190508181036000830152614994816140d6565b9050919050565b600060208201905081810360008301526149b48161413c565b9050919050565b600060208201905081810360008301526149d48161417c565b9050919050565b600060208201905081810360008301526149f4816141e2565b9050919050565b60006020820190508181036000830152614a1481614248565b9050919050565b60006020820190508181036000830152614a34816142ae565b9050919050565b60006020820190508181036000830152614a548161432e565b9050919050565b60006020820190508181036000830152614a748161436e565b9050919050565b60006020820190508181036000830152614a94816143d4565b9050919050565b60006020820190508181036000830152614ab481614414565b9050919050565b60006020820190508181036000830152614ad481614454565b9050919050565b60006020820190508181036000830152614af4816144ba565b9050919050565b60006020820190508181036000830152614b14816144fa565b9050919050565b60006020820190508181036000830152614b348161453a565b9050919050565b60006020820190508181036000830152614b54816145a0565b9050919050565b6000602082019050614b706000830184614606565b92915050565b6000608082019050614b8b6000830187614606565b614b986020830186614606565b614ba56040830185613af5565b614bb26060830184613af5565b95945050505050565b600060a082019050614bd06000830189614606565b614bdd6020830188614606565b8181036040830152614bf0818688613b1b565b9050614bff6060830185613af5565b614c0c6080830184614606565b979650505050505050565b6000602082019050614c2c6000830184614615565b92915050565b600060a082019050614c476000830188614615565b614c546020830187614615565b614c616040830186614606565b614c6e6060830185614606565b614c7b6080830184614606565b9695505050505050565b60008083356001602003843603038112614c9e57600080fd5b80840192508235915067ffffffffffffffff821115614cbc57600080fd5b602083019250602082023603831315614cd457600080fd5b509250929050565b60008083356001602003843603038112614cf557600080fd5b80840192508235915067ffffffffffffffff821115614d1357600080fd5b602083019250602082023603831315614d2b57600080fd5b509250929050565b60008083356001602003843603038112614d4c57600080fd5b80840192508235915067ffffffffffffffff821115614d6a57600080fd5b602083019250602082023603831315614d8257600080fd5b509250929050565b60008083356001602003843603038112614da357600080fd5b80840192508235915067ffffffffffffffff821115614dc157600080fd5b60208301925060c082023603831315614dd957600080fd5b509250929050565b60008235600160c003833603038112614df957600080fd5b80830191505092915050565b6000604051905081810181811067ffffffffffffffff82111715614e2857600080fd5b8060405250919050565b600067ffffffffffffffff821115614e4957600080fd5b602082029050602081019050919050565b6000819050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000614ece60208401846135c7565b905092915050565b6000614ee182614f60565b9050919050565b60008115159050919050565b6000819050919050565b6000614f0982614ed6565b9050919050565b6000614f1b82614ed6565b9050919050565b6000614f2d82614ed6565b9050919050565b6000614f3f82614ed6565b9050919050565b60006dffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b6000614fb282615001565b9050919050565b6000614fc482614fcb565b9050919050565b6000614fd682614f60565b9050919050565b6000614fe882614fef565b9050919050565b6000614ffa82614f60565b9050919050565b600061500c82615013565b9050919050565b600061501e82614f60565b9050919050565b60005b83811015615043578082015181840152602081019050615028565b83811115615052576000848401525b50505050565b600061506382615074565b9050919050565b6000819050919050565b600061507f82615097565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b6150ad81614ed6565b81146150b857600080fd5b50565b6150c481614ee8565b81146150cf57600080fd5b50565b6150db81614efe565b81146150e657600080fd5b50565b6150f281614f10565b81146150fd57600080fd5b50565b61510981614f22565b811461511457600080fd5b50565b61512081614f34565b811461512b57600080fd5b50565b6002811061513b57600080fd5b50565b6002811061514b57600080fd5b50565b61515781614f46565b811461516257600080fd5b50565b61516e81614f80565b811461517957600080fd5b50565b61518581614f8a565b811461519057600080fd5b50565b61519c81614f9a565b81146151a757600080fd5b5056fea26469706673582212208cb734c56aa44c43ef0605afa3cb05bf2d4af98d30288645cebde5609655bb1164736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 861,
        "contract": "contracts/router/AquasRouter.sol:AquasRouter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 864,
        "contract": "contracts/router/AquasRouter.sol:AquasRouter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2374,
        "contract": "contracts/router/AquasRouter.sol:AquasRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 292,
        "contract": "contracts/router/AquasRouter.sol:AquasRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 411,
        "contract": "contracts/router/AquasRouter.sol:AquasRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 22679,
        "contract": "contracts/router/AquasRouter.sol:AquasRouter",
        "label": "rubyStableSwap",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 22681,
        "contract": "contracts/router/AquasRouter.sol:AquasRouter",
        "label": "ammRouter",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IUniswapV2Router02)18321"
      },
      {
        "astId": 22683,
        "contract": "contracts/router/AquasRouter.sol:AquasRouter",
        "label": "nftAdmin",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(INFTAdmin)20733"
      },
      {
        "astId": 22687,
        "contract": "contracts/router/AquasRouter.sol:AquasRouter",
        "label": "enabledStablePools",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_contract(ISwap)23802,t_bool)"
      },
      {
        "astId": 22689,
        "contract": "contracts/router/AquasRouter.sol:AquasRouter",
        "label": "_maxSwapHops",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(INFTAdmin)20733": {
        "encoding": "inplace",
        "label": "contract INFTAdmin",
        "numberOfBytes": "20"
      },
      "t_contract(ISwap)23802": {
        "encoding": "inplace",
        "label": "contract ISwap",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)18321": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(ISwap)23802,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(ISwap)23802",
        "label": "mapping(contract ISwap => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}

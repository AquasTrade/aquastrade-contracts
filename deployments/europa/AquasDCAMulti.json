{
  "address": "0x9683ADC7FD56b81F1eb70040B30864a822C330f2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aqua",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_dcaStorageId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_dcaStorage",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenQuote",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenBase",
          "type": "address"
        }
      ],
      "name": "DCAStorageCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AQUA_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BurnAqua",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "ChangeEntryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxOrders",
          "type": "uint256"
        }
      ],
      "name": "ChangeMaxOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newRelayer",
          "type": "address"
        }
      ],
      "name": "ChangeRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dcaStorageID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "DeleteOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EntryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        }
      ],
      "name": "ExecuteOrderRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dcaStorageID",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_buyOrder",
          "type": "bool"
        }
      ],
      "name": "ExecuteOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dcaStorageID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "GetAllOrders",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_storageAddress",
          "type": "address"
        }
      ],
      "name": "GetIndexUsingStorageAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dcaStorageID",
          "type": "uint256"
        }
      ],
      "name": "GetLastPoolPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dcaStorageID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "GetOrderDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "interval",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenPriceMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenPriceMax",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buyOrder",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "lastSwapCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastSwapTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSwapSum",
              "type": "uint256"
            }
          ],
          "internalType": "struct AquasDCAMulti.OrderDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dcaStorageID",
          "type": "uint256"
        }
      ],
      "name": "GetOrderFilled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dcaStorageID",
          "type": "uint256"
        }
      ],
      "name": "GetOrderLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dcaStorageID",
          "type": "uint256"
        }
      ],
      "name": "GetOrdersTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dcaStorageID",
          "type": "uint256"
        }
      ],
      "name": "GetStorageAddressUsingIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenQuote",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenBase",
          "type": "address"
        }
      ],
      "name": "GetStorageAddressUsingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dcaStorageID",
          "type": "uint256"
        }
      ],
      "name": "GetTokenBaseUsingIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dcaStorageID",
          "type": "uint256"
        }
      ],
      "name": "GetTokenQuoteUsingIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dcaStorageID",
          "type": "uint256"
        }
      ],
      "name": "GetTokenRouterUsingIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_ORDERS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NFTAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Relayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "StorageID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenQuote",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenBase",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_intervalSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_durationHours",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenPriceMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenPriceMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_buyOrder",
          "type": "bool"
        }
      ],
      "name": "SubmitDCAOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_on_off",
          "type": "bool"
        }
      ],
      "name": "TradingCondition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TradingEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allStorages",
      "outputs": [
        {
          "internalType": "contract DCAStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "index",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "setNftAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9970288e7ba823378871aa1e6347b408106f4a2107e74108fa9dff624d156891",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0xCDeb7F7974D89Fd71089487D65AA9731d7E846F5",
    "contractAddress": "0x9683ADC7FD56b81F1eb70040B30864a822C330f2",
    "transactionIndex": 0,
    "gasUsed": "8286975",
    "logsBloom": "0x
    "blockHash": "0x9a86239077dde148167f56f2a3f8f5cfefb47b98aefdb4c0288721a49f521b08",
    "transactionHash": "0x9970288e7ba823378871aa1e6347b408106f4a2107e74108fa9dff624d156891",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5236293,
        "transactionHash": "0x9970288e7ba823378871aa1e6347b408106f4a2107e74108fa9dff624d156891",
        "address": "0x9683ADC7FD56b81F1eb70040B30864a822C330f2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cdeb7f7974d89fd71089487d65aa9731d7e846f5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9a86239077dde148167f56f2a3f8f5cfefb47b98aefdb4c0288721a49f521b08"
      }
    ],
    "blockNumber": 5236293,
    "cumulativeGasUsed": "8286975",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCDeb7F7974D89Fd71089487D65AA9731d7E846F5",
    "0xF7F957D88768126916dAF3C1705D13C291d2B7D8"
  ],
  "numDeployments": 9,
  "solcInputHash": "ffd5408bac37690b24500ba77256493d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aqua\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dcaStorageId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_dcaStorage\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenQuote\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenBase\",\"type\":\"address\"}],\"name\":\"DCAStorageCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AQUA_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BurnAqua\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"ChangeEntryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxOrders\",\"type\":\"uint256\"}],\"name\":\"ChangeMaxOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRelayer\",\"type\":\"address\"}],\"name\":\"ChangeRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaStorageID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"DeleteOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EntryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"}],\"name\":\"ExecuteOrderRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaStorageID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_buyOrder\",\"type\":\"bool\"}],\"name\":\"ExecuteOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaStorageID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"GetAllOrders\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storageAddress\",\"type\":\"address\"}],\"name\":\"GetIndexUsingStorageAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaStorageID\",\"type\":\"uint256\"}],\"name\":\"GetLastPoolPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaStorageID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"GetOrderDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPriceMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPriceMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buyOrder\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastSwapCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSwapTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSwapSum\",\"type\":\"uint256\"}],\"internalType\":\"struct AquasDCAMulti.OrderDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaStorageID\",\"type\":\"uint256\"}],\"name\":\"GetOrderFilled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaStorageID\",\"type\":\"uint256\"}],\"name\":\"GetOrderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaStorageID\",\"type\":\"uint256\"}],\"name\":\"GetOrdersTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaStorageID\",\"type\":\"uint256\"}],\"name\":\"GetStorageAddressUsingIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenQuote\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenBase\",\"type\":\"address\"}],\"name\":\"GetStorageAddressUsingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaStorageID\",\"type\":\"uint256\"}],\"name\":\"GetTokenBaseUsingIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaStorageID\",\"type\":\"uint256\"}],\"name\":\"GetTokenQuoteUsingIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcaStorageID\",\"type\":\"uint256\"}],\"name\":\"GetTokenRouterUsingIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ORDERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Relayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StorageID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenQuote\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenBase\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_intervalSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPriceMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPriceMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_buyOrder\",\"type\":\"bool\"}],\"name\":\"SubmitDCAOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_on_off\",\"type\":\"bool\"}],\"name\":\"TradingCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allStorages\",\"outputs\":[{\"internalType\":\"contract DCAStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setNftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dca/AquasDCAMulti.sol\":\"AquasDCAMulti\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x3dab19bb4a63bcbda1ee153ca291694f92f9009fad28626126b15a8503b0e5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20Capped is ERC20 {\\n    using SafeMath for uint256;\\n\\n    uint256 private _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    constructor (uint256 cap_) internal {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - minted tokens must not cause the total supply to go over the cap.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) { // When minting tokens\\n            require(totalSupply().add(amount) <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x94e4d02b80450cf26bec54be6c0cf52fe4e8ce91dfc6e97794dce19ded2a3fa4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/amm/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint256 feeMultiplier\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint256 feeMultiplier\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] calldata path,\\n        uint256 feeMultiplier\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        uint256 feeMultiplier\\n    ) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xa91e35729661da1916c81248ba75074bfbd9eed60ba873d8b4d7e0a27ac3a8b2\",\"license\":\"GPL-3.0\"},\"contracts/amm/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.2;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\nimport \\\"../../interfaces/INFTAdmin.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    event FactorySet(address indexed newFactory);\\n\\n    event NFTAdminSet(address indexed newNftAdmin);\\n\\n    function nftAdmin() external pure returns (INFTAdmin);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function setFactory(address newFactory) external;\\n\\n    function setNftAdmin(INFTAdmin newNftAdmin) external;\\n}\\n\",\"keccak256\":\"0xb519d65338e13beb518055a99aa08a4c4f5f9fe997125b03278af8e19962ab54\",\"license\":\"GPL-3.0\"},\"contracts/dca/AquasDCAMulti.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./DCAMultiStorage.sol\\\";\\nimport \\\"../interfaces/INFT.sol\\\";\\nimport \\\"../token_mappings/AQUA.sol\\\";\\n\\n/*\\n- remove all USDC implementations and just have QUOTE / BASE tokenAddresses \\n- enable Multi ROuter addresses , therefore we can deploy DCA storage contracts for any AMM : DEX \\n- - just pass down the router addresses when creating the DCA storages \\n*/\\n\\ncontract AquasDCAMulti is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address public NFTAddress; // Set erc721 collection\\n    bool public TradingEnabled;\\n    address public Relayer;\\n    uint256 public EntryFee;\\n    uint256 public MAX_ORDERS = 250;\\n    uint256 public StorageID; // storage length : starts at 1\\n    mapping(uint256 => DCAStorage) public allStorages;\\n\\n   \\n    address public AQUA_ADDRESS;\\n    uint256 public index; //from 0\\n\\n    struct OrderDetails {\\n        uint256 index;\\n        address trader;\\n        uint256 interval;\\n        uint256 tokenPriceMin;\\n        uint256 tokenPriceMax;\\n        uint256 tokenAmount;\\n        bool buyOrder;\\n        uint256 lastSwapCount;\\n        uint256 lastSwapTime;\\n        uint256 totalSwapSum;\\n    }\\n\\n    event DCAStorageCreated(\\n        uint256 _dcaStorageId,\\n        address _dcaStorage,\\n        address _router,\\n        address _tokenQuote,\\n        address _tokenBase\\n    );\\n\\n    // relayer any EOA\\n    constructor(address _relayer, address _aqua) public {\\n        require(_relayer != address(0), \\\"Factory: Missing RELAYER address\\\");\\n        require(_aqua != address(0), \\\"Factory: Missing AQUA_ADDRESS address\\\");\\n\\n        Relayer = _relayer;\\n        AQUA_ADDRESS = _aqua;\\n        EntryFee = 1e18; //Default fee is 1 AQUA_ADDRESS\\n        TradingEnabled = true;\\n        index = 0;\\n    }\\n\\n    // returns all the indexes\\n    function GetAllOrders(uint256 _dcaStorageID, address _trader) public view returns (uint256[] memory) {\\n        require(_dcaStorageID > 0, \\\"AquasDCA: GetAllOrders: incorrect index\\\");\\n        require(_trader != address(0), \\\"AquasDCA: GetAllOrders: incorrect trader address\\\");\\n        address dca = GetStorageAddressUsingIndex(_dcaStorageID);\\n        (uint256[] memory indexes, uint256 buyCount, uint256 sellCount) = DCAStorage(dca).GetMyOrderDetails(_trader);\\n        if (buyCount > 0 || sellCount > 0) {\\n            return (indexes);\\n        }\\n    }\\n\\n    // Working\\n    function GetOrderDetails(uint256 _dcaStorageID, uint256 _index) public view returns (OrderDetails memory) {\\n        (\\n            uint256 index, // todo : double check this index or rename\\n            address trader,\\n            uint256 interval,\\n            uint256 tokenPriceMin,\\n            uint256 tokenPriceMax,\\n            uint256 tokenAmount,\\n            bool buyOrder,\\n            uint256 lastSwapCount,\\n            uint256 lastSwapTime,\\n            uint256 totalSwapSum\\n        ) = DCAStorage(GetStorageAddressUsingIndex(_dcaStorageID)).GetOrderDetails(_index);\\n\\n        OrderDetails memory order;\\n        order.index = index;\\n        order.trader = trader;\\n        order.interval = interval;\\n        order.tokenPriceMin = tokenPriceMin;\\n        order.tokenPriceMax = tokenPriceMax;\\n        order.tokenAmount = tokenAmount;\\n        order.buyOrder = buyOrder;\\n        order.lastSwapTime = lastSwapTime;\\n        order.lastSwapCount = lastSwapCount;\\n        order.totalSwapSum = totalSwapSum;\\n        return order;\\n    }\\n\\n    function GetTokenQuoteUsingIndex(uint256 _dcaStorageID) public view returns (address) {\\n        require(_dcaStorageID > 0, \\\"AquasDCA: DCAStorageID: incorrect index\\\");\\n        return DCAStorage(GetStorageAddressUsingIndex(_dcaStorageID)).TokenQuote();\\n    }\\n\\n     function GetTokenBaseUsingIndex(uint256 _dcaStorageID) public view returns (address) {\\n        require(_dcaStorageID > 0, \\\"AquasDCA: DCAStorageID: incorrect index\\\");\\n        return DCAStorage(GetStorageAddressUsingIndex(_dcaStorageID)).TokenBase();\\n    }\\n\\n     function GetTokenRouterUsingIndex(uint256 _dcaStorageID) public view returns (address) {\\n        require(_dcaStorageID > 0, \\\"AquasDCA: DCAStorageID: incorrect index\\\");\\n        return DCAStorage(GetStorageAddressUsingIndex(_dcaStorageID)).UNISWAP_V2_ROUTER();\\n    }\\n\\n    function GetOrderLength(uint256 _dcaStorageID) public view returns (uint256) {\\n        require(_dcaStorageID > 0, \\\"AquasDCA: DCAStorageID: incorrect index\\\");\\n        return DCAStorage(GetStorageAddressUsingIndex(_dcaStorageID)).OrdersLength();\\n    }\\n\\n    function GetOrderFilled(uint256 _dcaStorageID) public view returns (uint256) {\\n        require(_dcaStorageID > 0, \\\"AquasDCA: DCAStorageID: incorrect index\\\");\\n        return DCAStorage(GetStorageAddressUsingIndex(_dcaStorageID)).OrdersFilled();\\n    }\\n\\n    function GetOrdersTotal(uint256 _dcaStorageID) public view returns (uint256) {\\n        require(_dcaStorageID > 0, \\\"AquasDCA: DCAStorageID: incorrect index\\\");\\n        return DCAStorage(GetStorageAddressUsingIndex(_dcaStorageID)).OrdersTotal();\\n    }\\n\\n    function GetLastPoolPrice(uint256 _dcaStorageID) public view returns (uint256) {\\n        require(_dcaStorageID > 0, \\\"AquasDCA: DCAStorageID: incorrect index\\\");\\n        return DCAStorage(GetStorageAddressUsingIndex(_dcaStorageID)).LastPoolPrice();\\n    }\\n\\n    // input index : return the correct Storage address\\n    function GetStorageAddressUsingIndex(uint256 _dcaStorageID) public view returns (address) {\\n        require(_dcaStorageID <= StorageID, \\\"AquasDCA: DCAStorage: incorrect index\\\");\\n        require(_dcaStorageID > 0, \\\"AquasDCA: DCAStorage: incorrect index\\\");\\n        return address(allStorages[_dcaStorageID]);\\n    }\\n\\n    function GetStorageAddressUsingToken(\\n        address _router,\\n        address _tokenQuote,\\n        address _tokenBase\\n    ) public returns (address) {\\n        require(_tokenQuote != address(0), \\\"AquasDCA: DCAStorageID: incorrect token address\\\");\\n        require(_tokenBase != address(0), \\\"AquasDCA: DCAStorageID: incorrect token address\\\");\\n        require(_router != address(0), \\\"AquasDCA: DCAStorageID: incorrect router address\\\");\\n\\n        for (uint256 i = 1; i <= StorageID; i++) {\\n            address dca = GetStorageAddressUsingIndex(i);\\n            address symbolQuote = DCAStorage(dca).TokenQuote();\\n            address symbolBase = DCAStorage(dca).TokenBase();\\n            address router = DCAStorage(dca).UNISWAP_V2_ROUTER();\\n            // match correct dca storage\\n            if (_tokenQuote == symbolQuote && _tokenBase == symbolBase && _router == router) {\\n                // check order length\\n                uint256 orderLength = DCAStorage(dca).OrdersLength();\\n                if (orderLength < MAX_ORDERS) {\\n                    return dca;\\n                }\\n            }\\n        }\\n        // else deploy new storage\\n        return _deployDCAStorage(_router, _tokenQuote, _tokenBase);\\n    }\\n\\n    function ExecuteOrders(uint256 _dcaStorageID, bool _buyOrder) public {\\n        require(_dcaStorageID > 0, \\\"AquasDCA: DCAStorageID: incorrect index\\\");\\n        DCAStorage(GetStorageAddressUsingIndex(_dcaStorageID)).ExecuteOrders(_buyOrder);\\n    }\\n\\n    function GetIndexUsingStorageAddress(address _storageAddress) public view returns (uint256) {\\n        require(_storageAddress != address(0), \\\"AquasDCA: DCAStorageID: incorrect storage address\\\");\\n        for (uint256 i = 1; i <= StorageID; i++) {\\n            address dca = GetStorageAddressUsingIndex(i);\\n            // match correct\\n            if (dca == _storageAddress) {\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function ExecuteOrderRange(uint256 _from) public returns (uint256) {\\n        require(_from > 0, \\\"AquasDCA: DCAStorageID: incorrect index\\\");\\n        uint256 executed = 0; // add up the executed orders\\n        uint256 countOrders;\\n        for (uint256 i = _from; i <= StorageID; i++) {\\n            address dca = GetStorageAddressUsingIndex(i);\\n            // check order length\\n            uint256 orderLength = DCAStorage(dca).OrdersLength();\\n            countOrders = countOrders.add(orderLength);\\n            // will this exceed the limit\\n            if (executed.add(countOrders) > MAX_ORDERS) {\\n                //yes, return this storage id, to process on the next block\\n                return i;\\n            } else {\\n                DCAStorage(dca).ExecuteOrders(true);\\n                DCAStorage(dca).ExecuteOrders(false);\\n                executed = executed.add(countOrders);\\n            }\\n        }\\n        return 1; //default\\n    }\\n\\n    // need to redesign\\n    function SubmitDCAOrder(\\n        address _router,\\n        address _tokenQuote,\\n        address _tokenBase,\\n        uint256 _intervalSeconds,\\n        uint256 _durationHours,\\n        uint256 _tokenPriceMin,\\n        uint256 _tokenPriceMax,\\n        uint256 _tokenAmount,\\n        bool _buyOrder\\n    ) public {\\n        require(TradingEnabled == true, \\\"Trading is off\\\");\\n\\n    // todo : add more require here\\n\\n\\n        address storageAddress = _findContractAddress(_router, _tokenQuote, _tokenBase); // new DCA is deployed if needed\\n        require(storageAddress != address(0), \\\"No Storage Contract Found for Token\\\");\\n\\n        bool funded = false;\\n        _transferAquaToFactory(); // collect AQUA_ADDRESS Fee\\n        if (_buyOrder) {\\n            _transferTokenToStorage(_tokenBase, _tokenAmount, storageAddress);\\n            funded = true;\\n        } else {\\n            _transferTokenToStorage(_tokenQuote, _tokenAmount, storageAddress);\\n            funded = true;\\n        }\\n        if (funded) {\\n            DCAStorage(storageAddress).SubmitDCAOrderFromFactory(\\n                index,\\n                _intervalSeconds,\\n                _durationHours,\\n                _tokenPriceMin,\\n                _tokenPriceMax,\\n                _tokenAmount,\\n                _buyOrder\\n            );\\n            index++;\\n        }\\n    }\\n\\n    function DeleteOrder(uint256 _dcaStorageID, uint256 _index) public {\\n        require(_dcaStorageID > 0, \\\"AquasDCA: DeleteOrder: incorrect orderTicketNumber\\\");\\n        DCAStorage(GetStorageAddressUsingIndex(_dcaStorageID)).DeleteOrderFromFacotry(_index);\\n    }\\n\\n    // Must give Factory Admin BURNER_ROLE for this functionality\\n    function BurnAqua() public {\\n        uint256 toburn = IERC20(AQUA_ADDRESS).balanceOf(address(this));\\n        AQUA(AQUA_ADDRESS).burn(toburn);\\n    }\\n\\n    function ChangeEntryFee(uint256 _fee) external onlyOwner {\\n        EntryFee = _fee;\\n    }\\n\\n    function ChangeRelayer(address _newRelayer) external onlyOwner {\\n        Relayer = _newRelayer;\\n    }\\n\\n    function ChangeMaxOrders(uint256 _maxOrders) external onlyOwner {\\n        MAX_ORDERS = _maxOrders;\\n    }\\n\\n    function TradingCondition(bool _on_off) external onlyOwner {\\n        TradingEnabled = _on_off;\\n    }\\n\\n    function setNftAddress(address newAddress) external onlyOwner {\\n        require(address(newAddress) != address(0), \\\"AquasDCA: newNFT Address\\\");\\n        NFTAddress = newAddress;\\n    }\\n\\n    function _transferAquaToFactory() private {\\n        address usersWallet = msg.sender;\\n        bool freeOrdersNFT = false;\\n\\n        if (address(NFTAddress) != address(0)) {\\n            if (INFT(NFTAddress).balanceOf(usersWallet) > 0) {\\n                freeOrdersNFT = true;\\n            }\\n        }\\n\\n        if (freeOrdersNFT) {\\n            return;\\n        } else {\\n            IERC20 token = IERC20(AQUA_ADDRESS);\\n            require(token.balanceOf(usersWallet) >= EntryFee, \\\"Insufficient token (AQUA_ADDRESS) balance\\\");\\n            token.safeTransferFrom(usersWallet, address(this), EntryFee); // SEND TO FACTORY\\n        }\\n    }\\n\\n    function _transferQuoteToStorage(address _tokenXYZ, uint256 _amount, address _storageContractAddress) private {\\n        address usersWallet = msg.sender;\\n        IERC20 token = IERC20(_tokenXYZ);\\n        require(token.balanceOf(usersWallet) >= _amount, \\\"Insufficient token balance\\\");\\n        token.safeTransferFrom(usersWallet, _storageContractAddress, _amount);\\n    }\\n\\n    function _transferBaseToStorage(address _tokenXYZ, uint256 _amount, address _storageContractAddress) private {\\n        address usersWallet = msg.sender;\\n        IERC20 token = IERC20(_tokenXYZ);\\n        require(token.balanceOf(usersWallet) >= _amount, \\\"Insufficient token balance\\\");\\n        token.safeTransferFrom(usersWallet, _storageContractAddress, _amount);\\n    }\\n\\n    function _transferTokenToStorage(address _tokenXYZ, uint256 _amount, address _storageContractAddress) private {\\n        address usersWallet = msg.sender;\\n        IERC20 token = IERC20(_tokenXYZ);\\n        require(token.balanceOf(usersWallet) >= _amount, \\\"Insufficient token balance\\\");\\n        token.safeTransferFrom(usersWallet, _storageContractAddress, _amount);\\n    }\\n\\n    function _deployDCAStorage(address _router, address _tokenQuote, address _tokenBase) private returns (address) {\\n        require(_tokenQuote != address(0), \\\"AquasDCA: DCAStorage: tokenQuote cannot be 0 address\\\");\\n        require(_tokenBase != address(0), \\\"AquasDCA: DCAStorage: tokenBase cannot be 0 address\\\");\\n        require(_router != address(0), \\\"AquasDCA: DCAStorage: router cannot be 0 address\\\");\\n        StorageID++;\\n        allStorages[StorageID] = new DCAStorage(\\n            StorageID,\\n            address(this),\\n            _router,\\n            _tokenQuote,\\n            _tokenBase,\\n            AQUA_ADDRESS\\n        );\\n        emit DCAStorageCreated(StorageID, address(allStorages[StorageID]), _router, _tokenQuote, _tokenBase);\\n        return address(allStorages[StorageID]);\\n    }\\n\\n    function _findContractAddress(address _router, address _tokenQuote, address _tokenBase) private returns (address) {\\n        require(_tokenQuote != address(0), \\\"AquasDCA: _findContractAddress: incorrect token\\\");\\n        require(_tokenBase != address(0), \\\"AquasDCA: _findContractAddress: incorrect token\\\");\\n        require(_router != address(0), \\\"AquasDCA: _findContractAddress: incorrect router\\\");\\n        address check = GetStorageAddressUsingToken(_router, _tokenQuote, _tokenBase);\\n        return check;\\n    }\\n}\\n\",\"keccak256\":\"0x2ede059a5b3d0dce0f94c22fbbbcd55bab4497135b726342de58956173f747cb\",\"license\":\"MIT\"},\"contracts/dca/DCAMultiStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../amm/interfaces/IUniswapV2Router02.sol\\\";\\n\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\n/*\\n - removed tokenXYZ and replaced with tokenQuote\\n - change USDC_ADDRESS to TokenBase\\n*/\\ncontract DCAStorage is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    uint256 constant MAX_UINT256 = 2 ** 256 - 1;\\n\\n    uint256 public storageID;\\n    address public UNISWAP_V2_ROUTER;\\n    address public TokenQuote; // Quote Token\\n    address public TokenBase;\\n    address public AQUA_ADDRESS; // Aqua Token\\n    address public FactoryAddress; //assign the relayer\\n    uint256 public LastPoolPrice;\\n\\n    uint256 public OrdersLength; // +/- as orders are entered and filled(-)\\n    uint256 public OrdersFilled; // when orders are filled value is incremented\\n    uint256 public OrdersTotal; // when orders are added, value is incremented: does not -- (total Orders placed)\\n\\n    address[] private pathBuy;\\n    address[] private pathSell;\\n\\n    event NewDCAStrategy(\\n        uint256 index,\\n        uint256 storageID,\\n        address trader,\\n        uint256 interval,\\n        uint256 duration,\\n        uint256 tokenPriceMin,\\n        uint256 tokenPriceMax,\\n        uint256 tokenAmount,\\n        bool buyOrder\\n    );\\n    event DeleteDCAStrategy(uint256 index, uint256 storageID);\\n    event AlterDCAStrategy(\\n        uint256 index,\\n        uint256 storageID,\\n        address trader,\\n        uint256 interval,\\n        uint256 tokenPriceMin,\\n        uint256 tokenPriceMax,\\n        uint256 tokenAmount,\\n        bool buyOrder,\\n        uint256 lastSwapCount,\\n        uint256 lastSwapTime,\\n        uint256 totalSwapSum\\n    );\\n\\n    // The DCA strategy inputs\\n    struct OrderDetails {\\n        // unique identifier\\n        uint256 index;\\n        // trader that owns the order\\n        address trader;\\n        // amount in seconds between swaps\\n        uint256 interval;\\n        // Minimum price within range: in 18-decimal units(wei)\\n        uint256 tokenPriceMin;\\n        // Minimum price within range: in 18-decimal units(wei)\\n        uint256 tokenPriceMax;\\n        // amount in wei\\n        uint256 tokenAmount;\\n        //buy/sell: buying below current price vs selling above current price\\n        bool buyOrder;\\n        // swap index for tracking\\n        uint256 lastSwapCount;\\n        //last swap time for tracking\\n        uint256 lastSwapTime;\\n        //total number of swaps to be executed over the duration period\\n        uint256 totalSwapSum;\\n    }\\n\\n    OrderDetails[] public OrderList; // array for easy order handling\\n\\n    constructor(\\n        uint256 _storageID,\\n        address _relayer,\\n        address _router,\\n        address _tokenQuote, // fixed bug here\\n        address _tokenBase,\\n        address _tokenAQUA\\n    ) public {\\n        storageID = _storageID;\\n        FactoryAddress = _relayer;\\n        UNISWAP_V2_ROUTER = _router;\\n        TokenBase = _tokenBase;\\n        TokenQuote = _tokenQuote;\\n        AQUA_ADDRESS = _tokenAQUA;\\n\\n        // sell route\\n        pathSell = new address[](2);\\n        pathSell[0] = TokenQuote;\\n        pathSell[1] = TokenBase;\\n\\n        // buy route\\n        pathBuy = new address[](2);\\n        pathBuy[0] = TokenBase;\\n        pathBuy[1] = TokenQuote;\\n    }\\n\\n    function SubmitDCAOrderFromFactory(\\n        uint256 index,\\n        uint256 _intervalSeconds,\\n        uint256 _durationHours,\\n        uint256 _tokenPriceMin,\\n        uint256 _tokenPriceMax,\\n        uint256 _tokenAmount,\\n        bool _buyOrder\\n    ) public {\\n        require(msg.sender == FactoryAddress, \\\"Only from FactoryAddress\\\");\\n        require(_intervalSeconds >= 1, \\\"Incorrect Swap Interval\\\");\\n        require(_durationHours >= 1, \\\"Incorrect Duration Interval\\\");\\n        require(_tokenPriceMin >= 1, \\\"Incorrect Token Minimum Price\\\");\\n        require(_tokenPriceMax > _tokenPriceMin, \\\"Incorrect Token Maximum Price\\\");\\n        require(_tokenAmount >= 1, \\\"Insufficient Token Input Amount\\\");\\n        require((_buyOrder == true || _buyOrder == false), \\\"Incorrect Order Type\\\");\\n        require(OrdersTotal < MAX_UINT256, \\\"Maximum Orders Reached\\\");\\n\\n        uint256 duration = _durationHours.mul(3600); // Hours times 60 minutes times 60 seconds (1hour = 3600)\\n        uint256 swaps = duration.div(_intervalSeconds); // total number of swaps\\n\\n        require(swaps >= 1, \\\"Incorrect Total Swap Result\\\");\\n\\n        // Create the Order details\\n        OrderDetails memory order;\\n        order.index = index;\\n        order.trader = tx.origin;\\n        order.interval = _intervalSeconds;\\n        order.tokenPriceMin = _tokenPriceMin;\\n        order.tokenPriceMax = _tokenPriceMax;\\n        order.tokenAmount = _tokenAmount;\\n        order.buyOrder = _buyOrder;\\n        order.lastSwapTime = 0;\\n        order.lastSwapCount = 1; // First swap is indexed as 1\\n        order.totalSwapSum = swaps;\\n        // Register the Order details\\n        OrderList.push(order);\\n\\n        emit NewDCAStrategy(\\n            index,\\n            storageID,\\n            tx.origin,\\n            _intervalSeconds,\\n            _durationHours,\\n            _tokenPriceMin,\\n            _tokenPriceMax,\\n            _tokenAmount,\\n            _buyOrder\\n        );\\n\\n        OrdersTotal++; // always increments\\n        OrdersLength++;\\n    }\\n\\n    // Delete one order and send any user funds back\\n    function DeleteOrderFromFacotry(uint256 _index) public {\\n        _deleteOrder(_index, false);\\n    }\\n\\n    function ExecuteOrders(bool _buyOrder) public {\\n        uint256 ordersFilled;\\n        uint256 length = OrderList.length;\\n        // require(length >= 1, \\\"Insufficient order list length\\\");\\n\\n        uint256 price;\\n\\n        uint256 minOut = 0;\\n        uint256[] memory filledOrders = new uint256[](length);\\n\\n        // create an arry with the same number of elements\\n        // as orders are filled, add their index into this array\\n        // then delete those orders\\n        for (uint256 i = 0; i < length; i++) {\\n            filledOrders[i] = MAX_UINT256;\\n        }\\n\\n        // Execute the swaps\\n        for (uint256 i = 0; i < length; i++) {\\n            uint256 swapAmount = OrderList[i].tokenAmount.div(OrderList[i].totalSwapSum);\\n            uint256 diff = block.timestamp.sub(OrderList[i].interval);\\n            if (OrderList[i].lastSwapCount <= OrderList[i].totalSwapSum) {\\n                // get price for each swap\\n                price = _getAndUpdatePoolPrice(TokenQuote, TokenBase);\\n                // price within range limits\\n                if (OrderList[i].tokenPriceMin < price && OrderList[i].tokenPriceMax > price) {\\n                    // swapping TokenBase to XYZ\\n                    if (OrderList[i].buyOrder == true && _buyOrder == true) {\\n                        //skip orders that can't fill the minimum requirement\\n                        minOut = _checkAmountOut(swapAmount, true);\\n                        if (OrderList[i].lastSwapTime < diff && swapAmount >= 1 && minOut >= 1) {\\n                            //buy / swap\\n\\n                            _swap(TokenBase, TokenQuote, swapAmount, minOut, OrderList[i].trader);\\n\\n                            OrderList[i].lastSwapTime = block.timestamp;\\n                            OrderList[i].lastSwapCount++; // swap index increments\\n                            ordersFilled++;\\n                            if (OrderList[i].lastSwapCount > OrderList[i].totalSwapSum) {\\n                                // aqua fix bug in not deleting the order when swaps are over\\n                                filledOrders[i] = OrderList[i].index;\\n                            }\\n                            _emitOrderEvent(OrderList[i]);\\n                        }\\n                    } else if (OrderList[i].buyOrder == false && _buyOrder == false) {\\n                        //skip orders that can't fill the minimum requirement\\n                        minOut = _checkAmountOut(swapAmount, false);\\n                        if (OrderList[i].lastSwapTime < diff && swapAmount >= 1 && minOut >= 1) {\\n                            _swap(TokenQuote, TokenBase, swapAmount, minOut, OrderList[i].trader);\\n\\n                            OrderList[i].lastSwapTime = block.timestamp;\\n                            OrderList[i].lastSwapCount++; // swap index increments\\n                            ordersFilled++;\\n                            if (OrderList[i].lastSwapCount > OrderList[i].totalSwapSum) {\\n                                // aqua fix bug in not deleting the order when swaps are over\\n                                filledOrders[i] = OrderList[i].index;\\n                            }\\n                            _emitOrderEvent(OrderList[i]);\\n                        }\\n                    }\\n                }\\n            } else {\\n                // this order shouldn't exist. all to filledOrders[] to delete\\n                filledOrders[i] = OrderList[i].index;\\n            }\\n        }\\n\\n        // IDEA 1 : just delete 1 order per loop\\n        for (uint256 i = 0; i < length; i++) {\\n            uint256 orderTicket = filledOrders[i];\\n\\n            if (orderTicket != MAX_UINT256) {\\n                _deleteOrder(orderTicket, true); // update state variable\\n\\n                break;\\n            }\\n        }\\n\\n        OrdersFilled = OrdersFilled.add(ordersFilled); // update state variable\\n    }\\n\\n    function GetMyOrderDetails(address _trader) public view returns (uint256[] memory, uint256, uint256) {\\n        uint256 length = OrderList.length;\\n        require(length >= 1, \\\"Insufficient order list length\\\");\\n        uint256 buy;\\n        uint256 sell;\\n\\n        uint256[] memory arr = new uint256[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            if (OrderList[i].trader == _trader) {\\n                arr[i] = OrderList[i].index;\\n                if (OrderList[i].buyOrder == true) {\\n                    buy++;\\n                }\\n                if (OrderList[i].buyOrder == false) {\\n                    sell++;\\n                }\\n            }\\n        }\\n\\n        return (arr, buy, sell);\\n    }\\n\\n    function GetOrderDetails(\\n        uint256 _index\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 index,\\n            address trader,\\n            uint256 interval,\\n            uint256 tokenPriceMin,\\n            uint256 tokenPriceMax,\\n            uint256 tokenAmount,\\n            bool buyOrder,\\n            uint256 lastSwapCount,\\n            uint256 lastSwapTime,\\n            uint256 totalSwapSum\\n        )\\n    {\\n        for (uint256 i = 0; i < OrderList.length; i++) {\\n            if (OrderList[i].index == _index) {\\n                index = OrderList[i].index;\\n                trader = OrderList[i].trader;\\n                interval = OrderList[i].interval;\\n                tokenPriceMin = OrderList[i].tokenPriceMin;\\n                tokenPriceMax = OrderList[i].tokenPriceMax;\\n                tokenAmount = OrderList[i].tokenAmount;\\n                buyOrder = OrderList[i].buyOrder;\\n                lastSwapCount = OrderList[i].lastSwapCount;\\n                lastSwapTime = OrderList[i].lastSwapTime;\\n                totalSwapSum = OrderList[i].totalSwapSum;\\n            }\\n        }\\n    }\\n\\n    // this only works on Stable Based Pools , token xyz is token In, and the token out amount becomes the pool price.\\n    // not ideal for any base asset pairing\\n    function decimals(address _token) public view virtual returns (uint8) {\\n        return IERC20Metadata(address(_token)).decimals();\\n    }\\n\\n    function _getAndUpdatePoolPrice(address _tokenQuote, address _tokenBase) internal returns (uint256) {\\n        uint256 min = 1000;\\n        uint256 _amountIn = 1e18;\\n        uint8 decimalQuote = decimals(_tokenQuote);\\n        uint8 one = 1;\\n        uint8 ten = 10;\\n        require(decimalQuote > 0, \\\"AquasFeed: Missing TokenQuote Decimals\\\");\\n\\n        // todo bug\\n        if (decimalQuote != 18) {\\n            //   _amountIn = uint256(one * ten ** decimalQuote);// didn't work\\n            _amountIn = uint256(one) * uint256(ten) ** uint256(decimalQuote); // test\\n            //  _amountIn << one * ten ** decimalQuote;// test next\\n        }\\n        require(_amountIn >= min, \\\"AquasFeed: Missing TokenQuote Input Amounts\\\");\\n\\n        // sell route : Selling 1 QUOTE asset and see how much asset Base is returned\\n        pathSell = new address[](2);\\n        pathSell[0] = _tokenQuote;\\n        pathSell[1] = _tokenBase;\\n\\n        // idea\\n        // amountIN is reduced 1000x and the output is increased 1000x (better price precision for btc and eth)\\n        uint256 reduceInputAmount = _amountIn.div(min);\\n\\n        if (reduceInputAmount > 0) {\\n            uint256[] memory amountOutMins = IUniswapV2Router02(UNISWAP_V2_ROUTER).getAmountsOut(\\n                reduceInputAmount,\\n                pathSell,\\n                997\\n            );\\n            uint256 output = amountOutMins[pathSell.length - 1];\\n            output = output.mul(min);\\n            LastPoolPrice = output;\\n            return output;\\n        }\\n    }\\n\\n    function _checkAmountOut(uint256 _amountIn, bool _buyOrder) internal returns (uint256) {\\n        // path depends on buying or selling ,\\n        uint256 output;\\n        if (_buyOrder) {\\n            uint256[] memory amountOutMins = IUniswapV2Router02(UNISWAP_V2_ROUTER).getAmountsOut(\\n                _amountIn,\\n                pathBuy,\\n                997\\n            );\\n            output = amountOutMins[pathBuy.length - 1];\\n        } else {\\n            uint256[] memory amountOutMins = IUniswapV2Router02(UNISWAP_V2_ROUTER).getAmountsOut(\\n                _amountIn,\\n                pathSell,\\n                997\\n            );\\n            output = amountOutMins[pathSell.length - 1];\\n        }\\n\\n        return output;\\n    }\\n\\n    function _deleteOrder(uint256 _index, bool _executing) private {\\n        bool orderFound = false;\\n        uint256 length = OrderList.length;\\n        uint256 deleteThisIndex = 0;\\n        uint256 ordersDecrement = 0;\\n        require(length >= 1, \\\"Incorrect Order Index given\\\");\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            if (_executing) {\\n                if (OrderList[i].index == _index) {\\n                    uint256 swapAmount = OrderList[i].tokenAmount.div(OrderList[i].totalSwapSum);\\n                    uint256 swapped = swapAmount.mul(OrderList[i].lastSwapCount - 1);\\n                    uint256 tokenAmountDust = OrderList[i].tokenAmount.sub(swapped);\\n                    // return dust\\n                    if (OrderList[i].buyOrder == true) {\\n                        _transferBaseToUser(OrderList[i].trader, tokenAmountDust);\\n                    } else {\\n                        _transferQuoteToUser(OrderList[i].trader, tokenAmountDust);\\n                    }\\n\\n                    orderFound = true;\\n                    deleteThisIndex = i;\\n\\n                    if (orderFound) {\\n                        break;\\n                    } else {\\n                        continue;\\n                    }\\n                }\\n            } else {\\n                if (OrderList[i].trader == tx.origin) {\\n                    if (OrderList[i].index == _index) {\\n                        uint256 swapAmount = OrderList[i].tokenAmount.div(OrderList[i].totalSwapSum);\\n                        uint256 swapped = swapAmount.mul(OrderList[i].lastSwapCount - 1);\\n                        uint256 tokenAmountDust = OrderList[i].tokenAmount.sub(swapped);\\n                        // return dust\\n                        if (OrderList[i].buyOrder == true) {\\n                            _transferBaseToUser(OrderList[i].trader, tokenAmountDust);\\n                        } else {\\n                            _transferQuoteToUser(OrderList[i].trader, tokenAmountDust);\\n                        }\\n\\n                        orderFound = true;\\n                        deleteThisIndex = i;\\n\\n                        if (orderFound) {\\n                            break;\\n                        } else {\\n                            continue;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        if (orderFound) {\\n            // more than 1 order exists\\n            if (length != 1) {\\n                for (uint256 i = deleteThisIndex; i < length - 1; i++) {\\n                    // <=\\n                    OrderList[i] = OrderList[i + 1];\\n                }\\n                emit DeleteDCAStrategy(OrderList[length - 1].index, storageID);\\n                OrderList.pop();\\n                ordersDecrement++; // becomes 1\\n            } else {\\n                ordersDecrement++;\\n                _resetArray();\\n            }\\n        }\\n\\n        OrdersLength = OrdersLength.sub(ordersDecrement);\\n    }\\n\\n    // sends TokenBase token to User\\n    function _transferBaseToUser(address _recipient, uint256 _amount) private {\\n        IERC20 token = IERC20(TokenBase);\\n        require(token.balanceOf(address(this)) >= _amount, \\\"Insufficient OrderBookStorage tokenbase balance\\\");\\n        token.safeTransfer(_recipient, _amount);\\n    }\\n\\n    // sends XYZ token to User\\n    function _transferQuoteToUser(address _recipient, uint256 _amount) private {\\n        IERC20 token = IERC20(TokenQuote);\\n        require(token.balanceOf(address(this)) >= _amount, \\\"Insufficient OrderBookStorage tokenquote balance\\\");\\n        token.safeTransfer(_recipient, _amount);\\n    }\\n\\n    function _emitOrderEvent(OrderDetails memory order) private {\\n        emit AlterDCAStrategy(\\n            order.index,\\n            storageID,\\n            order.trader,\\n            order.interval,\\n            order.tokenPriceMin,\\n            order.tokenPriceMax,\\n            order.tokenAmount,\\n            order.buyOrder,\\n            order.lastSwapCount,\\n            order.lastSwapTime,\\n            order.totalSwapSum\\n        );\\n    }\\n\\n    function _swap(address _tokenIn, address _tokenOut, uint256 _amountIn, uint256 _amountOutMin, address _to) private {\\n        require(_amountIn >= 1, \\\"Swap: Insufficient Token In Amount\\\");\\n        require(_amountOutMin >= 1, \\\"Swap:Insufficient Token Out Minimum\\\");\\n        require(_tokenIn != address(0), \\\"Swap: tokenIn cannot be the zero address.\\\");\\n        require(_tokenOut != address(0), \\\"Swap: tokenOut cannot be the zero address.\\\");\\n        require(_to != address(0), \\\"Swap: _to cannot be the zero address.\\\");\\n\\n        IERC20(_tokenIn).approve(UNISWAP_V2_ROUTER, _amountIn);\\n\\n        address[] memory path;\\n\\n        path = new address[](2);\\n        path[0] = _tokenIn;\\n        path[1] = _tokenOut;\\n\\n        IUniswapV2Router02(UNISWAP_V2_ROUTER).swapExactTokensForTokens(\\n            _amountIn,\\n            _amountOutMin,\\n            path,\\n            _to,\\n            block.timestamp\\n        );\\n\\n        // need to return a value, if successful or not and tokenOut Amount\\n    }\\n\\n    function _resetArray() private {\\n        require(OrderList.length == 1, \\\"OrderList does not equal one\\\");\\n        // Reset the OrderList\\n        delete OrderList;\\n        // OrdersLength = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x93558b7bf82e326efd7f29cba5073b175f4c844193a426cf6ee7a012ae66c22f\",\"license\":\"MIT\"},\"contracts/interfaces/INFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\ninterface INFT is IERC721Upgradeable {\\n    event MinterSet(address indexed minter, bool allowance);\\n\\n    event DescriptionSet(string newDescription);\\n\\n    event VisualAppearanceSet(string newVisualAppearance);\\n\\n    function nftIds() external view returns (uint256);\\n\\n    function minters(address minter) external view returns (bool);\\n\\n    function description() external view returns (string memory);\\n\\n    function visualAppearance() external view returns (string memory);\\n\\n    function mint(address to) external;\\n\\n    function setMinter(address minter, bool allowance) external;\\n\\n    function setDescription(string memory _description) external;\\n\\n    function setVisualAppearance(string memory _visualAppearance) external;\\n}\\n\",\"keccak256\":\"0x67b15e745bfe60a4b61b4eb72e9f0d19bbcecfdeaf777368c282c0fd2ded6b3b\",\"license\":\"MIT\"},\"contracts/interfaces/INFTAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface INFTAdmin {\\n    event MinterSet(address indexed minter, bool allowance);\\n\\n    event GoldSwapNFTSet(address indexed goldSwapNFT);\\n    event SilverSwapNFTSet(address indexed silverSwapNFT);\\n    event BronzeSwapNFTSet(address indexed bronzeSwapNFT);\\n    event ProfileNFTset(address indexed profileNFT);\\n\\n    function profileNFT() external view returns (address);\\n\\n    function goldSwapNFT() external view returns (address);\\n\\n    function silverSwapNFT() external view returns (address);\\n\\n    function bronzeSwapNFT() external view returns (address);\\n\\n    function minters(address minter) external view returns (bool);\\n\\n    function calculateAmmSwapFeeDeduction(address user) external view returns (uint256 feeMultiplier);\\n\\n    function mintProfileNFT(address user) external;\\n\\n    function setProfileNFT(address newProfileNFT) external;\\n\\n    function setGoldSwapNFT(address newSwapNFT) external;\\n\\n    function setSilverSwapNFT(address newSwapNFT) external;\\n\\n    function setBronzeSwapNFT(address newSwapNFT) external;\\n\\n    function setMinter(address minter, bool allowance) external;\\n}\\n\",\"keccak256\":\"0x89f633fa939f9edfa265b6fcaa46faebe8659329b049de6ede716b8df4445e21\",\"license\":\"MIT\"},\"contracts/token_mappings/AQUA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title Aqua Token\\n * @notice This version of the Aqua token is to be used on the SChain\\n * It features access control needed for the IMA TokenManager contract (bridging)\\n */\\ncontract AQUA is ERC20Capped, AccessControl {\\n    /// @notice Access control roles for the IMA TokenManager\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    /// @notice Total number of tokens\\n    uint256 public constant MAX_SUPPLY = 200_000_000e18; // 200 million\\n\\n    /// @notice The total amount of burned tokens\\n    uint256 public burnedAmount;\\n\\n    constructor() public ERC20(\\\"Aquas.Trade\\\", \\\"AQUA\\\") ERC20Capped(MAX_SUPPLY) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        grantRole(MINTER_ROLE, msg.sender);\\n        _mint(msg.sender, MAX_SUPPLY);\\n    }\\n\\n    /// @notice Creates `amount` token to `to`. Must only be called by the IMA TokenManager contract\\n    function mint(address to, uint256 amount) public {\\n        require(hasRole(MINTER_ROLE, msg.sender), \\\"AQUA::mint: Caller is not a minter\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /// @notice Destroys `amount` of AQUA tokens from the msg.sender.\\n    /// Must only be called by the IMA TokenManager contract\\n    function burn(uint256 amount) public virtual {\\n        require(hasRole(BURNER_ROLE, msg.sender), \\\"AQUA::burn: Caller is not a burner\\\");\\n        _burn(msg.sender, amount);\\n        burnedAmount += amount;\\n    }\\n}\\n\",\"keccak256\":\"0xd3bc25bf41ac9739d36b50112fef6c5c756d46b3a0d6b7e649a2ce6def9d5add\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620002385760003560e01c80637c17ad9d1162000135578063a0bdd72011620000bd578063d568cdec1162000087578063d568cdec14620006b9578063e2e78dfb14620006ef578063ec606041146200070f578063f2fde38b1462000745578063f4ba692614620007655762000238565b8063a0bdd7201462000621578063a32564a31462000641578063bc83d2d71462000677578063c839117314620006835762000238565b80638f37854f11620000ff5780638f37854f146200057357806393254b0e14620005a957806395003b0a14620005cb5780639665d9d414620006015762000238565b80637c17ad9d14620004d95780638230022d146200050f578063842c7cc8146200052f5780638da5cb5b14620005515762000238565b806330a7e0a111620001c55780634ccb8056116200018f5780634ccb8056146200043357806359fe8c841462000453578063715018a614620004755780637395de5214620004815780637996634514620004b75762000238565b806330a7e0a11462000383578063310c87cc14620003b957806345e8c81414620003db5780634677dd1a14620003fd5762000238565b8063224ecfea1162000207578063224ecfea14620002e9578063264949d8146200031f57806326749a9e14620003415780632986c0e514620003615762000238565b80630b102d1a146200023d5780630b40097c146200025d5780630d66bc94146200027d5780631814aada14620002b3575b600080fd5b6200025b600480360381019062000255919062003226565b6200079b565b005b6200027b6004803603810190620002759190620035fd565b620008d5565b005b6200029b60048036038101906200029591906200327e565b62000998565b604051620002aa9190620041c7565b60405180910390f35b620002d16004803603810190620002cb919062003474565b62000e15565b604051620002e0919062004262565b60405180910390f35b62000307600480360381019062000301919062003474565b62000e48565b604051620003169190620045f1565b60405180910390f35b6200032962000f22565b604051620003389190620041c7565b60405180910390f35b6200035f60048036038101906200035991906200341c565b62000f48565b005b6200036b62000fe8565b6040516200037a9190620045f1565b60405180910390f35b620003a160048036038101906200039b91906200363e565b62000fee565b604051620003b09190620045d3565b60405180910390f35b620003c36200116d565b604051620003d29190620041c7565b60405180910390f35b620003e562001193565b604051620003f49190620041c7565b60405180910390f35b6200041b600480360381019062000415919062003226565b620011b9565b6040516200042a9190620045f1565b60405180910390f35b6200045160048036038101906200044b91906200363e565b620012a7565b005b6200045d6200136a565b6040516200046c9190620045f1565b60405180910390f35b6200047f62001370565b005b6200049f600480360381019062000499919062003474565b620014b1565b604051620004ae9190620041c7565b60405180910390f35b620004c16200158b565b604051620004d0919062004245565b60405180910390f35b620004f76004803603810190620004f19190620034cc565b6200159e565b60405162000506919062004221565b60405180910390f35b6200052d600480360381019062000527919062003474565b62001735565b005b62000539620017c2565b604051620005489190620045f1565b60405180910390f35b6200055b620017c8565b6040516200056a9190620041c7565b60405180910390f35b6200059160048036038101906200058b919062003474565b620017f1565b604051620005a09190620045f1565b60405180910390f35b620005b362001a37565b604051620005c29190620045f1565b60405180910390f35b620005e96004803603810190620005e3919062003474565b62001a3d565b604051620005f89190620045f1565b60405180910390f35b6200061f600480360381019062000619919062003474565b62001b17565b005b6200063f6004803603810190620006399190620032d4565b62001ba4565b005b6200065f600480360381019062000659919062003474565b62001d61565b6040516200066e9190620041c7565b60405180910390f35b6200068162001e3b565b005b620006a160048036038101906200069b919062003474565b62001f84565b604051620006b09190620045f1565b60405180910390f35b620006d76004803603810190620006d1919062003474565b6200205e565b604051620006e69190620041c7565b60405180910390f35b6200070d600480360381019062000707919062003226565b62002129565b005b6200072d600480360381019062000727919062003474565b620021f0565b6040516200073c9190620041c7565b60405180910390f35b6200076360048036038101906200075d919062003226565b620022ca565b005b6200078360048036038101906200077d919062003474565b6200247d565b604051620007929190620045f1565b60405180910390f35b620007a562002557565b73ffffffffffffffffffffffffffffffffffffffff16620007c5620017c8565b73ffffffffffffffffffffffffffffffffffffffff16146200081e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000815906200447f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000891576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008889062004391565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082116200091b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200091290620044e5565b60405180910390fd5b62000926826200205e565b73ffffffffffffffffffffffffffffffffffffffff16638a2b9e78826040518263ffffffff1660e01b815260040162000960919062004245565b600060405180830381600087803b1580156200097b57600080fd5b505af115801562000990573d6000803e3d6000fd5b505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562000a0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a0390620045b1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000a7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a7690620045b1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141562000af2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ae9906200458f565b60405180910390fd5b6000600190505b600554811162000dfd57600062000b10826200205e565b905060008173ffffffffffffffffffffffffffffffffffffffff1663f1e0b56f6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000b5b57600080fd5b505afa15801562000b70573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b96919062003252565b905060008273ffffffffffffffffffffffffffffffffffffffff1663c949ba9b6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000be157600080fd5b505afa15801562000bf6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c1c919062003252565b905060008373ffffffffffffffffffffffffffffffffffffffff1663a82ed9ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000c6757600080fd5b505afa15801562000c7c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ca2919062003252565b90508273ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614801562000d0b57508173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16145b801562000d4357508073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16145b1562000deb5760008473ffffffffffffffffffffffffffffffffffffffff166375c653bc6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000d9257600080fd5b505afa15801562000da7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dcd9190620034a0565b905060045481101562000de95784965050505050505062000e0e565b505b50505050808060010191505062000af9565b5062000e0b8484846200255f565b90505b9392505050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080821162000e8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e8690620044e5565b60405180910390fd5b62000e9a826200205e565b73ffffffffffffffffffffffffffffffffffffffff1663ec4ca0f86040518163ffffffff1660e01b815260040160206040518083038186803b15801562000ee057600080fd5b505afa15801562000ef5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f1b9190620034a0565b9050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b62000f5262002557565b73ffffffffffffffffffffffffffffffffffffffff1662000f72620017c8565b73ffffffffffffffffffffffffffffffffffffffff161462000fcb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000fc2906200447f565b60405180910390fd5b80600160146101000a81548160ff02191690831515021790555050565b60085481565b62000ff862003096565b600080600080600080600080600080620010128d6200205e565b73ffffffffffffffffffffffffffffffffffffffff1663ffc5ea0d8d6040518263ffffffff1660e01b81526004016200104c9190620045f1565b6101406040518083038186803b1580156200106657600080fd5b505afa1580156200107b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010a191906200350d565b9950995099509950995099509950995099509950620010bf62003096565b8a81600001818152505089816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050888160400181815250508781606001818152505086816080018181525050858160a0018181525050848160c00190151590811515815250508281610100018181525050838160e00181815250508181610120018181525050809b50505050505050505050505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200122d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200122490620042a3565b60405180910390fd5b6000600190505b60055481116200129c5760006200124b826200205e565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200128d578192505050620012a2565b50808060010191505062001234565b50600090505b919050565b60008211620012ed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620012e49062004309565b60405180910390fd5b620012f8826200205e565b73ffffffffffffffffffffffffffffffffffffffff1663dad675ba826040518263ffffffff1660e01b8152600401620013329190620045f1565b600060405180830381600087803b1580156200134d57600080fd5b505af115801562001362573d6000803e3d6000fd5b505050505050565b60035481565b6200137a62002557565b73ffffffffffffffffffffffffffffffffffffffff166200139a620017c8565b73ffffffffffffffffffffffffffffffffffffffff1614620013f3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620013ea906200447f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000808211620014f8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620014ef90620044e5565b60405180910390fd5b62001503826200205e565b73ffffffffffffffffffffffffffffffffffffffff1663c949ba9b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200154957600080fd5b505afa1580156200155e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001584919062003252565b9050919050565b600160149054906101000a900460ff1681565b606060008311620015e6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620015dd90620044c3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562001659576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200165090620044a1565b60405180910390fd5b600062001666846200205e565b905060606000808373ffffffffffffffffffffffffffffffffffffffff166384d09e27876040518263ffffffff1660e01b8152600401620016a89190620041c7565b60006040518083038186803b158015620016c157600080fd5b505afa158015620016d6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190620017019190620033ad565b9250925092506000821180620017175750600081115b156200172a57829450505050506200172f565b505050505b92915050565b6200173f62002557565b73ffffffffffffffffffffffffffffffffffffffff166200175f620017c8565b73ffffffffffffffffffffffffffffffffffffffff1614620017b8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620017af906200447f565b60405180910390fd5b8060038190555050565b60055481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080821162001838576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200182f90620044e5565b60405180910390fd5b600080808490505b600554811162001a2a57600062001857826200205e565b905060008173ffffffffffffffffffffffffffffffffffffffff166375c653bc6040518163ffffffff1660e01b815260040160206040518083038186803b158015620018a257600080fd5b505afa158015620018b7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018dd9190620034a0565b9050620018f481856200283c90919063ffffffff16565b93506004546200190e85876200283c90919063ffffffff16565b11156200192357829550505050505062001a32565b8173ffffffffffffffffffffffffffffffffffffffff16638a2b9e7860016040518263ffffffff1660e01b81526004016200195f919062004245565b600060405180830381600087803b1580156200197a57600080fd5b505af11580156200198f573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16638a2b9e7860006040518263ffffffff1660e01b8152600401620019cf919062004245565b600060405180830381600087803b158015620019ea57600080fd5b505af1158015620019ff573d6000803e3d6000fd5b5050505062001a1884866200283c90919063ffffffff16565b94505050808060010191505062001840565b506001925050505b919050565b60045481565b600080821162001a84576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001a7b90620044e5565b60405180910390fd5b62001a8f826200205e565b73ffffffffffffffffffffffffffffffffffffffff16638b474f8d6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001ad557600080fd5b505afa15801562001aea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b109190620034a0565b9050919050565b62001b2162002557565b73ffffffffffffffffffffffffffffffffffffffff1662001b41620017c8565b73ffffffffffffffffffffffffffffffffffffffff161462001b9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001b91906200447f565b60405180910390fd5b8060048190555050565b60011515600160149054906101000a900460ff1615151462001bfd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001bf4906200454b565b60405180910390fd5b600062001c0c8a8a8a62002894565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562001c81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001c78906200443b565b60405180910390fd5b600062001c8d62002a0a565b821562001cab5762001ca189858462002c6a565b6001905062001cbd565b62001cb88a858462002c6a565b600190505b801562001d54578173ffffffffffffffffffffffffffffffffffffffff166335245c036008548a8a8a8a8a8a6040518863ffffffff1660e01b815260040162001d0d9796959493929190620046d8565b600060405180830381600087803b15801562001d2857600080fd5b505af115801562001d3d573d6000803e3d6000fd5b505050506008600081548092919060010191905055505b5050505050505050505050565b600080821162001da8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001d9f90620044e5565b60405180910390fd5b62001db3826200205e565b73ffffffffffffffffffffffffffffffffffffffff1663a82ed9ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001df957600080fd5b505afa15801562001e0e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e34919062003252565b9050919050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040162001e9a9190620041c7565b60206040518083038186803b15801562001eb357600080fd5b505afa15801562001ec8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001eee9190620034a0565b9050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68826040518263ffffffff1660e01b815260040162001f4d9190620045f1565b600060405180830381600087803b15801562001f6857600080fd5b505af115801562001f7d573d6000803e3d6000fd5b5050505050565b600080821162001fcb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001fc290620044e5565b60405180910390fd5b62001fd6826200205e565b73ffffffffffffffffffffffffffffffffffffffff1663dc7782a36040518163ffffffff1660e01b815260040160206040518083038186803b1580156200201c57600080fd5b505afa15801562002031573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620020579190620034a0565b9050919050565b6000600554821115620020a8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200209f90620043f7565b60405180910390fd5b60008211620020ee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620020e590620043f7565b60405180910390fd5b6006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6200213362002557565b73ffffffffffffffffffffffffffffffffffffffff1662002153620017c8565b73ffffffffffffffffffffffffffffffffffffffff1614620021ac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620021a3906200447f565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080821162002237576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200222e90620044e5565b60405180910390fd5b62002242826200205e565b73ffffffffffffffffffffffffffffffffffffffff1663f1e0b56f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200228857600080fd5b505afa1580156200229d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022c3919062003252565b9050919050565b620022d462002557565b73ffffffffffffffffffffffffffffffffffffffff16620022f4620017c8565b73ffffffffffffffffffffffffffffffffffffffff16146200234d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162002344906200447f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620023c0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620023b7906200434d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808211620024c4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620024bb90620044e5565b60405180910390fd5b620024cf826200205e565b73ffffffffffffffffffffffffffffffffffffffff166375c653bc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200251557600080fd5b505afa1580156200252a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025509190620034a0565b9050919050565b600033905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415620025d3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620025ca90620042c5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562002646576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200263d906200432b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415620026b9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620026b0906200445d565b60405180910390fd5b60056000815480929190600101919050555060055430858585600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051620027039062003101565b62002714969594939291906200466b565b604051809103906000f08015801562002731573d6000803e3d6000fd5b5060066000600554815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f91fbc3c983ce8fed5e775e1aced49432a26b41da49a8f7e458c4f4eb8cb175be60055460066000600554815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868686604051620027f59594939291906200460e565b60405180910390a160066000600554815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690509392505050565b6000808284019050838110156200288a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200288190620043b3565b60405180910390fd5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562002908576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620028ff9062004419565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200297b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620029729062004419565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415620029ee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620029e5906200436f565b60405180910390fd5b6000620029fd85858562000998565b9050809150509392505050565b600033905060008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462002b27576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b815260040162002ac69190620041c7565b60206040518083038186803b15801562002adf57600080fd5b505afa15801562002af4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002b1a9190620034a0565b111562002b2657600190505b5b801562002b3657505062002c68565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506003548173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b815260040162002b9b9190620041c7565b60206040518083038186803b15801562002bb457600080fd5b505afa15801562002bc9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002bef9190620034a0565b101562002c33576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162002c2a90620042e7565b60405180910390fd5b62002c6483306003548473ffffffffffffffffffffffffffffffffffffffff1662002d7e909392919063ffffffff16565b5050505b565b60003390506000849050838173ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b815260040162002cb09190620041c7565b60206040518083038186803b15801562002cc957600080fd5b505afa15801562002cde573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002d049190620034a0565b101562002d48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162002d3f9062004507565b60405180910390fd5b62002d778284868473ffffffffffffffffffffffffffffffffffffffff1662002d7e909392919063ffffffff16565b5050505050565b62002e05846323b872dd60e01b85858560405160240162002da293929190620041e4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505062002e0b565b50505050565b606062002e6f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1662002eda9092919063ffffffff16565b905060008151111562002ed5578080602001905181019062002e92919062003448565b62002ed4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162002ecb906200456d565b60405180910390fd5b5b505050565b606062002eeb848460008562002ef4565b90509392505050565b60608247101562002f3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162002f3390620043d5565b60405180910390fd5b62002f478562003017565b62002f89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162002f809062004529565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff16858760405162002fb59190620041ae565b60006040518083038185875af1925050503d806000811462002ff4576040519150601f19603f3d011682016040523d82523d6000602084013e62002ff9565b606091505b50915091506200300b8282866200302a565b92505050949350505050565b600080823b905060008111915050919050565b606083156200303c578290506200308f565b600083511115620030505782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200308691906200427f565b60405180910390fd5b9392505050565b60405180610140016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b6149ba806200491f83390190565b6000813590506200312081620048d0565b92915050565b6000815190506200313781620048d0565b92915050565b600082601f8301126200314f57600080fd5b815162003166620031608262004783565b62004755565b915081818352602084019350602081019050838560208402820111156200318c57600080fd5b60005b83811015620031c05781620031a588826200320f565b8452602084019350602083019250506001810190506200318f565b5050505092915050565b600081359050620031db81620048ea565b92915050565b600081519050620031f281620048ea565b92915050565b600081359050620032098162004904565b92915050565b600081519050620032208162004904565b92915050565b6000602082840312156200323957600080fd5b600062003249848285016200310f565b91505092915050565b6000602082840312156200326557600080fd5b6000620032758482850162003126565b91505092915050565b6000806000606084860312156200329457600080fd5b6000620032a4868287016200310f565b9350506020620032b7868287016200310f565b9250506040620032ca868287016200310f565b9150509250925092565b60008060008060008060008060006101208a8c031215620032f457600080fd5b6000620033048c828d016200310f565b9950506020620033178c828d016200310f565b98505060406200332a8c828d016200310f565b97505060606200333d8c828d01620031f8565b9650506080620033508c828d01620031f8565b95505060a0620033638c828d01620031f8565b94505060c0620033768c828d01620031f8565b93505060e0620033898c828d01620031f8565b9250506101006200339d8c828d01620031ca565b9150509295985092959850929598565b600080600060608486031215620033c357600080fd5b600084015167ffffffffffffffff811115620033de57600080fd5b620033ec868287016200313d565b9350506020620033ff868287016200320f565b925050604062003412868287016200320f565b9150509250925092565b6000602082840312156200342f57600080fd5b60006200343f84828501620031ca565b91505092915050565b6000602082840312156200345b57600080fd5b60006200346b84828501620031e1565b91505092915050565b6000602082840312156200348757600080fd5b60006200349784828501620031f8565b91505092915050565b600060208284031215620034b357600080fd5b6000620034c3848285016200320f565b91505092915050565b60008060408385031215620034e057600080fd5b6000620034f085828601620031f8565b925050602062003503858286016200310f565b9150509250929050565b6000806000806000806000806000806101408b8d0312156200352e57600080fd5b60006200353e8d828e016200320f565b9a50506020620035518d828e0162003126565b9950506040620035648d828e016200320f565b9850506060620035778d828e016200320f565b97505060806200358a8d828e016200320f565b96505060a06200359d8d828e016200320f565b95505060c0620035b08d828e01620031e1565b94505060e0620035c38d828e016200320f565b935050610100620035d78d828e016200320f565b925050610120620035eb8d828e016200320f565b9150509295989b9194979a5092959850565b600080604083850312156200361157600080fd5b60006200362185828601620031f8565b92505060206200363485828601620031ca565b9150509250929050565b600080604083850312156200365257600080fd5b60006200366285828601620031f8565b92505060206200367585828601620031f8565b9150509250929050565b60006200368d83836200418c565b60208301905092915050565b620036a48162004817565b82525050565b620036b58162004817565b82525050565b6000620036c882620047bc565b620036d48185620047ea565b9350620036e183620047ac565b8060005b8381101562003718578151620036fc88826200367f565b97506200370983620047dd565b925050600181019050620036e5565b5085935050505092915050565b62003730816200482b565b82525050565b62003741816200482b565b82525050565b60006200375482620047c7565b620037608185620047fb565b93506200377281856020860162004889565b80840191505092915050565b620037898162004861565b82525050565b60006200379c82620047d2565b620037a8818562004806565b9350620037ba81856020860162004889565b620037c581620048bf565b840191505092915050565b6000620037df60318362004806565b91507f41717561734443413a2044434153746f7261676549443a20696e636f7272656360008301527f742073746f7261676520616464726573730000000000000000000000000000006020830152604082019050919050565b60006200384760348362004806565b91507f41717561734443413a2044434153746f726167653a20746f6b656e51756f746560008301527f2063616e6e6f74206265203020616464726573730000000000000000000000006020830152604082019050919050565b6000620038af60298362004806565b91507f496e73756666696369656e7420746f6b656e2028415155415f4144445245535360008301527f292062616c616e636500000000000000000000000000000000000000000000006020830152604082019050919050565b60006200391760328362004806565b91507f41717561734443413a2044656c6574654f726465723a20696e636f727265637460008301527f206f726465725469636b65744e756d62657200000000000000000000000000006020830152604082019050919050565b60006200397f60338362004806565b91507f41717561734443413a2044434153746f726167653a20746f6b656e426173652060008301527f63616e6e6f7420626520302061646472657373000000000000000000000000006020830152604082019050919050565b6000620039e760268362004806565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b600062003a4f60308362004806565b91507f41717561734443413a205f66696e64436f6e7472616374416464726573733a2060008301527f696e636f727265637420726f75746572000000000000000000000000000000006020830152604082019050919050565b600062003ab760188362004806565b91507f41717561734443413a206e65774e4654204164647265737300000000000000006000830152602082019050919050565b600062003af9601b8362004806565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b600062003b3b60268362004806565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b600062003ba360258362004806565b91507f41717561734443413a2044434153746f726167653a20696e636f72726563742060008301527f696e6465780000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600062003c0b602f8362004806565b91507f41717561734443413a205f66696e64436f6e7472616374416464726573733a2060008301527f696e636f727265637420746f6b656e00000000000000000000000000000000006020830152604082019050919050565b600062003c7360238362004806565b91507f4e6f2053746f7261676520436f6e747261637420466f756e6420666f7220546f60008301527f6b656e00000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600062003cdb60308362004806565b91507f41717561734443413a2044434153746f726167653a20726f757465722063616e60008301527f6e6f7420626520302061646472657373000000000000000000000000000000006020830152604082019050919050565b600062003d4360208362004806565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600062003d8560308362004806565b91507f41717561734443413a20476574416c6c4f72646572733a20696e636f7272656360008301527f74207472616465722061646472657373000000000000000000000000000000006020830152604082019050919050565b600062003ded60278362004806565b91507f41717561734443413a20476574416c6c4f72646572733a20696e636f7272656360008301527f7420696e646578000000000000000000000000000000000000000000000000006020830152604082019050919050565b600062003e5560278362004806565b91507f41717561734443413a2044434153746f7261676549443a20696e636f7272656360008301527f7420696e646578000000000000000000000000000000000000000000000000006020830152604082019050919050565b600062003ebd601a8362004806565b91507f496e73756666696369656e7420746f6b656e2062616c616e63650000000000006000830152602082019050919050565b600062003eff601d8362004806565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b600062003f41600e8362004806565b91507f54726164696e67206973206f66660000000000000000000000000000000000006000830152602082019050919050565b600062003f83602a8362004806565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b600062003feb60308362004806565b91507f41717561734443413a2044434153746f7261676549443a20696e636f7272656360008301527f7420726f757465722061646472657373000000000000000000000000000000006020830152604082019050919050565b600062004053602f8362004806565b91507f41717561734443413a2044434153746f7261676549443a20696e636f7272656360008301527f7420746f6b656e206164647265737300000000000000000000000000000000006020830152604082019050919050565b61014082016000820151620040c560008501826200418c565b506020820151620040da602085018262003699565b506040820151620040ef60408501826200418c565b5060608201516200410460608501826200418c565b5060808201516200411960808501826200418c565b5060a08201516200412e60a08501826200418c565b5060c08201516200414360c085018262003725565b5060e08201516200415860e08501826200418c565b506101008201516200416f6101008501826200418c565b50610120820151620041866101208501826200418c565b50505050565b620041978162004857565b82525050565b620041a88162004857565b82525050565b6000620041bc828462003747565b915081905092915050565b6000602082019050620041de6000830184620036aa565b92915050565b6000606082019050620041fb6000830186620036aa565b6200420a6020830185620036aa565b6200421960408301846200419d565b949350505050565b600060208201905081810360008301526200423d8184620036bb565b905092915050565b60006020820190506200425c600083018462003736565b92915050565b60006020820190506200427960008301846200377e565b92915050565b600060208201905081810360008301526200429b81846200378f565b905092915050565b60006020820190508181036000830152620042be81620037d0565b9050919050565b60006020820190508181036000830152620042e08162003838565b9050919050565b600060208201905081810360008301526200430281620038a0565b9050919050565b60006020820190508181036000830152620043248162003908565b9050919050565b60006020820190508181036000830152620043468162003970565b9050919050565b600060208201905081810360008301526200436881620039d8565b9050919050565b600060208201905081810360008301526200438a8162003a40565b9050919050565b60006020820190508181036000830152620043ac8162003aa8565b9050919050565b60006020820190508181036000830152620043ce8162003aea565b9050919050565b60006020820190508181036000830152620043f08162003b2c565b9050919050565b60006020820190508181036000830152620044128162003b94565b9050919050565b60006020820190508181036000830152620044348162003bfc565b9050919050565b60006020820190508181036000830152620044568162003c64565b9050919050565b60006020820190508181036000830152620044788162003ccc565b9050919050565b600060208201905081810360008301526200449a8162003d34565b9050919050565b60006020820190508181036000830152620044bc8162003d76565b9050919050565b60006020820190508181036000830152620044de8162003dde565b9050919050565b60006020820190508181036000830152620045008162003e46565b9050919050565b60006020820190508181036000830152620045228162003eae565b9050919050565b60006020820190508181036000830152620045448162003ef0565b9050919050565b60006020820190508181036000830152620045668162003f32565b9050919050565b60006020820190508181036000830152620045888162003f74565b9050919050565b60006020820190508181036000830152620045aa8162003fdc565b9050919050565b60006020820190508181036000830152620045cc8162004044565b9050919050565b600061014082019050620045eb6000830184620040ac565b92915050565b60006020820190506200460860008301846200419d565b92915050565b600060a0820190506200462560008301886200419d565b620046346020830187620036aa565b620046436040830186620036aa565b620046526060830185620036aa565b620046616080830184620036aa565b9695505050505050565b600060c0820190506200468260008301896200419d565b620046916020830188620036aa565b620046a06040830187620036aa565b620046af6060830186620036aa565b620046be6080830185620036aa565b620046cd60a0830184620036aa565b979650505050505050565b600060e082019050620046ef600083018a6200419d565b620046fe60208301896200419d565b6200470d60408301886200419d565b6200471c60608301876200419d565b6200472b60808301866200419d565b6200473a60a08301856200419d565b6200474960c083018462003736565b98975050505050505050565b6000604051905081810181811067ffffffffffffffff821117156200477957600080fd5b8060405250919050565b600067ffffffffffffffff8211156200479b57600080fd5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000620048248262004837565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006200486e8262004875565b9050919050565b6000620048828262004837565b9050919050565b60005b83811015620048a95780820151818401526020810190506200488c565b83811115620048b9576000848401525b50505050565b6000601f19601f8301169050919050565b620048db8162004817565b8114620048e757600080fd5b50565b620048f5816200482b565b81146200490157600080fd5b50565b6200490f8162004857565b81146200491b57600080fd5b5056fe60806040523480156200001157600080fd5b50604051620049ba380380620049ba833981810160405260c08110156200003757600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505060006200008c6200052e60201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508560018190555084600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600267ffffffffffffffff811180156200028f57600080fd5b50604051908082528060200260200182016040528015620002bf5781602001602082028036833780820191505090505b50600c9080519060200190620002d792919062000536565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600c6000815481106200030a57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600c6001815481106200038457fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600267ffffffffffffffff81118015620003e557600080fd5b50604051908082528060200260200182016040528015620004155781602001602082028036833780820191505090505b50600b90805190602001906200042d92919062000536565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b6000815481106200046057fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b600181548110620004da57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505062000602565b600033905090565b828054828255906000526020600020908101928215620005b2579160200282015b82811115620005b15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000557565b5b509050620005c19190620005c5565b5090565b5b80821115620005fe57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101620005c6565b5090565b6143a880620006126000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063922c7316116100ad578063dc7782a311610071578063dc7782a3146104fe578063ec4ca0f81461051c578063f1e0b56f1461053a578063f2fde38b1461056e578063ffc5ea0d146105b25761012c565b8063922c7316146103d9578063a82ed9ec1461040d578063c949ba9b14610441578063d449a83214610475578063dad675ba146104d05761012c565b806375c653bc116100f457806375c653bc1461029257806384d09e27146102b05780638a2b9e78146103575780638b474f8d146103875780638da5cb5b146103a55761012c565b806306b099af1461013157806328b11bae146101ca57806335245c03146101e857806345e8c81414610254578063715018a614610288575b600080fd5b61015d6004803603602081101561014757600080fd5b810190808035906020019092919050505061064b565b604051808b81526020018a73ffffffffffffffffffffffffffffffffffffffff16815260200189815260200188815260200187815260200186815260200185151581526020018481526020018381526020018281526020019a505050505050505050505060405180910390f35b6101d26106d9565b6040518082815260200191505060405180910390f35b610252600480360360e08110156101fe57600080fd5b810190808035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291908035151590602001909291905050506106df565b005b61025c610e06565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610290610e2c565b005b61029a610f99565b6040518082815260200191505060405180910390f35b6102f2600480360360208110156102c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f9f565b6040518080602001848152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015610341578082015181840152602081019050610326565b5050505090500194505050505060405180910390f35b6103856004803603602081101561036d57600080fd5b810190808035151590602001909291905050506111cc565b005b61038f611aa6565b6040518082815260200191505060405180910390f35b6103ad611aac565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103e1611ad5565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610415611afb565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610449611b21565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104b76004803603602081101561048b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b47565b604051808260ff16815260200191505060405180910390f35b6104fc600480360360208110156104e657600080fd5b8101908080359060200190929190505050611bd1565b005b610506611bdf565b6040518082815260200191505060405180910390f35b610524611be5565b6040518082815260200191505060405180910390f35b610542611beb565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105b06004803603602081101561058457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c11565b005b6105de600480360360208110156105c857600080fd5b8101908080359060200190929190505050611e03565b604051808b81526020018a73ffffffffffffffffffffffffffffffffffffffff16815260200189815260200188815260200187815260200186815260200185151581526020018481526020018381526020018281526020019a505050505050505050505060405180910390f35b600d818154811061065857fe5b90600052602060002090600a02016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050154908060060160009054906101000a900460ff1690806007015490806008015490806009015490508a565b60015481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4f6e6c792066726f6d20466163746f727941646472657373000000000000000081525060200191505060405180910390fd5b6001861015610819576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f496e636f7272656374205377617020496e74657276616c00000000000000000081525060200191505060405180910390fd5b6001851015610890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f496e636f7272656374204475726174696f6e20496e74657276616c000000000081525060200191505060405180910390fd5b6001841015610907576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f496e636f727265637420546f6b656e204d696e696d756d20507269636500000081525060200191505060405180910390fd5b83831161097c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f496e636f727265637420546f6b656e204d6178696d756d20507269636500000081525060200191505060405180910390fd5b60018210156109f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f496e73756666696369656e7420546f6b656e20496e70757420416d6f756e740081525060200191505060405180910390fd5b600115158115151480610a0a575060001515811515145b610a7c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f496e636f7272656374204f72646572205479706500000000000000000000000081525060200191505060405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600a5410610b13576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4d6178696d756d204f726465727320526561636865640000000000000000000081525060200191505060405180910390fd5b6000610b2a610e1087611fdb90919063ffffffff16565b90506000610b41888361206190919063ffffffff16565b90506001811015610bba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f496e636f727265637420546f74616c205377617020526573756c74000000000081525060200191505060405180910390fd5b610bc2613f88565b8981600001818152505032816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050888160400181815250508681606001818152505085816080018181525050848160a0018181525050838160c001901515908115158152505060008161010001818152505060018160e00181815250508181610120018181525050600d8190806001815401808255809150506001900390600052602060002090600a02016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e082015181600701556101008201518160080155610120820151816009015550507fc39f5b489956697850df4e848a5546d7a042a17c537e1d61207b4f7e9ce4b0c98a600154328c8c8c8c8c8c604051808a81526020018981526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018681526020018581526020018481526020018381526020018215158152602001995050505050505050505060405180910390a1600a6000815480929190600101919050555060086000815480929190600101919050555050505050505050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e346120ea565b73ffffffffffffffffffffffffffffffffffffffff16610e52611aac565b73ffffffffffffffffffffffffffffffffffffffff1614610edb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60085481565b60606000806000600d8054905090506001811015611025576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f496e73756666696369656e74206f72646572206c697374206c656e677468000081525060200191505060405180910390fd5b60008060608367ffffffffffffffff8111801561104157600080fd5b506040519080825280602002602001820160405280156110705781602001602082028036833780820191505090505b50905060005b848110156111b7578873ffffffffffffffffffffffffffffffffffffffff16600d82815481106110a257fe5b90600052602060002090600a020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156111aa57600d81815481106110fd57fe5b90600052602060002090600a02016000015482828151811061111b57fe5b60200260200101818152505060011515600d828154811061113857fe5b90600052602060002090600a020160060160009054906101000a900460ff16151514156111685783806001019450505b60001515600d828154811061117957fe5b90600052602060002090600a020160060160009054906101000a900460ff16151514156111a95782806001019350505b5b8080600101915050611076565b50808383965096509650505050509193909250565b600080600d8054905090506000806000905060608367ffffffffffffffff811180156111f757600080fd5b506040519080825280602002602001820160405280156112265781602001602082028036833780820191505090505b50905060005b8481101561127a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82828151811061126157fe5b602002602001018181525050808060010191505061122c565b5060005b84811015611a185760006112d7600d838154811061129857fe5b90600052602060002090600a020160090154600d84815481106112b757fe5b90600052602060002090600a02016005015461206190919063ffffffff16565b9050600061130c600d84815481106112eb57fe5b90600052602060002090600a020160020154426120f290919063ffffffff16565b9050600d838154811061131b57fe5b90600052602060002090600a020160090154600d848154811061133a57fe5b90600052602060002090600a020160070154116119d15761139f600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612175565b955085600d84815481106113af57fe5b90600052602060002090600a0201600301541080156113eb575085600d84815481106113d757fe5b90600052602060002090600a020160040154115b156119cc5760011515600d848154811061140157fe5b90600052602060002090600a020160060160009054906101000a900460ff161515148015611433575060011515891515145b156116df576114438260016125cc565b945080600d848154811061145357fe5b90600052602060002090600a020160080154108015611473575060018210155b8015611480575060018510155b156116da57611514600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168488600d88815481106114dd57fe5b90600052602060002090600a020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166129c9565b42600d848154811061152257fe5b90600052602060002090600a020160080181905550600d838154811061154457fe5b90600052602060002090600a0201600701600081548092919060010191905055508780600101985050600d838154811061157a57fe5b90600052602060002090600a020160090154600d848154811061159957fe5b90600052602060002090600a02016007015411156115e957600d83815481106115be57fe5b90600052602060002090600a0201600001548484815181106115dc57fe5b6020026020010181815250505b6116d9600d84815481106115f957fe5b90600052602060002090600a020160405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016007820154815260200160088201548152602001600982015481525050612f84565b5b6119cb565b60001515600d84815481106116f057fe5b90600052602060002090600a020160060160009054906101000a900460ff161515148015611722575060001515891515145b156119ca576117328260006125cc565b945080600d848154811061174257fe5b90600052602060002090600a020160080154108015611762575060018210155b801561176f575060018510155b156119c957611803600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168488600d88815481106117cc57fe5b90600052602060002090600a020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166129c9565b42600d848154811061181157fe5b90600052602060002090600a020160080181905550600d838154811061183357fe5b90600052602060002090600a0201600701600081548092919060010191905055508780600101985050600d838154811061186957fe5b90600052602060002090600a020160090154600d848154811061188857fe5b90600052602060002090600a02016007015411156118d857600d83815481106118ad57fe5b90600052602060002090600a0201600001548484815181106118cb57fe5b6020026020010181815250505b6119c8600d84815481106118e857fe5b90600052602060002090600a020160405180610140016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581526020016007820154815260200160088201548152602001600982015481525050612f84565b5b5b5b5b611a09565b600d83815481106119de57fe5b90600052602060002090600a0201600001548484815181106119fc57fe5b6020026020010181815250505b5050808060010191505061127e565b5060005b84811015611a82576000828281518110611a3257fe5b602002602001015190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611a7457611a6e816001613052565b50611a82565b508080600101915050611a1c565b50611a98856009546137a290919063ffffffff16565b600981905550505050505050565b60095481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611b8f57600080fd5b505afa158015611ba3573d6000803e3d6000fd5b505050506040513d6020811015611bb957600080fd5b81019080805190602001909291905050509050919050565b611bdc816000613052565b50565b600a5481565b60075481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611c196120ea565b73ffffffffffffffffffffffffffffffffffffffff16611c37611aac565b73ffffffffffffffffffffffffffffffffffffffff1614611cc0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d46576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806141b66026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060008060008060008060008060005b600d80549050811015611fcd578b600d8281548110611e3057fe5b90600052602060002090600a0201600001541415611fc057600d8181548110611e5557fe5b90600052602060002090600a0201600001549a50600d8181548110611e7657fe5b90600052602060002090600a020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169950600d8181548110611eb757fe5b90600052602060002090600a0201600201549850600d8181548110611ed857fe5b90600052602060002090600a0201600301549750600d8181548110611ef957fe5b90600052602060002090600a0201600401549650600d8181548110611f1a57fe5b90600052602060002090600a0201600501549550600d8181548110611f3b57fe5b90600052602060002090600a020160060160009054906101000a900460ff169450600d8181548110611f6957fe5b90600052602060002090600a0201600701549350600d8181548110611f8a57fe5b90600052602060002090600a0201600801549250600d8181548110611fab57fe5b90600052602060002090600a02016009015491505b8080600101915050611e15565b509193959799509193959799565b600080831415611fee576000905061205b565b6000828402905082848281611fff57fe5b0414612056576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061427d6021913960400191505060405180910390fd5b809150505b92915050565b60008082116120d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b8183816120e157fe5b04905092915050565b600033905090565b60008282111561216a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b6000806103e890506000670de0b6b3a76400009050600061219586611b47565b90506000600190506000600a905060008360ff16116121ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806142576026913960400191505060405180910390fd5b60128360ff161461221b578260ff168160ff160a8260ff160293505b84841015612274576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806141dc602b913960400191505060405180910390fd5b600267ffffffffffffffff8111801561228c57600080fd5b506040519080825280602002602001820160405280156122bb5781602001602082028036833780820191505090505b50600c90805190602001906122d1929190613ff3565b5087600c6000815481106122e157fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600c60018154811061233857fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000612395868661206190919063ffffffff16565b905060008111156125bf576060600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634955796c83600c6103e56040518463ffffffff1660e01b81526004018084815260200180602001838152602001828103825284818154815260200191508054801561247c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612432575b505094505050505060006040518083038186803b15801561249c57600080fd5b505afa1580156124b0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156124da57600080fd5b81019080805160405193929190846401000000008211156124fa57600080fd5b8382019150602082018581111561251057600080fd5b825186602082028301116401000000008211171561252d57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015612564578082015181840152602081019050612549565b5050505090500160405250505090506000816001600c80549050038151811061258957fe5b602002602001015190506125a68882611fdb90919063ffffffff16565b90508060078190555080985050505050505050506125c6565b5050505050505b92915050565b60008082156127cc576060600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634955796c86600b6103e56040518463ffffffff1660e01b8152600401808481526020018060200183815260200182810382528481815481526020019150805480156126b157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612667575b505094505050505060006040518083038186803b1580156126d157600080fd5b505afa1580156126e5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561270f57600080fd5b810190808051604051939291908464010000000082111561272f57600080fd5b8382019150602082018581111561274557600080fd5b825186602082028301116401000000008211171561276257600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561279957808201518184015260208101905061277e565b505050509050016040525050509050806001600b8054905003815181106127bc57fe5b60200260200101519150506129bf565b6060600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634955796c86600c6103e56040518463ffffffff1660e01b8152600401808481526020018060200183815260200182810382528481815481526020019150805480156128a857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161285e575b505094505050505060006040518083038186803b1580156128c857600080fd5b505afa1580156128dc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561290657600080fd5b810190808051604051939291908464010000000082111561292657600080fd5b8382019150602082018581111561293c57600080fd5b825186602082028301116401000000008211171561295957600080fd5b8083526020830192505050908051906020019060200280838360005b83811015612990578082015181840152602081019050612975565b505050509050016040525050509050806001600c8054905003815181106129b357fe5b60200260200101519150505b8091505092915050565b6001831015612a23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061416f6022913960400191505060405180910390fd5b6001821015612a7d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806143506023913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415612b03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806142fd6029913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612b89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614207602a913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612c0f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806141916025913960400191505060405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612ca257600080fd5b505af1158015612cb6573d6000803e3d6000fd5b505050506040513d6020811015612ccc57600080fd5b8101908080519060200190929190505050506060600267ffffffffffffffff81118015612cf857600080fd5b50604051908082528060200260200182016040528015612d275781602001602082028036833780820191505090505b5090508581600081518110612d3857fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508481600181518110612d8057fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173985858486426040518663ffffffff1660e01b815260040180868152602001858152602001806020018473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015612e7d578082015181840152602081019050612e62565b505050509050019650505050505050600060405180830381600087803b158015612ea657600080fd5b505af1158015612eba573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015612ee457600080fd5b8101908080516040519392919084640100000000821115612f0457600080fd5b83820191506020820185811115612f1a57600080fd5b8251866020820283011164010000000082111715612f3757600080fd5b8083526020830192505050908051906020019060200280838360005b83811015612f6e578082015181840152602081019050612f53565b5050505090500160405250505050505050505050565b7fe9a00e06037f5febd6a711e8d956dd587f873e20ca83e318f4660bdaf82f5961816000015160015483602001518460400151856060015186608001518760a001518860c001518960e001518a61010001518b6101200151604051808c81526020018b81526020018a73ffffffffffffffffffffffffffffffffffffffff16815260200189815260200188815260200187815260200186815260200185151581526020018481526020018381526020018281526020019b50505050505050505050505060405180910390a150565b600080600d80549050905060008060018310156130d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f496e636f7272656374204f7264657220496e64657820676976656e000000000081525060200191505060405180910390fd5b60005b838110156135115785156132be5786600d82815481106130f657fe5b90600052602060002090600a02016000015414156132b957600061315f600d838154811061312057fe5b90600052602060002090600a020160090154600d848154811061313f57fe5b90600052602060002090600a02016005015461206190919063ffffffff16565b905060006131976001600d858154811061317557fe5b90600052602060002090600a0201600701540383611fdb90919063ffffffff16565b905060006131cc82600d86815481106131ac57fe5b90600052602060002090600a0201600501546120f290919063ffffffff16565b905060011515600d85815481106131df57fe5b90600052602060002090600a020160060160009054906101000a900460ff16151514156132535761324e600d858154811061321657fe5b90600052602060002090600a020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168261382a565b61329c565b61329b600d858154811061326357fe5b90600052602060002090600a020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168261397b565b5b6001975083955087156132b157505050613511565b505050613504565b613503565b3273ffffffffffffffffffffffffffffffffffffffff16600d82815481106132e257fe5b90600052602060002090600a020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156135025786600d828154811061333e57fe5b90600052602060002090600a02016000015414156135015760006133a7600d838154811061336857fe5b90600052602060002090600a020160090154600d848154811061338757fe5b90600052602060002090600a02016005015461206190919063ffffffff16565b905060006133df6001600d85815481106133bd57fe5b90600052602060002090600a0201600701540383611fdb90919063ffffffff16565b9050600061341482600d86815481106133f457fe5b90600052602060002090600a0201600501546120f290919063ffffffff16565b905060011515600d858154811061342757fe5b90600052602060002090600a020160060160009054906101000a900460ff161515141561349b57613496600d858154811061345e57fe5b90600052602060002090600a020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168261382a565b6134e4565b6134e3600d85815481106134ab57fe5b90600052602060002090600a020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168261397b565b5b6001975083955087156134f957505050613511565b505050613504565b5b5b5b80806001019150506130da565b50831561377f576001831461376d5760008290505b6001840381101561365e57600d600182018154811061354157fe5b90600052602060002090600a0201600d828154811061355c57fe5b90600052602060002090600a0201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282015481600201556003820154816003015560048201548160040155600582015481600501556006820160009054906101000a900460ff168160060160006101000a81548160ff0219169083151502179055506007820154816007015560088201548160080155600982015481600901559050508080600101915050613526565b507fe42e84d3479ff44170d4370e19c3ff6685c784eef36bbbd1dbd438ad91244225600d600185038154811061369057fe5b90600052602060002090600a020160000154600154604051808381526020018281526020019250505060405180910390a1600d8054806136cc57fe5b60019003818190600052602060002090600a02016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160009055600482016000905560058201600090556006820160006101000a81549060ff021916905560078201600090556008820160009055600982016000905550509055808060010191505061377e565b808060010191505061377d613acc565b5b5b613794816008546120f290919063ffffffff16565b600881905550505050505050565b600080828401905083811015613820576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050818173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156138b957600080fd5b505afa1580156138cd573d6000803e3d6000fd5b505050506040513d60208110156138e357600080fd5b8101908080519060200190929190505050101561394b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f81526020018061429e602f913960400191505060405180910390fd5b61397683838373ffffffffffffffffffffffffffffffffffffffff16613b579092919063ffffffff16565b505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050818173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015613a0a57600080fd5b505afa158015613a1e573d6000803e3d6000fd5b505050506040513d6020811015613a3457600080fd5b81019080805190602001909291905050501015613a9c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806142cd6030913960400191505060405180910390fd5b613ac783838373ffffffffffffffffffffffffffffffffffffffff16613b579092919063ffffffff16565b505050565b6001600d8054905014613b47576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4f726465724c69737420646f6573206e6f7420657175616c206f6e650000000081525060200191505060405180910390fd5b600d6000613b55919061407d565b565b613bf48363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613bf9565b505050565b6060613c5b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613ce89092919063ffffffff16565b9050600081511115613ce357808060200190516020811015613c7c57600080fd5b8101908080519060200190929190505050613ce2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614326602a913960400191505060405180910390fd5b5b505050565b6060613cf78484600085613d00565b90509392505050565b606082471015613d5b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806142316026913960400191505060405180910390fd5b613d6485613ea9565b613dd6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310613e265780518252602082019150602081019050602083039250613e03565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613e88576040519150601f19603f3d011682016040523d82523d6000602084013e613e8d565b606091505b5091509150613e9d828286613ebc565b92505050949350505050565b600080823b905060008111915050919050565b60608315613ecc57829050613f81565b600083511115613edf5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613f46578082015181840152602081019050613f2b565b50505050905090810190601f168015613f735780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b60405180610140016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b82805482825590600052602060002090810192821561406c579160200282015b8281111561406b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190614013565b5b50905061407991906140a1565b5090565b50805460008255600a029060005260206000209081019061409e91906140dc565b50565b5b808211156140d857600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055506001016140a2565b5090565b5b8082111561416a576000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160009055600482016000905560058201600090556006820160006101000a81549060ff021916905560078201600090556008820160009055600982016000905550600a016140dd565b509056fe537761703a20496e73756666696369656e7420546f6b656e20496e20416d6f756e74537761703a205f746f2063616e6e6f7420626520746865207a65726f20616464726573732e4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734171756173466565643a204d697373696e6720546f6b656e51756f746520496e70757420416d6f756e7473537761703a20746f6b656e4f75742063616e6e6f7420626520746865207a65726f20616464726573732e416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4171756173466565643a204d697373696e6720546f6b656e51756f746520446563696d616c73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77496e73756666696369656e74204f72646572426f6f6b53746f7261676520746f6b656e626173652062616c616e6365496e73756666696369656e74204f72646572426f6f6b53746f7261676520746f6b656e71756f74652062616c616e6365537761703a20746f6b656e496e2063616e6e6f7420626520746865207a65726f20616464726573732e5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564537761703a496e73756666696369656e7420546f6b656e204f7574204d696e696d756da2646970667358221220754e5e541b870a2153e24db1f938d04dec4159ce7857e8fd24df5f50efd527dc64736f6c634300060c0033a2646970667358221220ee448a1434eab52530b70cac67d8d4de78ab0ca615bdb320e92389316cde71af64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3523,
        "contract": "contracts/dca/AquasDCAMulti.sol:AquasDCAMulti",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15799,
        "contract": "contracts/dca/AquasDCAMulti.sol:AquasDCAMulti",
        "label": "NFTAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 15801,
        "contract": "contracts/dca/AquasDCAMulti.sol:AquasDCAMulti",
        "label": "TradingEnabled",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 15803,
        "contract": "contracts/dca/AquasDCAMulti.sol:AquasDCAMulti",
        "label": "Relayer",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 15805,
        "contract": "contracts/dca/AquasDCAMulti.sol:AquasDCAMulti",
        "label": "EntryFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 15808,
        "contract": "contracts/dca/AquasDCAMulti.sol:AquasDCAMulti",
        "label": "MAX_ORDERS",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 15810,
        "contract": "contracts/dca/AquasDCAMulti.sol:AquasDCAMulti",
        "label": "StorageID",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 15814,
        "contract": "contracts/dca/AquasDCAMulti.sol:AquasDCAMulti",
        "label": "allStorages",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_contract(DCAStorage)18773)"
      },
      {
        "astId": 15816,
        "contract": "contracts/dca/AquasDCAMulti.sol:AquasDCAMulti",
        "label": "AQUA_ADDRESS",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 15818,
        "contract": "contracts/dca/AquasDCAMulti.sol:AquasDCAMulti",
        "label": "index",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(DCAStorage)18773": {
        "encoding": "inplace",
        "label": "contract DCAStorage",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_contract(DCAStorage)18773)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract DCAStorage)",
        "numberOfBytes": "32",
        "value": "t_contract(DCAStorage)18773"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
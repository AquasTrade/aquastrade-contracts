{
  "address": "0x8103E54865Bbe8D0D6f502688BB235e62AF08FC0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "getRandomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0baf50cbaa07dc5396191ac643355218e4f5348f6577bd33987902580a7e7a5b",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0xCDeb7F7974D89Fd71089487D65AA9731d7E846F5",
    "contractAddress": "0x8103E54865Bbe8D0D6f502688BB235e62AF08FC0",
    "transactionIndex": 0,
    "gasUsed": "108723",
    "logsBloom": "0x
    "blockHash": "0x8c6829a82a0c32d6f13c187dce122401b05f00debdf79814cfd8478c57db661e",
    "transactionHash": "0x0baf50cbaa07dc5396191ac643355218e4f5348f6577bd33987902580a7e7a5b",
    "logs": [],
    "blockNumber": 3899474,
    "cumulativeGasUsed": "108723",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f85970041e09f0ecdc90b76d3852d68f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/game/rng6.sol\":\"RNG_CoinFlip\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/game/Irng6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IRandomNumberGenerator {\\n    function getRandomNumber() external view returns (uint randomness);\\n}\",\"keccak256\":\"0x83123973e36903aa6409188d52c8a22ce527fe67adfe22c3058c39a7a480cb72\",\"license\":\"MIT\"},\"contracts/game/rng6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./Irng6.sol\\\";\\n\\ncontract RNG_CoinFlip is IRandomNumberGenerator {\\n    constructor() public {}\\n   \\n    function getRandomNumber() public view override returns (uint) {\\n        // Here we generate entropy by xoring together properties that\\n        // are hard / impossible to all manipulate at the same time\\n        // by a single actor\\n\\n        // msg.sender can be manipulated for a user because he can\\n        // create new addresses very easily but it's impossible to\\n        // manipulate for a miner because he has no control over it\\n        bytes32 a = keccak256(abi.encode(msg.sender));\\n        // blockhash is hard to manipulate for a user because he will\\n        // have a short timeframe to send the transaction hoping it\\n        // gets mined in the very next block, but it is easy to manipulate\\n        // for a miner because they can wait for more blocks before adding\\n        // the transaction\\n        bytes32 b = keccak256(abi.encode(blockhash(block.number - 1)));\\n        // Note: we can add more entropy by xoring the keccak256 hashes\\n        // of local variables in the state of the contract\\n        return uint(a) ^ uint(b);\\n    }\\n}\",\"keccak256\":\"0xc8655b10c0c1e7536f7cf6f2a7bc4b5771abe896ff0c13c3f676b61a4a281ede\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b506101008061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063dbdff2c114602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b60008033604051602001808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405160208183030381529060405280519060200120905060006001430340604051602001808281526020019150506040516020818303038152906040528051906020012090508060001c8260001c18925050509056fea26469706673582212202e7262167bdb79e568f5a5bf8df2231155b90955e55d76b4c633b63fbc107be164736f6c634300060c0033",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c8063dbdff2c114602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b60008033604051602001808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405160208183030381529060405280519060200120905060006001430340604051602001808281526020019150506040516020818303038152906040528051906020012090508060001c8260001c18925050509056fea26469706673582212202e7262167bdb79e568f5a5bf8df2231155b90955e55d76b4c633b63fbc107be164736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
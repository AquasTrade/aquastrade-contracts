{
  "address": "0x6bD8a9f4d6478Ba1080dd750c0b3aD6d1D37C4f0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "NewDataFeed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "NewPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FeedID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FeedMaximum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Feeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quote",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "base",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "priceFeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pricePool",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NFTAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PoolAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PoolAssetBase",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PoolAssetQuote",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_V2_FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_V2_ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ammPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newTokenQuote",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newTokenBase",
          "type": "address"
        }
      ],
      "name": "addDataFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feedID",
          "type": "uint256"
        }
      ],
      "name": "consumeFeed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "quote",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "base",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "priceFeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePool",
              "type": "uint256"
            }
          ],
          "internalType": "struct AquasOracle.Feed",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "consumeFeeds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "quote",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "base",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "priceFeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePool",
              "type": "uint256"
            }
          ],
          "internalType": "struct AquasOracle.Feed[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddress",
          "type": "address"
        }
      ],
      "name": "getPoolPriceWithAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dataFeedIndex",
          "type": "uint256"
        }
      ],
      "name": "getPoolPriceWithIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddress",
          "type": "address"
        }
      ],
      "name": "getPriceWithAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dataFeedIndex",
          "type": "uint256"
        }
      ],
      "name": "getPriceWithIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "setNftAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dataFeedIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "updateFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf65f1865ab0f828865a985cf9a295c07d21c3d5b7f56bd20075e0fdd974a4193",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0xCDeb7F7974D89Fd71089487D65AA9731d7E846F5",
    "contractAddress": "0x6bD8a9f4d6478Ba1080dd750c0b3aD6d1D37C4f0",
    "transactionIndex": 0,
    "gasUsed": "2907762",
    "logsBloom": "0x
    "blockHash": "0xc5ba4de9cb5c0547077432be750fbdfa4434994bd9fb788d68ac483f0e1d2d33",
    "transactionHash": "0xf65f1865ab0f828865a985cf9a295c07d21c3d5b7f56bd20075e0fdd974a4193",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5225975,
        "transactionHash": "0xf65f1865ab0f828865a985cf9a295c07d21c3d5b7f56bd20075e0fdd974a4193",
        "address": "0x6bD8a9f4d6478Ba1080dd750c0b3aD6d1D37C4f0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cdeb7f7974d89fd71089487d65aa9731d7e846f5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc5ba4de9cb5c0547077432be750fbdfa4434994bd9fb788d68ac483f0e1d2d33"
      }
    ],
    "blockNumber": 5225975,
    "cumulativeGasUsed": "2907762",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x698EA133CBA3BACD4aA6405411d8e8c1726D5f61",
    "0xc318a82CB7c2B0faf7e355BB8F285016956aBF55",
    "0xcEcd42ff7eCC7b0BfF7a9CF95C6e7ce9aA052d8C"
  ],
  "numDeployments": 17,
  "solcInputHash": "b0facad37e6c19f4aac6960f5970d5ef",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"NewDataFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"NewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FeedID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FeedMaximum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Feeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceFeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolAssetBase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolAssetQuote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ammPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTokenQuote\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTokenBase\",\"type\":\"address\"}],\"name\":\"addDataFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feedID\",\"type\":\"uint256\"}],\"name\":\"consumeFeed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceFeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePool\",\"type\":\"uint256\"}],\"internalType\":\"struct AquasOracle.Feed\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consumeFeeds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceFeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePool\",\"type\":\"uint256\"}],\"internalType\":\"struct AquasOracle.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"getPoolPriceWithAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dataFeedIndex\",\"type\":\"uint256\"}],\"name\":\"getPoolPriceWithIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"getPriceWithAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dataFeedIndex\",\"type\":\"uint256\"}],\"name\":\"getPriceWithIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setNftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dataFeedIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/AquasOracle.sol\":\"AquasOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x3dab19bb4a63bcbda1ee153ca291694f92f9009fad28626126b15a8503b0e5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20Capped is ERC20 {\\n    using SafeMath for uint256;\\n\\n    uint256 private _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    constructor (uint256 cap_) internal {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - minted tokens must not cause the total supply to go over the cap.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) { // When minting tokens\\n            require(totalSupply().add(amount) <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x94e4d02b80450cf26bec54be6c0cf52fe4e8ce91dfc6e97794dce19ded2a3fa4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/amm/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n    event AdminSet(address indexed newAdmin);\\n    event FeeToRecipientSet(address indexed newFeeTo);\\n\\n    event FeeDecutionSwapperSet(address indexed swapper, bool allowance);\\n\\n    function feeTo() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function feeDeductionSwappers(address) external view returns (bool);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address newFeeTo) external;\\n\\n    function setFeeDeductionSwapper(address feeDeductionSwapper, bool allowance) external;\\n\\n    function setAdmin(address newAdmin) external;\\n}\\n\",\"keccak256\":\"0xd16cdc82ae24c5d7dd34d3bd3f9f271fc7153f65c78d40c7e8ab007b06ed9f47\",\"license\":\"GPL-3.0\"},\"contracts/amm/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint256 feeMultiplier\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint256 feeMultiplier\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] calldata path,\\n        uint256 feeMultiplier\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        uint256 feeMultiplier\\n    ) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xa91e35729661da1916c81248ba75074bfbd9eed60ba873d8b4d7e0a27ac3a8b2\",\"license\":\"GPL-3.0\"},\"contracts/amm/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.2;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\nimport \\\"../../interfaces/INFTAdmin.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    event FactorySet(address indexed newFactory);\\n\\n    event NFTAdminSet(address indexed newNftAdmin);\\n\\n    function nftAdmin() external pure returns (INFTAdmin);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function setFactory(address newFactory) external;\\n\\n    function setNftAdmin(INFTAdmin newNftAdmin) external;\\n}\\n\",\"keccak256\":\"0xb519d65338e13beb518055a99aa08a4c4f5f9fe997125b03278af8e19962ab54\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\ninterface INFT is IERC721Upgradeable {\\n    event MinterSet(address indexed minter, bool allowance);\\n\\n    event DescriptionSet(string newDescription);\\n\\n    event VisualAppearanceSet(string newVisualAppearance);\\n\\n    function nftIds() external view returns (uint256);\\n\\n    function minters(address minter) external view returns (bool);\\n\\n    function description() external view returns (string memory);\\n\\n    function visualAppearance() external view returns (string memory);\\n\\n    function mint(address to) external;\\n\\n    function setMinter(address minter, bool allowance) external;\\n\\n    function setDescription(string memory _description) external;\\n\\n    function setVisualAppearance(string memory _visualAppearance) external;\\n}\\n\",\"keccak256\":\"0x67b15e745bfe60a4b61b4eb72e9f0d19bbcecfdeaf777368c282c0fd2ded6b3b\",\"license\":\"MIT\"},\"contracts/interfaces/INFTAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface INFTAdmin {\\n    event MinterSet(address indexed minter, bool allowance);\\n\\n    event GoldSwapNFTSet(address indexed goldSwapNFT);\\n    event SilverSwapNFTSet(address indexed silverSwapNFT);\\n    event BronzeSwapNFTSet(address indexed bronzeSwapNFT);\\n    event ProfileNFTset(address indexed profileNFT);\\n\\n    function profileNFT() external view returns (address);\\n\\n    function goldSwapNFT() external view returns (address);\\n\\n    function silverSwapNFT() external view returns (address);\\n\\n    function bronzeSwapNFT() external view returns (address);\\n\\n    function minters(address minter) external view returns (bool);\\n\\n    function calculateAmmSwapFeeDeduction(address user) external view returns (uint256 feeMultiplier);\\n\\n    function mintProfileNFT(address user) external;\\n\\n    function setProfileNFT(address newProfileNFT) external;\\n\\n    function setGoldSwapNFT(address newSwapNFT) external;\\n\\n    function setSilverSwapNFT(address newSwapNFT) external;\\n\\n    function setBronzeSwapNFT(address newSwapNFT) external;\\n\\n    function setMinter(address minter, bool allowance) external;\\n}\\n\",\"keccak256\":\"0x89f633fa939f9edfa265b6fcaa46faebe8659329b049de6ede716b8df4445e21\",\"license\":\"MIT\"},\"contracts/oracle/AquasOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../interfaces/INFT.sol\\\";\\nimport \\\"../token_mappings/AQUA.sol\\\";\\nimport \\\"../amm/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../amm/interfaces/IUniswapV2Factory.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\n/*\\n\\nworking \\n\\n\\nv0.2.1 : working on getPrices : consumeFeed\\n0xF0C811ED700D02274E6d059b26d045edB79B70Ee\\n\\nok next idea: \\n\\n\\n*/\\n\\ncontract AquasOracle is Ownable {\\n    address[] private pathSell;\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address public NFTAddress; // Set erc721 collection\\n    address public UNISWAP_V2_ROUTER;\\n    address public UNISWAP_V2_FACTORY;\\n    uint256 public FeedID; // storage length : starts at 0\\n    uint256 public FeedMaximum; // should match the amm pools length\\n\\n    mapping(uint256 => uint256) private DataFeedPrice; // Last recommended price for AMM POOL from oracle\\n    mapping(uint256 => uint256) private PoolPrice; // Last price from actual AMM POOL\\n\\n    mapping(uint256 => address) public PoolAddresses; // AMM POOL ADDRESSES\\n    mapping(uint256 => address) public PoolAssetQuote; // Quote and Base asset for fetching decimals\\n    mapping(uint256 => address) public PoolAssetBase; // Quote and Base asset for fetching decimals\\n\\n    event NewDataFeed(uint256 _index, address _pool);\\n    event NewPool(uint256 _index, address _pool);\\n\\n    struct Feed {\\n        uint256 id;\\n        address router;\\n        address pool;\\n        address quote;\\n        address base;\\n        uint256 priceFeed;\\n        uint256 pricePool;\\n    }\\n\\n    // nft => id => Item\\n    mapping(uint256 => Feed) public Feeds;\\n\\n    constructor(address _router, address _factory, address _nft) public {\\n        UNISWAP_V2_ROUTER = _router;\\n        UNISWAP_V2_FACTORY = _factory;\\n        NFTAddress = _nft;\\n        FeedID = 0;\\n        FeedMaximum = IUniswapV2Factory(UNISWAP_V2_FACTORY).allPairsLength();\\n    }\\n\\n    function setNftAddress(address newAddress) external onlyOwner {\\n        require(address(newAddress) != address(0), \\\"AquasOracle: newNFT Address\\\");\\n        NFTAddress = newAddress;\\n    }\\n\\n    // pass in the uniswap factory Pool address . pair.sol\\n    // token A Quote Asset\\n    // token B Base Asset\\n    function addDataFeed(address _ammPoolAddress, address newTokenQuote, address newTokenBase) public {\\n        require(address(_ammPoolAddress) != address(0), \\\"AquasOracle: Requires New DataFeed Address\\\");\\n\\n        // make sure the datafeed doesn't already exist\\n        for (uint256 i = 0; i <= FeedID; i++) {\\n            if (PoolAddresses[i] == _ammPoolAddress) {\\n                // match : datafeed exists, break return\\n                return;\\n            }\\n        }\\n        // only nft holders can add PoolAddresses\\n        bool NFT = false;\\n        if (address(NFTAddress) != address(0)) {\\n            if (INFT(NFTAddress).balanceOf(msg.sender) > 0) {\\n                NFT = true;\\n            }\\n        }\\n\\n        uint256 poolLength = IUniswapV2Factory(UNISWAP_V2_FACTORY).allPairsLength();\\n\\n        // make sure the pool address exists and matches the requested new DataFeed\\n        bool poolExist = false;\\n        for (uint256 i = 0; i < poolLength; i++) {\\n            address pool = IUniswapV2Factory(UNISWAP_V2_FACTORY).allPairs(i);\\n            if (_ammPoolAddress == pool) {\\n                poolExist = true;\\n            }\\n            // doesn't exist\\n        }\\n\\n        // ok, if NFT owner== true and dataFeed doesn't exist , time to make new dataFeed\\n        if (NFT && poolExist) {\\n            PoolAddresses[FeedID] = _ammPoolAddress;\\n            PoolAssetQuote[FeedID] = newTokenQuote;\\n            PoolAssetBase[FeedID] = newTokenBase;\\n            emit NewDataFeed(FeedID, _ammPoolAddress);\\n            _getAndUpdatePoolPrice(newTokenQuote, newTokenBase);\\n            FeedID++;\\n        }\\n\\n        // make pool\\n        address newPool;\\n        if (!poolExist && NFT) {\\n            newPool = IUniswapV2Factory(UNISWAP_V2_FACTORY).createPair(newTokenQuote, newTokenBase);\\n        }\\n        // make new datafeed with new pool address : Requested market didn't exist\\n        if (NFT && !poolExist) {\\n            PoolAddresses[FeedID] = newPool;\\n            PoolAssetQuote[FeedID] = newTokenQuote;\\n            PoolAssetBase[FeedID] = newTokenBase;\\n            emit NewDataFeed(FeedID, newPool);\\n            emit NewPool(poolLength + 1, newPool);\\n            _getAndUpdatePoolPrice(newTokenQuote, newTokenBase);\\n            FeedID++;\\n        }\\n\\n        FeedMaximum = IUniswapV2Factory(UNISWAP_V2_FACTORY).allPairsLength();\\n\\n        // created new amm pool if didn't exist\\n        // created new datafeed  object\\n        // updated FeedIDs and FeedMaximum\\n    }\\n\\n    function decimals(address _token) public view virtual returns (uint8) {\\n        return IERC20Metadata(address(_token)).decimals();\\n    }\\n\\n    function getPriceWithIndex(uint256 _dataFeedIndex) public view returns (uint256 _price) {\\n        require(_dataFeedIndex <= FeedID, \\\"AquasOracle: Missing FeedID\\\");\\n        _price = DataFeedPrice[_dataFeedIndex];\\n        return _price;\\n    }\\n\\n    function getPriceWithAddress(address _poolAddress) external view returns (uint256 _price) {\\n        for (uint256 i = 0; i <= FeedID; i++) {\\n            if (PoolAddresses[i] == _poolAddress) {\\n                return DataFeedPrice[i];\\n            }\\n        }\\n    }\\n\\n    function getPoolPriceWithIndex(uint256 _dataFeedIndex) public view returns (uint256 _price) {\\n        require(_dataFeedIndex <= FeedID, \\\"AquasOracle: Missing FeedID\\\");\\n        _price = PoolPrice[_dataFeedIndex];\\n        return _price;\\n    }\\n\\n    function getPoolPriceWithAddress(address _poolAddress) external view returns (uint256 _price) {\\n        for (uint256 i = 0; i <= FeedID; i++) {\\n            if (PoolAddresses[i] == _poolAddress) {\\n                return PoolPrice[i];\\n            }\\n        }\\n    }\\n\\n    function consumeFeed(uint256 _feedID) external view returns (Feed memory) {\\n        return Feeds[_feedID];\\n    }\\n\\n    function consumeFeeds() external view returns (Feed[] memory) {\\n        // _prices = new Feed[](FeedID);\\n        // for (uint256 i = 0; i <= FeedID; i++) {\\n        //     _prices[i] = Feeds[i];\\n        // }\\n        // return _prices;\\n\\n        // next try\\n        uint256 lengthFeed = FeedID - 1;\\n        Feed[] memory result = new Feed[](lengthFeed);\\n        for (uint256 i = 0; i <= lengthFeed; i++) {\\n            result[i] = Feeds[i];\\n        }\\n        return result;\\n    }\\n\\n    function updateFeed(uint256 _dataFeedIndex, uint256 _price) external onlyOwner {\\n        require(_dataFeedIndex <= FeedID, \\\"AquasOracle: Missing FeedID\\\");\\n        require(_price > 0, \\\"AquasOracle: Incorrect Input Price\\\");\\n        DataFeedPrice[_dataFeedIndex] = _price;\\n        _updatePoolFeed(_dataFeedIndex);\\n    }\\n\\n    function _updatePoolFeed(uint256 _dataFeedIndex) internal {\\n        _getAndUpdatePoolPrice(PoolAssetQuote[_dataFeedIndex], PoolAssetBase[_dataFeedIndex]);\\n        Feeds[_dataFeedIndex] = Feed({\\n            id: _dataFeedIndex,\\n            router: UNISWAP_V2_ROUTER,\\n            pool: PoolAddresses[_dataFeedIndex],\\n            quote: PoolAssetQuote[_dataFeedIndex],\\n            base: PoolAssetBase[_dataFeedIndex],\\n            priceFeed: getPriceWithIndex(_dataFeedIndex),\\n            pricePool: getPoolPriceWithIndex(_dataFeedIndex)\\n        });\\n    }\\n\\n    function _getAndUpdatePoolPrice(address _tokenQuote, address _tokenBase) internal {\\n        uint256 min = 1000;\\n        uint256 _amountIn = 1e18;\\n        uint8 decimalQuote = decimals(_tokenQuote);\\n        uint8 one = 1;\\n        uint8 ten = 10;\\n        require(decimalQuote > 0, \\\"AquasOracle: Missing TokenQuote Decimals\\\");\\n\\n        // todo bug\\n        if (decimalQuote != 18) {\\n            //   _amountIn = uint256(one * ten ** decimalQuote);// didn't work\\n            _amountIn = uint256(one) * uint256(ten) ** uint256(decimalQuote); // test\\n            //  _amountIn << one * ten ** decimalQuote;// test next\\n        }\\n        require(_amountIn >= min, \\\"AquasOracle: Missing TokenQuote Input Amounts\\\");\\n\\n        bool matched = false;\\n\\n        address pool = IUniswapV2Factory(UNISWAP_V2_FACTORY).getPair(_tokenQuote, _tokenBase);\\n\\n        uint256 found;\\n        for (uint256 i = 0; i <= FeedID; i++) {\\n            if (pool == PoolAddresses[i]) {\\n                matched = true;\\n                found = i;\\n            }\\n        }\\n\\n        if (matched) {\\n            // sell route : Selling 1 QUOTE asset and see how much asset Base is returned\\n            pathSell = new address[](2);\\n            pathSell[0] = _tokenQuote;\\n            pathSell[1] = _tokenBase;\\n\\n            // idea\\n            // amountIN is reduced 1000x and the output is increased 1000x (better price precision for btc and eth)\\n            uint256 reduceInputAmount = _amountIn.div(min);\\n\\n            if (reduceInputAmount > 0) {\\n                uint256[] memory amountOutMins = IUniswapV2Router02(UNISWAP_V2_ROUTER).getAmountsOut(\\n                    reduceInputAmount,\\n                    pathSell,\\n                    997\\n                );\\n                uint256 output = amountOutMins[pathSell.length - 1];\\n                output = output.mul(min);\\n                PoolPrice[found] = output;\\n            }\\n        }\\n        matched = false; // reentry\\n    }\\n}\\n\",\"keccak256\":\"0xa57cac36c24065d85696519cff6b5c05ab8fa06e8923ec593156f7d709b44270\",\"license\":\"MIT\"},\"contracts/token_mappings/AQUA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title Aqua Token\\n * @notice This version of the Aqua token is to be used on the SChain\\n * It features access control needed for the IMA TokenManager contract (bridging)\\n */\\ncontract AQUA is ERC20Capped, AccessControl {\\n    /// @notice Access control roles for the IMA TokenManager\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    /// @notice Total number of tokens\\n    uint256 public constant MAX_SUPPLY = 200_000_000e18; // 200 million\\n\\n    /// @notice The total amount of burned tokens\\n    uint256 public burnedAmount;\\n\\n    constructor() public ERC20(\\\"Aquas.Trade\\\", \\\"AQUA\\\") ERC20Capped(MAX_SUPPLY) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        grantRole(MINTER_ROLE, msg.sender);\\n        _mint(msg.sender, MAX_SUPPLY);\\n    }\\n\\n    /// @notice Creates `amount` token to `to`. Must only be called by the IMA TokenManager contract\\n    function mint(address to, uint256 amount) public {\\n        require(hasRole(MINTER_ROLE, msg.sender), \\\"AQUA::mint: Caller is not a minter\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /// @notice Destroys `amount` of AQUA tokens from the msg.sender.\\n    /// Must only be called by the IMA TokenManager contract\\n    function burn(uint256 amount) public virtual {\\n        require(hasRole(BURNER_ROLE, msg.sender), \\\"AQUA::burn: Caller is not a burner\\\");\\n        _burn(msg.sender, amount);\\n        burnedAmount += amount;\\n    }\\n}\\n\",\"keccak256\":\"0xd3bc25bf41ac9739d36b50112fef6c5c756d46b3a0d6b7e649a2ce6def9d5add\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620035123803806200351283398181016040528101906200003791906200029b565b6000620000496200026560201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600581905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663574f2ba36040518163ffffffff1660e01b815260040160206040518083038186803b1580156200021b57600080fd5b505afa15801562000230573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002569190620002f1565b6006819055505050506200038f565b600033905090565b6000815190506200027e816200035b565b92915050565b600081519050620002958162000375565b92915050565b600080600060608486031215620002b157600080fd5b6000620002c1868287016200026d565b9350506020620002d4868287016200026d565b9250506040620002e7868287016200026d565b9150509250925092565b6000602082840312156200030457600080fd5b6000620003148482850162000284565b91505092915050565b60006200032a8262000331565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b62000366816200031d565b81146200037257600080fd5b50565b620003808162000351565b81146200038c57600080fd5b50565b613173806200039f6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063b40d78f8116100b8578063d449a8321161007c578063d449a83214610381578063ee279a9d146103b1578063f2fde38b146103cd578063f367f13b146103e9578063fbdd392114610419578063ff9cf37f1461044957610142565b8063b40d78f8146102b1578063b56d451f146102e1578063b848880714610317578063be82c9c014610347578063c53989cb1461036357610142565b80635aff87711161010a5780635aff8771146101ff578063715018a61461022f5780638da5cb5b146102395780638e52e8101461025757806399d8fae314610275578063a82ed9ec1461029357610142565b80630b102d1a146101475780632cc057fe14610163578063310c87cc146101815780633512d97d1461019f5780635550139f146101cf575b600080fd5b610161600480360381019061015c91906124d3565b610479565b005b61016b6105a9565b6040516101789190612e24565b60405180910390f35b6101896105af565b6040516101969190612c48565b60405180910390f35b6101b960048036038101906101b491906124d3565b6105d5565b6040516101c69190612e24565b60405180910390f35b6101e960048036038101906101e491906125b5565b61067d565b6040516101f69190612c48565b60405180910390f35b610219600480360381019061021491906125b5565b6106b0565b6040516102269190612c48565b60405180910390f35b6102376106e3565b005b61024161081d565b60405161024e9190612c48565b60405180910390f35b61025f610846565b60405161026c9190612e24565b60405180910390f35b61027d61084c565b60405161028a9190612c48565b60405180910390f35b61029b610872565b6040516102a89190612c48565b60405180910390f35b6102cb60048036038101906102c691906125b5565b610898565b6040516102d89190612e24565b60405180910390f35b6102fb60048036038101906102f691906125b5565b6108fa565b60405161030e9796959493929190612e68565b60405180910390f35b610331600480360381019061032c91906124d3565b6109bc565b60405161033e9190612e24565b60405180910390f35b610361600480360381019061035c9190612525565b610a64565b005b61036b611289565b6040516103789190612ca7565b60405180910390f35b61039b600480360381019061039691906124d3565b6114b6565b6040516103a89190612f15565b60405180910390f35b6103cb60048036038101906103c69190612607565b61153d565b005b6103e760048036038101906103e291906124d3565b611666565b005b61040360048036038101906103fe91906125b5565b61180f565b6040516104109190612c48565b60405180910390f35b610433600480360381019061042e91906125b5565b611842565b6040516104409190612e24565b60405180910390f35b610463600480360381019061045e91906125b5565b6118a4565b6040516104709190612e09565b60405180910390f35b610481611a47565b73ffffffffffffffffffffffffffffffffffffffff1661049f61081d565b73ffffffffffffffffffffffffffffffffffffffff16146104f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ec90612d69565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055c90612d89565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60065481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600090505b6005548111610676578273ffffffffffffffffffffffffffffffffffffffff166009600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610669576007600082815260200190815260200160002054915050610678565b80806001019150506105dd565b505b919050565b60096020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106eb611a47565b73ffffffffffffffffffffffffffffffffffffffff1661070961081d565b73ffffffffffffffffffffffffffffffffffffffff161461075f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075690612d69565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60055481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006005548211156108df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d690612cc9565b60405180910390fd5b60086000838152602001908152602001600020549050919050565b600c6020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060060154905087565b600080600090505b6005548111610a5d578273ffffffffffffffffffffffffffffffffffffffff166009600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610a50576008600082815260200190815260200160002054915050610a5f565b80806001019150506109c4565b505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ad4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acb90612dc9565b60405180910390fd5b60005b6005548111610b5a578373ffffffffffffffffffffffffffffffffffffffff166009600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b4d5750611284565b8080600101915050610ad7565b5060008073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c6b576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610c0f9190612c63565b60206040518083038186803b158015610c2757600080fd5b505afa158015610c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5f91906125de565b1115610c6a57600190505b5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663574f2ba36040518163ffffffff1660e01b815260040160206040518083038186803b158015610cd557600080fd5b505afa158015610ce9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0d91906125de565b90506000805b82811015610e11576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631e3dd18b836040518263ffffffff1660e01b8152600401610d789190612e24565b60206040518083038186803b158015610d9057600080fd5b505afa158015610da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc891906124fc565b90508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415610e0357600192505b508080600101915050610d13565b50828015610e1c5750805b15610f75578560096000600554815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600a6000600554815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600b6000600554815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3e3ad6de2cf564556d2eaf74710af8ca62efd7a8451a9a7a95e40a9ef4882ad060055487604051610f50929190612e3f565b60405180910390a1610f628585611a4f565b6005600081548092919060010191905055505b600081158015610f825750835b1561103957600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c9c6539687876040518363ffffffff1660e01b8152600401610fe4929190612c7e565b602060405180830381600087803b158015610ffe57600080fd5b505af1158015611012573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103691906124fc565b90505b838015611044575081155b156111d9578060096000600554815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600a6000600554815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600b6000600554815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3e3ad6de2cf564556d2eaf74710af8ca62efd7a8451a9a7a95e40a9ef4882ad060055482604051611178929190612e3f565b60405180910390a17fcfdb757a17c7073437a01260a6760f5026efd70c96fb9a3f54d03c6ed2c372c360018401826040516111b4929190612e3f565b60405180910390a16111c68686611a4f565b6005600081548092919060010191905055505b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663574f2ba36040518163ffffffff1660e01b815260040160206040518083038186803b15801561124157600080fd5b505afa158015611255573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127991906125de565b600681905550505050505b505050565b60606000600160055403905060608167ffffffffffffffff811180156112ae57600080fd5b506040519080825280602002602001820160405280156112e857816020015b6112d561228d565b8152602001906001900390816112cd5790505b50905060005b8281116114ad57600c60008281526020019081526020016000206040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820154815260200160068201548152505082828151811061149557fe5b602002602001018190525080806001019150506112ee565b50809250505090565b60008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156114fe57600080fd5b505afa158015611512573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115369190612643565b9050919050565b611545611a47565b73ffffffffffffffffffffffffffffffffffffffff1661156361081d565b73ffffffffffffffffffffffffffffffffffffffff16146115b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b090612d69565b60405180910390fd5b6005548211156115fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f590612cc9565b60405180910390fd5b60008111611641576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163890612d29565b60405180910390fd5b80600760008481526020019081526020016000208190555061166282611eae565b5050565b61166e611a47565b73ffffffffffffffffffffffffffffffffffffffff1661168c61081d565b73ffffffffffffffffffffffffffffffffffffffff16146116e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d990612d69565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611752576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174990612ce9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600a6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600554821115611889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188090612cc9565b60405180910390fd5b60076000838152602001908152602001600020549050919050565b6118ac61228d565b600c60008381526020019081526020016000206040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820154815250509050919050565b600033905090565b60006103e890506000670de0b6b3a764000090506000611a6e856114b6565b90506000600190506000600a905060008360ff1611611ac2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab990612de9565b60405180910390fd5b60128360ff1614611ade578260ff168160ff160a8260ff160293505b84841015611b21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1890612da9565b60405180910390fd5b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a439058a8a6040518363ffffffff1660e01b8152600401611b81929190612c7e565b60206040518083038186803b158015611b9957600080fd5b505afa158015611bad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd191906124fc565b9050600080600090505b6005548111611c60576009600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611c5357600193508091505b8080600101915050611bdb565b508215611e9e57600267ffffffffffffffff81118015611c7f57600080fd5b50604051908082528060200260200182016040528015611cae5781602001602082028036833780820191505090505b5060019080519060200190611cc4929190612322565b50896001600081548110611cd457fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508860018081548110611d2a57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000611d8789896121c790919063ffffffff16565b90506000811115611e9c576060600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634955796c8360016103e56040518463ffffffff1660e01b8152600401611df693929190612ed7565b60006040518083038186803b158015611e0e57600080fd5b505afa158015611e22573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611e4b9190612574565b9050600081600180805490500381518110611e6257fe5b60200260200101519050611e7f8b8261221d90919063ffffffff16565b905080600860008681526020019081526020016000208190555050505b505b6000925050505050505050505050565b611f1e600a600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611a4f565b6040518060e00160405280828152602001600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016009600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600a600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200161206383611842565b815260200161207183610898565b815250600c60008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c0820151816006015590505050565b600080821161220b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220290612d09565b60405180910390fd5b81838161221457fe5b04905092915050565b6000808314156122305760009050612287565b600082840290508284828161224157fe5b0414612282576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227990612d49565b60405180910390fd5b809150505b92915050565b6040518060e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b82805482825590600052602060002090810192821561239b579160200282015b8281111561239a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612342565b5b5090506123a891906123ac565b5090565b5b808211156123e357600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055506001016123ad565b5090565b6000813590506123f6816130f8565b92915050565b60008151905061240b816130f8565b92915050565b600082601f83011261242257600080fd5b815161243561243082612f5d565b612f30565b9150818183526020840193506020810190508385602084028201111561245a57600080fd5b60005b8381101561248a578161247088826124a9565b84526020840193506020830192505060018101905061245d565b5050505092915050565b6000813590506124a38161310f565b92915050565b6000815190506124b88161310f565b92915050565b6000815190506124cd81613126565b92915050565b6000602082840312156124e557600080fd5b60006124f3848285016123e7565b91505092915050565b60006020828403121561250e57600080fd5b600061251c848285016123fc565b91505092915050565b60008060006060848603121561253a57600080fd5b6000612548868287016123e7565b9350506020612559868287016123e7565b925050604061256a868287016123e7565b9150509250925092565b60006020828403121561258657600080fd5b600082015167ffffffffffffffff8111156125a057600080fd5b6125ac84828501612411565b91505092915050565b6000602082840312156125c757600080fd5b60006125d584828501612494565b91505092915050565b6000602082840312156125f057600080fd5b60006125fe848285016124a9565b91505092915050565b6000806040838503121561261a57600080fd5b600061262885828601612494565b925050602061263985828601612494565b9150509250929050565b60006020828403121561265557600080fd5b6000612663848285016124be565b91505092915050565b600061267883836126ab565b60208301905092915050565b60006126908383612aff565b60e08301905092915050565b6126a581613076565b82525050565b6126b48161302d565b82525050565b6126c38161302d565b82525050565b60006126d482612faa565b6126de8185612fda565b93506126e983612f85565b8060005b83811015612721576126fe826130d8565b612708888261266c565b975061271383612fc0565b9250506001810190506126ed565b5085935050505092915050565b600061273982612fb5565b6127438185612feb565b935061274e83612f9a565b8060005b8381101561277f5781516127668882612684565b975061277183612fcd565b925050600181019050612752565b5085935050505092915050565b61279581613088565b82525050565b60006127a8601b83612ffc565b91507f41717561734f7261636c653a204d697373696e672046656564494400000000006000830152602082019050919050565b60006127e8602683612ffc565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061284e601a83612ffc565b91507f536166654d6174683a206469766973696f6e206279207a65726f0000000000006000830152602082019050919050565b600061288e602283612ffc565b91507f41717561734f7261636c653a20496e636f727265637420496e7075742050726960008301527f63650000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006128f4602183612ffc565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061295a602083612ffc565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600061299a601b83612ffc565b91507f41717561734f7261636c653a206e65774e4654204164647265737300000000006000830152602082019050919050565b60006129da602d83612ffc565b91507f41717561734f7261636c653a204d697373696e6720546f6b656e51756f74652060008301527f496e70757420416d6f756e7473000000000000000000000000000000000000006020830152604082019050919050565b6000612a40602a83612ffc565b91507f41717561734f7261636c653a205265717569726573204e65772044617461466560008301527f65642041646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b6000612aa6602883612ffc565b91507f41717561734f7261636c653a204d697373696e6720546f6b656e51756f74652060008301527f446563696d616c730000000000000000000000000000000000000000000000006020830152604082019050919050565b60e082016000820151612b156000850182612c1b565b506020820151612b2860208501826126ab565b506040820151612b3b60408501826126ab565b506060820151612b4e60608501826126ab565b506080820151612b6160808501826126ab565b5060a0820151612b7460a0850182612c1b565b5060c0820151612b8760c0850182612c1b565b50505050565b60e082016000820151612ba36000850182612c1b565b506020820151612bb660208501826126ab565b506040820151612bc960408501826126ab565b506060820151612bdc60608501826126ab565b506080820151612bef60808501826126ab565b5060a0820151612c0260a0850182612c1b565b5060c0820151612c1560c0850182612c1b565b50505050565b612c248161305f565b82525050565b612c338161305f565b82525050565b612c4281613069565b82525050565b6000602082019050612c5d60008301846126ba565b92915050565b6000602082019050612c78600083018461269c565b92915050565b6000604082019050612c9360008301856126ba565b612ca060208301846126ba565b9392505050565b60006020820190508181036000830152612cc1818461272e565b905092915050565b60006020820190508181036000830152612ce28161279b565b9050919050565b60006020820190508181036000830152612d02816127db565b9050919050565b60006020820190508181036000830152612d2281612841565b9050919050565b60006020820190508181036000830152612d4281612881565b9050919050565b60006020820190508181036000830152612d62816128e7565b9050919050565b60006020820190508181036000830152612d828161294d565b9050919050565b60006020820190508181036000830152612da28161298d565b9050919050565b60006020820190508181036000830152612dc2816129cd565b9050919050565b60006020820190508181036000830152612de281612a33565b9050919050565b60006020820190508181036000830152612e0281612a99565b9050919050565b600060e082019050612e1e6000830184612b8d565b92915050565b6000602082019050612e396000830184612c2a565b92915050565b6000604082019050612e546000830185612c2a565b612e6160208301846126ba565b9392505050565b600060e082019050612e7d600083018a612c2a565b612e8a60208301896126ba565b612e9760408301886126ba565b612ea460608301876126ba565b612eb160808301866126ba565b612ebe60a0830185612c2a565b612ecb60c0830184612c2a565b98975050505050505050565b6000606082019050612eec6000830186612c2a565b8181036020830152612efe81856126c9565b9050612f0d604083018461278c565b949350505050565b6000602082019050612f2a6000830184612c39565b92915050565b6000604051905081810181811067ffffffffffffffff82111715612f5357600080fd5b8060405250919050565b600067ffffffffffffffff821115612f7457600080fd5b602082029050602081019050919050565b60008190508160005260206000209050919050565b6000819050602082019050919050565b600081549050919050565b600081519050919050565b6000600182019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006130388261303f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006130818261309a565b9050919050565b60006130938261305f565b9050919050565b60006130a5826130ac565b9050919050565b60006130b78261303f565b9050919050565b60006130d16130cc836130eb565b61300d565b9050919050565b60006130e482546130be565b9050919050565b60008160001c9050919050565b6131018161302d565b811461310c57600080fd5b50565b6131188161305f565b811461312357600080fd5b50565b61312f81613069565b811461313a57600080fd5b5056fea264697066735822122003a5d5fe70df956788ae170de8c1d78fb76f02a808f3843e7697159332df029864736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c8063b40d78f8116100b8578063d449a8321161007c578063d449a83214610381578063ee279a9d146103b1578063f2fde38b146103cd578063f367f13b146103e9578063fbdd392114610419578063ff9cf37f1461044957610142565b8063b40d78f8146102b1578063b56d451f146102e1578063b848880714610317578063be82c9c014610347578063c53989cb1461036357610142565b80635aff87711161010a5780635aff8771146101ff578063715018a61461022f5780638da5cb5b146102395780638e52e8101461025757806399d8fae314610275578063a82ed9ec1461029357610142565b80630b102d1a146101475780632cc057fe14610163578063310c87cc146101815780633512d97d1461019f5780635550139f146101cf575b600080fd5b610161600480360381019061015c91906124d3565b610479565b005b61016b6105a9565b6040516101789190612e24565b60405180910390f35b6101896105af565b6040516101969190612c48565b60405180910390f35b6101b960048036038101906101b491906124d3565b6105d5565b6040516101c69190612e24565b60405180910390f35b6101e960048036038101906101e491906125b5565b61067d565b6040516101f69190612c48565b60405180910390f35b610219600480360381019061021491906125b5565b6106b0565b6040516102269190612c48565b60405180910390f35b6102376106e3565b005b61024161081d565b60405161024e9190612c48565b60405180910390f35b61025f610846565b60405161026c9190612e24565b60405180910390f35b61027d61084c565b60405161028a9190612c48565b60405180910390f35b61029b610872565b6040516102a89190612c48565b60405180910390f35b6102cb60048036038101906102c691906125b5565b610898565b6040516102d89190612e24565b60405180910390f35b6102fb60048036038101906102f691906125b5565b6108fa565b60405161030e9796959493929190612e68565b60405180910390f35b610331600480360381019061032c91906124d3565b6109bc565b60405161033e9190612e24565b60405180910390f35b610361600480360381019061035c9190612525565b610a64565b005b61036b611289565b6040516103789190612ca7565b60405180910390f35b61039b600480360381019061039691906124d3565b6114b6565b6040516103a89190612f15565b60405180910390f35b6103cb60048036038101906103c69190612607565b61153d565b005b6103e760048036038101906103e291906124d3565b611666565b005b61040360048036038101906103fe91906125b5565b61180f565b6040516104109190612c48565b60405180910390f35b610433600480360381019061042e91906125b5565b611842565b6040516104409190612e24565b60405180910390f35b610463600480360381019061045e91906125b5565b6118a4565b6040516104709190612e09565b60405180910390f35b610481611a47565b73ffffffffffffffffffffffffffffffffffffffff1661049f61081d565b73ffffffffffffffffffffffffffffffffffffffff16146104f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ec90612d69565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055c90612d89565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60065481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600090505b6005548111610676578273ffffffffffffffffffffffffffffffffffffffff166009600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610669576007600082815260200190815260200160002054915050610678565b80806001019150506105dd565b505b919050565b60096020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106eb611a47565b73ffffffffffffffffffffffffffffffffffffffff1661070961081d565b73ffffffffffffffffffffffffffffffffffffffff161461075f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075690612d69565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60055481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006005548211156108df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d690612cc9565b60405180910390fd5b60086000838152602001908152602001600020549050919050565b600c6020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060060154905087565b600080600090505b6005548111610a5d578273ffffffffffffffffffffffffffffffffffffffff166009600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610a50576008600082815260200190815260200160002054915050610a5f565b80806001019150506109c4565b505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ad4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acb90612dc9565b60405180910390fd5b60005b6005548111610b5a578373ffffffffffffffffffffffffffffffffffffffff166009600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b4d5750611284565b8080600101915050610ad7565b5060008073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c6b576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610c0f9190612c63565b60206040518083038186803b158015610c2757600080fd5b505afa158015610c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5f91906125de565b1115610c6a57600190505b5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663574f2ba36040518163ffffffff1660e01b815260040160206040518083038186803b158015610cd557600080fd5b505afa158015610ce9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0d91906125de565b90506000805b82811015610e11576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631e3dd18b836040518263ffffffff1660e01b8152600401610d789190612e24565b60206040518083038186803b158015610d9057600080fd5b505afa158015610da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc891906124fc565b90508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415610e0357600192505b508080600101915050610d13565b50828015610e1c5750805b15610f75578560096000600554815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600a6000600554815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600b6000600554815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3e3ad6de2cf564556d2eaf74710af8ca62efd7a8451a9a7a95e40a9ef4882ad060055487604051610f50929190612e3f565b60405180910390a1610f628585611a4f565b6005600081548092919060010191905055505b600081158015610f825750835b1561103957600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c9c6539687876040518363ffffffff1660e01b8152600401610fe4929190612c7e565b602060405180830381600087803b158015610ffe57600080fd5b505af1158015611012573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103691906124fc565b90505b838015611044575081155b156111d9578060096000600554815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600a6000600554815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600b6000600554815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3e3ad6de2cf564556d2eaf74710af8ca62efd7a8451a9a7a95e40a9ef4882ad060055482604051611178929190612e3f565b60405180910390a17fcfdb757a17c7073437a01260a6760f5026efd70c96fb9a3f54d03c6ed2c372c360018401826040516111b4929190612e3f565b60405180910390a16111c68686611a4f565b6005600081548092919060010191905055505b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663574f2ba36040518163ffffffff1660e01b815260040160206040518083038186803b15801561124157600080fd5b505afa158015611255573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127991906125de565b600681905550505050505b505050565b60606000600160055403905060608167ffffffffffffffff811180156112ae57600080fd5b506040519080825280602002602001820160405280156112e857816020015b6112d561228d565b8152602001906001900390816112cd5790505b50905060005b8281116114ad57600c60008281526020019081526020016000206040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820154815260200160068201548152505082828151811061149557fe5b602002602001018190525080806001019150506112ee565b50809250505090565b60008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156114fe57600080fd5b505afa158015611512573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115369190612643565b9050919050565b611545611a47565b73ffffffffffffffffffffffffffffffffffffffff1661156361081d565b73ffffffffffffffffffffffffffffffffffffffff16146115b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b090612d69565b60405180910390fd5b6005548211156115fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f590612cc9565b60405180910390fd5b60008111611641576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163890612d29565b60405180910390fd5b80600760008481526020019081526020016000208190555061166282611eae565b5050565b61166e611a47565b73ffffffffffffffffffffffffffffffffffffffff1661168c61081d565b73ffffffffffffffffffffffffffffffffffffffff16146116e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d990612d69565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611752576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174990612ce9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600a6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600554821115611889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188090612cc9565b60405180910390fd5b60076000838152602001908152602001600020549050919050565b6118ac61228d565b600c60008381526020019081526020016000206040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820154815250509050919050565b600033905090565b60006103e890506000670de0b6b3a764000090506000611a6e856114b6565b90506000600190506000600a905060008360ff1611611ac2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab990612de9565b60405180910390fd5b60128360ff1614611ade578260ff168160ff160a8260ff160293505b84841015611b21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1890612da9565b60405180910390fd5b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a439058a8a6040518363ffffffff1660e01b8152600401611b81929190612c7e565b60206040518083038186803b158015611b9957600080fd5b505afa158015611bad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd191906124fc565b9050600080600090505b6005548111611c60576009600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611c5357600193508091505b8080600101915050611bdb565b508215611e9e57600267ffffffffffffffff81118015611c7f57600080fd5b50604051908082528060200260200182016040528015611cae5781602001602082028036833780820191505090505b5060019080519060200190611cc4929190612322565b50896001600081548110611cd457fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508860018081548110611d2a57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000611d8789896121c790919063ffffffff16565b90506000811115611e9c576060600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634955796c8360016103e56040518463ffffffff1660e01b8152600401611df693929190612ed7565b60006040518083038186803b158015611e0e57600080fd5b505afa158015611e22573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611e4b9190612574565b9050600081600180805490500381518110611e6257fe5b60200260200101519050611e7f8b8261221d90919063ffffffff16565b905080600860008681526020019081526020016000208190555050505b505b6000925050505050505050505050565b611f1e600a600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611a4f565b6040518060e00160405280828152602001600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016009600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600a600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200161206383611842565b815260200161207183610898565b815250600c60008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c0820151816006015590505050565b600080821161220b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220290612d09565b60405180910390fd5b81838161221457fe5b04905092915050565b6000808314156122305760009050612287565b600082840290508284828161224157fe5b0414612282576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227990612d49565b60405180910390fd5b809150505b92915050565b6040518060e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b82805482825590600052602060002090810192821561239b579160200282015b8281111561239a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612342565b5b5090506123a891906123ac565b5090565b5b808211156123e357600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055506001016123ad565b5090565b6000813590506123f6816130f8565b92915050565b60008151905061240b816130f8565b92915050565b600082601f83011261242257600080fd5b815161243561243082612f5d565b612f30565b9150818183526020840193506020810190508385602084028201111561245a57600080fd5b60005b8381101561248a578161247088826124a9565b84526020840193506020830192505060018101905061245d565b5050505092915050565b6000813590506124a38161310f565b92915050565b6000815190506124b88161310f565b92915050565b6000815190506124cd81613126565b92915050565b6000602082840312156124e557600080fd5b60006124f3848285016123e7565b91505092915050565b60006020828403121561250e57600080fd5b600061251c848285016123fc565b91505092915050565b60008060006060848603121561253a57600080fd5b6000612548868287016123e7565b9350506020612559868287016123e7565b925050604061256a868287016123e7565b9150509250925092565b60006020828403121561258657600080fd5b600082015167ffffffffffffffff8111156125a057600080fd5b6125ac84828501612411565b91505092915050565b6000602082840312156125c757600080fd5b60006125d584828501612494565b91505092915050565b6000602082840312156125f057600080fd5b60006125fe848285016124a9565b91505092915050565b6000806040838503121561261a57600080fd5b600061262885828601612494565b925050602061263985828601612494565b9150509250929050565b60006020828403121561265557600080fd5b6000612663848285016124be565b91505092915050565b600061267883836126ab565b60208301905092915050565b60006126908383612aff565b60e08301905092915050565b6126a581613076565b82525050565b6126b48161302d565b82525050565b6126c38161302d565b82525050565b60006126d482612faa565b6126de8185612fda565b93506126e983612f85565b8060005b83811015612721576126fe826130d8565b612708888261266c565b975061271383612fc0565b9250506001810190506126ed565b5085935050505092915050565b600061273982612fb5565b6127438185612feb565b935061274e83612f9a565b8060005b8381101561277f5781516127668882612684565b975061277183612fcd565b925050600181019050612752565b5085935050505092915050565b61279581613088565b82525050565b60006127a8601b83612ffc565b91507f41717561734f7261636c653a204d697373696e672046656564494400000000006000830152602082019050919050565b60006127e8602683612ffc565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061284e601a83612ffc565b91507f536166654d6174683a206469766973696f6e206279207a65726f0000000000006000830152602082019050919050565b600061288e602283612ffc565b91507f41717561734f7261636c653a20496e636f727265637420496e7075742050726960008301527f63650000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006128f4602183612ffc565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061295a602083612ffc565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600061299a601b83612ffc565b91507f41717561734f7261636c653a206e65774e4654204164647265737300000000006000830152602082019050919050565b60006129da602d83612ffc565b91507f41717561734f7261636c653a204d697373696e6720546f6b656e51756f74652060008301527f496e70757420416d6f756e7473000000000000000000000000000000000000006020830152604082019050919050565b6000612a40602a83612ffc565b91507f41717561734f7261636c653a205265717569726573204e65772044617461466560008301527f65642041646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b6000612aa6602883612ffc565b91507f41717561734f7261636c653a204d697373696e6720546f6b656e51756f74652060008301527f446563696d616c730000000000000000000000000000000000000000000000006020830152604082019050919050565b60e082016000820151612b156000850182612c1b565b506020820151612b2860208501826126ab565b506040820151612b3b60408501826126ab565b506060820151612b4e60608501826126ab565b506080820151612b6160808501826126ab565b5060a0820151612b7460a0850182612c1b565b5060c0820151612b8760c0850182612c1b565b50505050565b60e082016000820151612ba36000850182612c1b565b506020820151612bb660208501826126ab565b506040820151612bc960408501826126ab565b506060820151612bdc60608501826126ab565b506080820151612bef60808501826126ab565b5060a0820151612c0260a0850182612c1b565b5060c0820151612c1560c0850182612c1b565b50505050565b612c248161305f565b82525050565b612c338161305f565b82525050565b612c4281613069565b82525050565b6000602082019050612c5d60008301846126ba565b92915050565b6000602082019050612c78600083018461269c565b92915050565b6000604082019050612c9360008301856126ba565b612ca060208301846126ba565b9392505050565b60006020820190508181036000830152612cc1818461272e565b905092915050565b60006020820190508181036000830152612ce28161279b565b9050919050565b60006020820190508181036000830152612d02816127db565b9050919050565b60006020820190508181036000830152612d2281612841565b9050919050565b60006020820190508181036000830152612d4281612881565b9050919050565b60006020820190508181036000830152612d62816128e7565b9050919050565b60006020820190508181036000830152612d828161294d565b9050919050565b60006020820190508181036000830152612da28161298d565b9050919050565b60006020820190508181036000830152612dc2816129cd565b9050919050565b60006020820190508181036000830152612de281612a33565b9050919050565b60006020820190508181036000830152612e0281612a99565b9050919050565b600060e082019050612e1e6000830184612b8d565b92915050565b6000602082019050612e396000830184612c2a565b92915050565b6000604082019050612e546000830185612c2a565b612e6160208301846126ba565b9392505050565b600060e082019050612e7d600083018a612c2a565b612e8a60208301896126ba565b612e9760408301886126ba565b612ea460608301876126ba565b612eb160808301866126ba565b612ebe60a0830185612c2a565b612ecb60c0830184612c2a565b98975050505050505050565b6000606082019050612eec6000830186612c2a565b8181036020830152612efe81856126c9565b9050612f0d604083018461278c565b949350505050565b6000602082019050612f2a6000830184612c39565b92915050565b6000604051905081810181811067ffffffffffffffff82111715612f5357600080fd5b8060405250919050565b600067ffffffffffffffff821115612f7457600080fd5b602082029050602081019050919050565b60008190508160005260206000209050919050565b6000819050602082019050919050565b600081549050919050565b600081519050919050565b6000600182019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006130388261303f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006130818261309a565b9050919050565b60006130938261305f565b9050919050565b60006130a5826130ac565b9050919050565b60006130b78261303f565b9050919050565b60006130d16130cc836130eb565b61300d565b9050919050565b60006130e482546130be565b9050919050565b60008160001c9050919050565b6131018161302d565b811461310c57600080fd5b50565b6131188161305f565b811461312357600080fd5b50565b61312f81613069565b811461313a57600080fd5b5056fea264697066735822122003a5d5fe70df956788ae170de8c1d78fb76f02a808f3843e7697159332df029864736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3523,
        "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 22890,
        "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
        "label": "pathSell",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 22898,
        "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
        "label": "NFTAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 22900,
        "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
        "label": "UNISWAP_V2_ROUTER",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 22902,
        "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
        "label": "UNISWAP_V2_FACTORY",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 22904,
        "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
        "label": "FeedID",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 22906,
        "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
        "label": "FeedMaximum",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 22910,
        "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
        "label": "DataFeedPrice",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 22914,
        "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
        "label": "PoolPrice",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 22918,
        "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
        "label": "PoolAddresses",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 22922,
        "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
        "label": "PoolAssetQuote",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 22926,
        "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
        "label": "PoolAssetBase",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 22957,
        "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
        "label": "Feeds",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(Feed)22953_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Feed)22953_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AquasOracle.Feed)",
        "numberOfBytes": "32",
        "value": "t_struct(Feed)22953_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Feed)22953_storage": {
        "encoding": "inplace",
        "label": "struct AquasOracle.Feed",
        "members": [
          {
            "astId": 22940,
            "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 22942,
            "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
            "label": "router",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 22944,
            "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
            "label": "pool",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 22946,
            "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
            "label": "quote",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 22948,
            "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
            "label": "base",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 22950,
            "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
            "label": "priceFeed",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 22952,
            "contract": "contracts/oracle/AquasOracle.sol:AquasOracle",
            "label": "pricePool",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
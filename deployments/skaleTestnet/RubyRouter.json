{
  "address": "0x699D09C9B1E33518eC3715F30ac696C59a2d34c8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSwapHops",
          "type": "uint256"
        }
      ],
      "name": "MaxSwapHopsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ISwap",
          "name": "stablePool",
          "type": "address"
        }
      ],
      "name": "StablePoolDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ISwap",
          "name": "stablePool",
          "type": "address"
        }
      ],
      "name": "StablePoolEnabled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ammRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "stablePool",
          "type": "address"
        }
      ],
      "name": "disableStablePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "stablePool",
          "type": "address"
        }
      ],
      "name": "enableStablePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "",
          "type": "address"
        }
      ],
      "name": "enabledStablePools",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "ammRouter_",
          "type": "address"
        },
        {
          "internalType": "contract ISwap",
          "name": "stablePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxSwapHops_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxSwapHops",
          "type": "uint256"
        }
      ],
      "name": "setMaxHops",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AMMSwapType",
                  "name": "swapType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amountIn",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountOut",
                  "type": "uint256"
                },
                {
                  "internalType": "address[]",
                  "name": "path",
                  "type": "address[]"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AMMSwapDetails[]",
              "name": "ammSwaps",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "stablePool",
                  "type": "address"
                },
                {
                  "internalType": "uint8",
                  "name": "tokenIndexFrom",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "tokenIndexTo",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "dx",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minDy",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StableSwapDetails[]",
              "name": "stableSwaps",
              "type": "tuple[]"
            },
            {
              "internalType": "enum SwapType[]",
              "name": "order",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct SwapDetails",
          "name": "swapDetails",
          "type": "tuple"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x986dd92cfce3bb94185e89c48655a7f554b72c00f00981695a08c2ade3394612",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0xF63Bb14E7E9bD2882957129c3E3197E6D18933B4",
    "contractAddress": "0x699D09C9B1E33518eC3715F30ac696C59a2d34c8",
    "transactionIndex": 0,
    "gasUsed": "2354924",
    "logsBloom": "0x
    "blockHash": "0xf3efd7e2f51813b8cf56fab2745ad29f12e029a56d313d2dc5c2a9567cfb43e9",
    "transactionHash": "0x986dd92cfce3bb94185e89c48655a7f554b72c00f00981695a08c2ade3394612",
    "logs": [],
    "blockNumber": 1466948,
    "cumulativeGasUsed": "2354924",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8b75ed266f40e6abf4518ee2f1992b99",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSwapHops\",\"type\":\"uint256\"}],\"name\":\"MaxSwapHopsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISwap\",\"name\":\"stablePool\",\"type\":\"address\"}],\"name\":\"StablePoolDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISwap\",\"name\":\"stablePool\",\"type\":\"address\"}],\"name\":\"StablePoolEnabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ammRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"stablePool\",\"type\":\"address\"}],\"name\":\"disableStablePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"stablePool\",\"type\":\"address\"}],\"name\":\"enableStablePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enabledStablePools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"ammRouter_\",\"type\":\"address\"},{\"internalType\":\"contract ISwap\",\"name\":\"stablePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSwapHops_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSwapHops\",\"type\":\"uint256\"}],\"name\":\"setMaxHops\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AMMSwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct AMMSwapDetails[]\",\"name\":\"ammSwaps\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"stablePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct StableSwapDetails[]\",\"name\":\"stableSwaps\",\"type\":\"tuple[]\"},{\"internalType\":\"enum SwapType[]\",\"name\":\"order\",\"type\":\"uint8[]\"}],\"internalType\":\"struct SwapDetails\",\"name\":\"swapDetails\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ruby_router/RubyRouter.sol\":\"RubyRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/amm/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xae7978d650c89cdbfbe13a0ea9b97d22a1382d385ee4e15a3619e88998ce27f3\",\"license\":\"GPL-3.0\"},\"contracts/amm/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n  \\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n   \\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n   \\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    \\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8ec82c8ee656819724d41742dd00f257e47d883c4956803f95a6a0bbfb523e30\",\"license\":\"GPL-3.0\"},\"contracts/amm/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.2;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    \\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n}\\n\",\"keccak256\":\"0x17da2e6df76ba1146d2dd24726b02876c99959e1a54b17821be87361eb74d67f\",\"license\":\"GPL-3.0\"},\"contracts/amm/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathUniswap {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x74e9a209f55cb2930a84eeec3df3bba635abefc49a2a9b5e1c398a07c8ec15e1\",\"license\":\"GPL-3.0\"},\"contracts/amm/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x24cf55605ab9aa3b0b949e9cb495e1f9eb566d3da1e97d22d4107ef5a165a247\",\"license\":\"GPL-3.0\"},\"contracts/amm/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMathUniswap for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"a0f80de0dc21d1d892ac8c8c804bb2945a43ec20fbd363e94272c4db65343f20\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6a2d920d19230dd112ff96912c35a3cbb8eda8070bcb583927a33437f422e2f9\",\"license\":\"GPL-3.0\"},\"contracts/ruby_router/RoutingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nenum SwapType {\\n    AMM,\\n    STABLE_POOL\\n}\\n\\nenum AMMSwapType {\\n    EXACT_TOKENS_FOR_TOKENS,\\n    TOKENS_FOR_EXACT_TOKENS\\n}\\n\\nstruct AMMSwapDetails {\\n    AMMSwapType swapType;\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    address[] path;\\n    address to;\\n    uint256 deadline;\\n}\\n\\nstruct StableSwapDetails {\\n    address stablePool;\\n    uint8 tokenIndexFrom;\\n    uint8 tokenIndexTo;\\n    uint256 dx;\\n    uint256 minDy;\\n    uint256 deadline;\\n}\\n\\nstruct SwapDetails {\\n    AMMSwapDetails[] ammSwaps;\\n    StableSwapDetails[] stableSwaps;\\n    SwapType[] order;\\n}\\n\",\"keccak256\":\"0x1f8d5f2711c8a22aff4d4ea7887d0dffd708f1a7e38cd570c3bf11bc20eb93a6\",\"license\":\"MIT\"},\"contracts/ruby_router/RubyRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../amm/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../amm/libraries/TransferHelper.sol\\\";\\nimport \\\"../amm/libraries/UniswapV2Library.sol\\\";\\nimport \\\"../stable_swap/interfaces/ISwap.sol\\\";\\n\\n\\nimport { SwapType, AMMSwapType, AMMSwapDetails, StableSwapDetails, SwapDetails } from \\\"./RoutingUtils.sol\\\";\\n\\ncontract RubyRouter is OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    IUniswapV2Router02 public ammRouter;\\n    mapping(ISwap => bool) public enabledStablePools;\\n\\n    // Should be set to 3 with a single stable pool.\\n    // Set as a variable for future upgradeability\\n    uint256 private _maxSwapHops;\\n\\n    /*** EVENTS ***/\\n    event StablePoolEnabled(ISwap indexed stablePool);\\n\\n    event StablePoolDisabled(ISwap indexed stablePool);\\n\\n    event MaxSwapHopsSet(uint256 maxSwapHops);\\n\\n    function initialize(\\n        IUniswapV2Router02 ammRouter_,\\n        ISwap stablePool,\\n        uint256 maxSwapHops_\\n    ) public initializer {\\n        __Ownable_init();\\n        require(address(ammRouter_) != address(0), \\\"RubyRouter: Invalid AMM router address address.\\\");\\n        require(address(stablePool) != address(0), \\\"RubyRouter: Invalid Stable Pool address.\\\");\\n        require(maxSwapHops_ != 0, \\\"RubyRouter: Invalid max swap hops.\\\");\\n        ammRouter = ammRouter_;\\n        enableStablePool(stablePool);\\n        enabledStablePools[stablePool] = true;\\n        _maxSwapHops = maxSwapHops_;\\n    }\\n\\n    function swap(SwapDetails calldata swapDetails) public returns (uint256 outputAmount) {\\n        require(swapDetails.order.length <= _maxSwapHops, \\\"Invalid number of swap calls\\\");\\n        _handleInputToken(swapDetails);\\n\\n        uint256 ammSwapIndex = 0;\\n        uint256 stableSwapIndex = 0;\\n        for (uint256 i = 0; i < swapDetails.order.length; i++) {\\n            require(\\n                swapDetails.order[i] == SwapType.AMM || swapDetails.order[i] == SwapType.STABLE_POOL,\\n                \\\"RubyRouter: Invalid swap type\\\"\\n            );\\n\\n            if (swapDetails.order[i] == SwapType.AMM) {\\n                outputAmount = _swapAmm(swapDetails.ammSwaps[ammSwapIndex]);\\n                ammSwapIndex++;\\n            } else {\\n                outputAmount = _swapStablePool(swapDetails.stableSwaps[stableSwapIndex]);\\n                stableSwapIndex++;\\n            }\\n        }\\n\\n        _handleOutputToken(swapDetails, outputAmount);\\n    }\\n\\n    function _handleInputToken(SwapDetails calldata swapDetails) private {\\n        address tokenInAddr;\\n        uint256 amountIn;\\n\\n        if (swapDetails.order[0] == SwapType.AMM) {\\n            uint256[] memory amounts;\\n            if (swapDetails.ammSwaps[0].swapType == AMMSwapType.EXACT_TOKENS_FOR_TOKENS) {\\n                amounts = UniswapV2Library.getAmountsOut(\\n                    ammRouter.factory(),\\n                    swapDetails.ammSwaps[0].amountIn,\\n                    swapDetails.ammSwaps[0].path\\n                );\\n            } else {\\n                amounts = UniswapV2Library.getAmountsIn(\\n                    ammRouter.factory(),\\n                    swapDetails.ammSwaps[0].amountOut,\\n                    swapDetails.ammSwaps[0].path\\n                );\\n            }\\n            tokenInAddr = swapDetails.ammSwaps[0].path[0];\\n            amountIn = amounts[0];\\n        } else {\\n            //StableSwap\\n            ISwap stablePool = ISwap(swapDetails.stableSwaps[0].stablePool);\\n            require(enabledStablePools[stablePool], \\\"RubyRouter: The stable pool is not enabled\\\");\\n            tokenInAddr = address(stablePool.getToken(swapDetails.stableSwaps[0].tokenIndexFrom));\\n            amountIn = swapDetails.stableSwaps[0].dx;\\n        }\\n\\n        IERC20 tokenIn = IERC20(tokenInAddr);\\n        tokenIn.safeTransferFrom(msg.sender, address(this), amountIn);\\n    }\\n\\n    // Transfers the output token back to the user\\n    function _handleOutputToken(SwapDetails calldata swapDetails, uint256 amountOut) private {\\n        address tokenOutAddr;\\n\\n        uint256 lastHopIndex = swapDetails.order.length - 1;\\n        if (swapDetails.order[lastHopIndex] == SwapType.AMM) {\\n            uint256 lastAmmSwapIndex = swapDetails.ammSwaps.length - 1;\\n            uint256 lastTokenIndex = swapDetails.ammSwaps[lastAmmSwapIndex].path.length - 1;\\n\\n            tokenOutAddr = swapDetails.ammSwaps[lastAmmSwapIndex].path[lastTokenIndex];\\n        } else {\\n            //StableSwap\\n            uint256 lastStableSwapIndex = swapDetails.stableSwaps.length - 1;\\n            ISwap stablePool = ISwap(swapDetails.stableSwaps[lastStableSwapIndex].stablePool);\\n            tokenOutAddr = address(stablePool.getToken(swapDetails.stableSwaps[lastStableSwapIndex].tokenIndexTo));\\n        }\\n\\n        IERC20 tokenOut = IERC20(tokenOutAddr);\\n        tokenOut.safeTransfer(msg.sender, amountOut);\\n    }\\n\\n    function _swapAmm(AMMSwapDetails calldata swapDetails) private returns (uint256 outputAmount) {\\n        require(\\n            swapDetails.swapType == AMMSwapType.EXACT_TOKENS_FOR_TOKENS ||\\n                swapDetails.swapType == AMMSwapType.TOKENS_FOR_EXACT_TOKENS,\\n            \\\"RubyRouter: Invalid AMM swap type\\\"\\n        );\\n        uint256[] memory outputAmounts;\\n\\n        _increaseTokenAllowance(swapDetails.path[0], address(ammRouter), swapDetails.amountIn);\\n\\n        if (swapDetails.swapType == AMMSwapType.EXACT_TOKENS_FOR_TOKENS) {\\n            outputAmounts = ammRouter.swapExactTokensForTokens(\\n                swapDetails.amountIn,\\n                swapDetails.amountOut,\\n                swapDetails.path,\\n                swapDetails.to,\\n                swapDetails.deadline\\n            );\\n        } else {\\n            outputAmounts = ammRouter.swapTokensForExactTokens(\\n                swapDetails.amountOut,\\n                swapDetails.amountIn,\\n                swapDetails.path,\\n                swapDetails.to,\\n                swapDetails.deadline\\n            );\\n        }\\n        outputAmount = outputAmounts[outputAmounts.length - 1];\\n    }\\n\\n    function _swapStablePool(StableSwapDetails calldata swapDetails) private returns (uint256 outputAmount) {\\n        ISwap stablePool = ISwap(swapDetails.stablePool);\\n        require(enabledStablePools[stablePool], \\\"RubyRouter: The stable pool is not enabled\\\");\\n\\n        address tokenAddress = address(stablePool.getToken(swapDetails.tokenIndexFrom));\\n        _increaseTokenAllowance(tokenAddress, swapDetails.stablePool, swapDetails.dx);\\n\\n        outputAmount = ISwap(swapDetails.stablePool).swap(\\n            swapDetails.tokenIndexFrom,\\n            swapDetails.tokenIndexTo,\\n            swapDetails.dx,\\n            swapDetails.minDy,\\n            swapDetails.deadline\\n        );\\n    }\\n\\n    function _increaseTokenAllowance(\\n        address token,\\n        address spender,\\n        uint256 amountIn\\n    ) private {\\n        IERC20 tokenIn = IERC20(token);\\n        uint256 tokenAllowance = tokenIn.allowance(address(this), spender);\\n        if (tokenAllowance < amountIn) {\\n            tokenIn.safeIncreaseAllowance(spender, amountIn);\\n        }\\n    }\\n\\n    function enableStablePool(ISwap stablePool) public onlyOwner {\\n        require(address(stablePool) != address(0), \\\"RubyRouter: The stablePool cannot be the zero address\\\");\\n        enabledStablePools[stablePool] = true;\\n        emit StablePoolEnabled(stablePool);\\n    }\\n\\n    function disableStablePool(ISwap stablePool) public onlyOwner {\\n        require(address(stablePool) != address(0), \\\"RubyRouter: The stablePool cannot be the zero address\\\");\\n        enabledStablePools[stablePool] = false;\\n        emit StablePoolDisabled(stablePool);\\n    }\\n\\n    function setMaxHops(uint256 maxSwapHops) public onlyOwner {\\n        require(maxSwapHops > 0, \\\"RubyRouter: Invalid max swap hops;\\\");\\n        _maxSwapHops = maxSwapHops;\\n    }\\n}\\n\",\"keccak256\":\"0x414412296ade314577afbc8a1115314f803cfadb882a789f4201501adaaa834a\",\"license\":\"MIT\"},\"contracts/stable_swap/interfaces/IAllowlist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IAllowlist {\\n    function getPoolAccountLimit(address poolAddress) external view returns (uint256);\\n\\n    function getPoolCap(address poolAddress) external view returns (uint256);\\n\\n    function verifyAddress(address account, bytes32[] calldata merkleProof) external returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f02d6ef4b19ce07451f0f326ae0aa28fb3d186713be3db14f6046108c413b6\",\"license\":\"MIT\"},\"contracts/stable_swap/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./IAllowlist.sol\\\";\\n\\ninterface ISwap {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getAllowlist() external view returns (IAllowlist);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function isGuarded() external view returns (bool);\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex)\\n        external\\n        view\\n        returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function initialize(\\n        IERC20[] memory pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 a,\\n        uint256 fee,\\n        uint256 adminFee,\\n        address lpTokenTargetAddress\\n    ) external;\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x775f738f43e9aeb243efb70363dcf14c821a3d2142bde196e71cd91f144c1674\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506129a2806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806390b3c4e71161006657806390b3c4e714610111578063a26f579614610119578063b8af6a5314610139578063c39b2e991461014c578063f2fde38b1461015f5761009e565b80631794bb3c146100a357806362ea3db2146100b8578063715018a6146100e15780637e29ca87146100e95780638da5cb5b146100fc575b600080fd5b6100b66100b1366004611e8c565b610172565b005b6100cb6100c6366004611ee8565b6102be565b6040516100d89190612754565b60405180910390f35b6100b661046f565b6100b66100f7366004611d9f565b6104f8565b6101046105a9565b6040516100d8919061205e565b6101046105b8565b61012c610127366004611d9f565b6105c7565b6040516100d891906120c9565b6100b6610147366004611f74565b6105dc565b6100b661015a366004611d9f565b610640565b6100b661016d366004611d9f565b6106ee565b600054610100900460ff168061018b575061018b6107af565b80610199575060005460ff16155b6101be5760405162461bcd60e51b81526004016101b5906124c3565b60405180910390fd5b600054610100900460ff161580156101e9576000805460ff1961ff0019909116610100171660011790555b6101f16107c0565b6001600160a01b0384166102175760405162461bcd60e51b81526004016101b5906123f7565b6001600160a01b03831661023d5760405162461bcd60e51b81526004016101b5906121b3565b8161025a5760405162461bcd60e51b81526004016101b590612370565b606580546001600160a01b0319166001600160a01b03861617905561027e836104f8565b6001600160a01b0383166000908152606660205260409020805460ff19166001179055606782905580156102b8576000805461ff00191690555b50505050565b6067546000906102d16040840184612850565b905011156102f15760405162461bcd60e51b81526004016101b590612646565b6102fa82610853565b60008060005b61030d6040860186612850565b905081101561045d5760006103256040870187612850565b8381811061032f57fe5b90506020020160208101906103449190611ecc565b600181111561034f57fe5b1480610391575060016103656040870187612850565b8381811061036f57fe5b90506020020160208101906103849190611ecc565b600181111561038f57fe5b145b6103ad5760405162461bcd60e51b81526004016101b590612136565b60006103bc6040870187612850565b838181106103c657fe5b90506020020160208101906103db9190611ecc565b60018111156103e657fe5b14156104275761041a6103f98680612850565b8581811061040357fe5b905060200281019061041591906128ad565b610cdb565b9350600190920191610455565b61044c6104376020870187612866565b8481811061044157fe5b905060c00201610f2e565b93506001909101905b600101610300565b5061046884846110e7565b5050919050565b610477611307565b6001600160a01b03166104886105a9565b6001600160a01b0316146104ae5760405162461bcd60e51b81526004016101b590612559565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b610500611307565b6001600160a01b03166105116105a9565b6001600160a01b0316146105375760405162461bcd60e51b81526004016101b590612559565b6001600160a01b03811661055d5760405162461bcd60e51b81526004016101b5906122ed565b6001600160a01b038116600081815260666020526040808220805460ff19166001179055517f763ba138b73b63a43de614b1d4efd85711b3240cdb9c79a0a6a67647a95c4a319190a250565b6033546001600160a01b031690565b6065546001600160a01b031681565b60666020526000908152604090205460ff1681565b6105e4611307565b6001600160a01b03166105f56105a9565b6001600160a01b03161461061b5760405162461bcd60e51b81526004016101b590612559565b6000811161063b5760405162461bcd60e51b81526004016101b590612712565b606755565b610648611307565b6001600160a01b03166106596105a9565b6001600160a01b03161461067f5760405162461bcd60e51b81526004016101b590612559565b6001600160a01b0381166106a55760405162461bcd60e51b81526004016101b5906122ed565b6001600160a01b038116600081815260666020526040808220805460ff19169055517f62825d4e3dc47438cdd2a3014131db621a70e653474b90da2dd00d8ddb90bfca9190a250565b6106f6611307565b6001600160a01b03166107076105a9565b6001600160a01b03161461072d5760405162461bcd60e51b81526004016101b590612559565b6001600160a01b0381166107535760405162461bcd60e51b81526004016101b59061216d565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60006107ba3061130b565b15905090565b600054610100900460ff16806107d957506107d96107af565b806107e7575060005460ff16155b6108035760405162461bcd60e51b81526004016101b5906124c3565b600054610100900460ff1615801561082e576000805460ff1961ff0019909116610100171660011790555b610836611311565b61083e611392565b8015610850576000805461ff00191690555b50565b600080806108646040850185612850565b600081811061086f57fe5b90506020020160208101906108849190611ecc565b600181111561088f57fe5b1415610b8757606060006108a38580612850565b60008181106108ae57fe5b90506020028101906108c091906128ad565b6108ce906020810190611ecc565b60018111156108d957fe5b14156109fb576065546040805163c45a015560e01b815290516109f4926001600160a01b03169163c45a0155916004808301926020929190829003018186803b15801561092557600080fd5b505afa158015610939573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095d9190611dbb565b6109678680612850565b600081811061097257fe5b905060200281019061098491906128ad565b602001356109928780612850565b600081811061099d57fe5b90506020028101906109af91906128ad565b6109bd906060810190612809565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061146c92505050565b9050610b13565b6065546040805163c45a015560e01b81529051610b10926001600160a01b03169163c45a0155916004808301926020929190829003018186803b158015610a4157600080fd5b505afa158015610a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a799190611dbb565b610a838680612850565b6000818110610a8e57fe5b9050602002810190610aa091906128ad565b60400135610aae8780612850565b6000818110610ab957fe5b9050602002810190610acb91906128ad565b610ad9906060810190612809565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061158392505050565b90505b610b1d8480612850565b6000818110610b2857fe5b9050602002810190610b3a91906128ad565b610b48906060810190612809565b6000818110610b5357fe5b9050602002016020810190610b689190611d9f565b925080600081518110610b7757fe5b6020026020010151915050610cc5565b6000610b966020850185612866565b6000818110610ba157fe5b610bb792602060c0909202019081019150611d9f565b6001600160a01b03811660009081526066602052604090205490915060ff16610bf25760405162461bcd60e51b81526004016101b59061258e565b6001600160a01b0381166382b86600610c0e6020870187612866565b6000818110610c1957fe5b905060c002016020016020810190610c319190611fa4565b6040518263ffffffff1660e01b8152600401610c4d91906127d0565b60206040518083038186803b158015610c6557600080fd5b505afa158015610c79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9d9190611dbb565b9250610cac6020850185612866565b6000818110610cb757fe5b905060c00201606001359150505b816102b86001600160a01b038216333085611686565b600080610ceb6020840184611ecc565b6001811115610cf657fe5b1480610d1957506001610d0c6020840184611ecc565b6001811115610d1757fe5b145b610d355760405162461bcd60e51b81526004016101b590612260565b6060610d7c610d4684830185612809565b6000818110610d5157fe5b9050602002016020810190610d669190611d9f565b6065546001600160a01b031660208601356116de565b6000610d8b6020850185611ecc565b6001811115610d9657fe5b1415610e57576065546001600160a01b03166338ed173960208501356040860135610dc46060880188612809565b610dd460a08a0160808b01611d9f565b8960a001356040518763ffffffff1660e01b8152600401610dfa9695949392919061275d565b600060405180830381600087803b158015610e1457600080fd5b505af1158015610e28573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e509190810190611dd7565b9050610f0e565b6065546001600160a01b0316638803dbee60408501356020860135610e7f6060880188612809565b610e8f60a08a0160808b01611d9f565b8960a001356040518763ffffffff1660e01b8152600401610eb59695949392919061275d565b600060405180830381600087803b158015610ecf57600080fd5b505af1158015610ee3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f0b9190810190611dd7565b90505b80600182510381518110610f1e57fe5b6020026020010151915050919050565b600080610f3e6020840184611d9f565b6001600160a01b03811660009081526066602052604090205490915060ff16610f795760405162461bcd60e51b81526004016101b59061258e565b60006001600160a01b0382166382b86600610f9a6040870160208801611fa4565b6040518263ffffffff1660e01b8152600401610fb691906127d0565b60206040518083038186803b158015610fce57600080fd5b505afa158015610fe2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110069190611dbb565b9050611023816110196020870187611d9f565b86606001356116de565b6110306020850185611d9f565b6001600160a01b0316639169558661104e6040870160208801611fa4565b61105e6060880160408901611fa4565b876060013588608001358960a001356040518663ffffffff1660e01b815260040161108d9594939291906127de565b602060405180830381600087803b1580156110a757600080fd5b505af11580156110bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110df9190611f8c565b949350505050565b60008060016110f96040860186612850565b919091039150600090506111106040860186612850565b8381811061111a57fe5b905060200201602081019061112f9190611ecc565b600181111561113a57fe5b14156111f2576000600161114e8680612850565b9190910391506000905060016111648780612850565b8481811061116e57fe5b905060200281019061118091906128ad565b61118e906060810190612809565b9190910391506111a090508680612850565b838181106111aa57fe5b90506020028101906111bc91906128ad565b6111ca906060810190612809565b828181106111d457fe5b90506020020160208101906111e99190611d9f565b935050506112eb565b600060016112036020870187612866565b9050039050600085806020019061121a9190612866565b8381811061122457fe5b61123a92602060c0909202019081019150611d9f565b90506001600160a01b0381166382b866006112586020890189612866565b8581811061126257fe5b905060c00201604001602081019061127a9190611fa4565b6040518263ffffffff1660e01b815260040161129691906127d0565b60206040518083038186803b1580156112ae57600080fd5b505afa1580156112c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e69190611dbb565b935050505b816113006001600160a01b038216338661177f565b5050505050565b3390565b3b151590565b600054610100900460ff168061132a575061132a6107af565b80611338575060005460ff16155b6113545760405162461bcd60e51b81526004016101b5906124c3565b600054610100900460ff1615801561083e576000805460ff1961ff0019909116610100171660011790558015610850576000805461ff001916905550565b600054610100900460ff16806113ab57506113ab6107af565b806113b9575060005460ff16155b6113d55760405162461bcd60e51b81526004016101b5906124c3565b600054610100900460ff16158015611400576000805460ff1961ff0019909116610100171660011790555b600061140a611307565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610850576000805461ff001916905550565b60606002825110156114905760405162461bcd60e51b81526004016101b59061248c565b815167ffffffffffffffff811180156114a857600080fd5b506040519080825280602002602001820160405280156114d2578160200160208202803683370190505b50905082816000815181106114e357fe5b60200260200101818152505060005b600183510381101561157b576000806115358786858151811061151157fe5b602002602001015187866001018151811061152857fe5b60200260200101516117a3565b9150915061155784848151811061154857fe5b6020026020010151838361187c565b84846001018151811061156657fe5b602090810291909101015250506001016114f2565b509392505050565b60606002825110156115a75760405162461bcd60e51b81526004016101b59061248c565b815167ffffffffffffffff811180156115bf57600080fd5b506040519080825280602002602001820160405280156115e9578160200160208202803683370190505b50905082816001835103815181106115fd57fe5b60209081029190910101528151600019015b801561157b5760008061163f8786600186038151811061162b57fe5b602002602001015187868151811061152857fe5b9150915061166184848151811061165257fe5b60200260200101518383611916565b84600185038151811061167057fe5b602090810291909101015250506000190161160f565b6102b8846323b872dd60e01b8585856040516024016116a79392919061208c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526119b0565b604051636eb1769f60e11b815283906000906001600160a01b0383169063dd62ed3e906117119030908890600401612072565b60206040518083038186803b15801561172957600080fd5b505afa15801561173d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117619190611f8c565b905082811015611300576113006001600160a01b0383168585611a3f565b61179e8363a9059cbb60e01b84846040516024016116a79291906120b0565b505050565b60008060006117b28585611aea565b5090506000806117c3888888611b74565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156117fb57600080fd5b505afa15801561180f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118339190611f20565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b03161461186a57808261186d565b81815b90999098509650505050505050565b600080841161189d5760405162461bcd60e51b81526004016101b5906126c7565b6000831180156118ad5750600082115b6118c95760405162461bcd60e51b81526004016101b590612511565b60006118d7856103e5611be4565b905060006118e58285611be4565b905060006118ff836118f9886103e8611be4565b90611c21565b905080828161190a57fe5b04979650505050505050565b60008084116119375760405162461bcd60e51b81526004016101b5906122a1565b6000831180156119475750600082115b6119635760405162461bcd60e51b81526004016101b590612511565b600061197b6103e86119758688611be4565b90611be4565b9050600061198f6103e56119758689611c44565b90506119a6600182848161199f57fe5b0490611c21565b9695505050505050565b6060611a05826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c679092919063ffffffff16565b80519091501561179e5780806020019051810190611a239190611e6c565b61179e5760405162461bcd60e51b81526004016101b59061267d565b6000611ac982856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b8152600401611a73929190612072565b60206040518083038186803b158015611a8b57600080fd5b505afa158015611a9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac39190611f8c565b90611c80565b90506102b88463095ea7b360e01b85846040516024016116a79291906120b0565b600080826001600160a01b0316846001600160a01b03161415611b1f5760405162461bcd60e51b81526004016101b5906123b2565b826001600160a01b0316846001600160a01b031610611b3f578284611b42565b83835b90925090506001600160a01b038216611b6d5760405162461bcd60e51b81526004016101b59061260f565b9250929050565b6000806000611b838585611aea565b91509150858282604051602001611b9b929190611fc5565b60405160208183030381529060405280519060200120604051602001611bc2929190612008565b60408051601f1981840301815291905280516020909101209695505050505050565b6000811580611bff57505080820282828281611bfc57fe5b04145b611c1b5760405162461bcd60e51b81526004016101b5906121fb565b92915050565b80820182811015611c1b5760405162461bcd60e51b81526004016101b590612342565b80820382811115611c1b5760405162461bcd60e51b81526004016101b590612107565b6060611c768484600085611ca5565b90505b9392505050565b600082820183811015611c795760405162461bcd60e51b81526004016101b590612229565b606082471015611cc75760405162461bcd60e51b81526004016101b590612446565b611cd08561130b565b611cec5760405162461bcd60e51b81526004016101b5906125d8565b60006060866001600160a01b03168587604051611d099190611fec565b60006040518083038185875af1925050503d8060008114611d46576040519150601f19603f3d011682016040523d82523d6000602084013e611d4b565b606091505b5091509150611d5b828286611d66565b979650505050505050565b60608315611d75575081611c79565b825115611d855782518084602001fd5b8160405162461bcd60e51b81526004016101b591906120d4565b600060208284031215611db0578081fd5b8135611c7981612935565b600060208284031215611dcc578081fd5b8151611c7981612935565b60006020808385031215611de9578182fd5b825167ffffffffffffffff811115611dff578283fd5b8301601f81018513611e0f578283fd5b8051611e22611e1d826128e9565b6128c2565b8181528381019083850185840285018601891015611e3e578687fd5b8694505b83851015611e60578051835260019490940193918501918501611e42565b50979650505050505050565b600060208284031215611e7d578081fd5b81518015158114611c79578182fd5b600080600060608486031215611ea0578182fd5b8335611eab81612935565b92506020840135611ebb81612935565b929592945050506040919091013590565b600060208284031215611edd578081fd5b8135611c798161294a565b600060208284031215611ef9578081fd5b813567ffffffffffffffff811115611f0f578182fd5b820160608185031215611c79578182fd5b600080600060608486031215611f34578283fd5b8351611f3f81612957565b6020850151909350611f5081612957565b604085015190925063ffffffff81168114611f69578182fd5b809150509250925092565b600060208284031215611f85578081fd5b5035919050565b600060208284031215611f9d578081fd5b5051919050565b600060208284031215611fb5578081fd5b813560ff81168114611c79578182fd5b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b60008251611ffe818460208701612909565b9190910192915050565b6001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527fa0f80de0dc21d1d892ac8c8c804bb2945a43ec20fbd363e94272c4db65343f20603582015260550190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b60006020825282518060208401526120f3816040850160208701612909565b601f01601f19169190910160400192915050565b60208082526015908201527464732d6d6174682d7375622d756e646572666c6f7760581b604082015260600190565b6020808252601d908201527f52756279526f757465723a20496e76616c696420737761702074797065000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526028908201527f52756279526f757465723a20496e76616c696420537461626c6520506f6f6c2060408201526730b2323932b9b99760c11b606082015260800190565b60208082526014908201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f52756279526f757465723a20496e76616c696420414d4d2073776170207479706040820152606560f81b606082015260800190565b6020808252602c908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60408201526b155514155517d05353d5539560a21b606082015260800190565b60208082526035908201527f52756279526f757465723a2054686520737461626c65506f6f6c2063616e6e6f6040820152747420626520746865207a65726f206164647265737360581b606082015260800190565b60208082526014908201527364732d6d6174682d6164642d6f766572666c6f7760601b604082015260600190565b60208082526022908201527f52756279526f757465723a20496e76616c6964206d6178207377617020686f70604082015261399760f11b606082015260800190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b6020808252602f908201527f52756279526f757465723a20496e76616c696420414d4d20726f75746572206160408201526e32323932b9b99030b2323932b9b99760891b606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601e908201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526028908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604082015267495155494449545960c01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602a908201527f52756279526f757465723a2054686520737461626c6520706f6f6c206973206e6040820152691bdd08195b98589b195960b21b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b6020808252601c908201527f496e76616c6964206e756d626572206f6620737761702063616c6c7300000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252602b908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960408201526a1394155517d05353d5539560aa1b606082015260800190565b60208082526022908201527f52756279526f757465723a20496e76616c6964206d6178207377617020686f70604082015261733b60f01b606082015260800190565b90815260200190565b868152602080820187905260a0604083018190528201859052600090869060c08401835b888110156127af57833561279481612935565b6001600160a01b031682529282019290820190600101612781565b506001600160a01b0396909616606085015250505060800152949350505050565b60ff91909116815260200190565b60ff958616815293909416602084015260408301919091526060820152608081019190915260a00190565b6000808335601e1984360301811261281f578283fd5b83018035915067ffffffffffffffff821115612839578283fd5b6020908101925081023603821315611b6d57600080fd5b6000808335601e1984360301811261281f578182fd5b6000808335601e1984360301811261287c578283fd5b83018035915067ffffffffffffffff821115612896578283fd5b602001915060c081023603821315611b6d57600080fd5b6000823560be19833603018112611ffe578182fd5b60405181810167ffffffffffffffff811182821017156128e157600080fd5b604052919050565b600067ffffffffffffffff8211156128ff578081fd5b5060209081020190565b60005b8381101561292457818101518382015260200161290c565b838111156102b85750506000910152565b6001600160a01b038116811461085057600080fd5b6002811061085057600080fd5b6001600160701b038116811461085057600080fdfea26469706673582212207a4818ffee3a8526c29f944a2766e760a0a00a7d41d96776e3fe30a237762c5864736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806390b3c4e71161006657806390b3c4e714610111578063a26f579614610119578063b8af6a5314610139578063c39b2e991461014c578063f2fde38b1461015f5761009e565b80631794bb3c146100a357806362ea3db2146100b8578063715018a6146100e15780637e29ca87146100e95780638da5cb5b146100fc575b600080fd5b6100b66100b1366004611e8c565b610172565b005b6100cb6100c6366004611ee8565b6102be565b6040516100d89190612754565b60405180910390f35b6100b661046f565b6100b66100f7366004611d9f565b6104f8565b6101046105a9565b6040516100d8919061205e565b6101046105b8565b61012c610127366004611d9f565b6105c7565b6040516100d891906120c9565b6100b6610147366004611f74565b6105dc565b6100b661015a366004611d9f565b610640565b6100b661016d366004611d9f565b6106ee565b600054610100900460ff168061018b575061018b6107af565b80610199575060005460ff16155b6101be5760405162461bcd60e51b81526004016101b5906124c3565b60405180910390fd5b600054610100900460ff161580156101e9576000805460ff1961ff0019909116610100171660011790555b6101f16107c0565b6001600160a01b0384166102175760405162461bcd60e51b81526004016101b5906123f7565b6001600160a01b03831661023d5760405162461bcd60e51b81526004016101b5906121b3565b8161025a5760405162461bcd60e51b81526004016101b590612370565b606580546001600160a01b0319166001600160a01b03861617905561027e836104f8565b6001600160a01b0383166000908152606660205260409020805460ff19166001179055606782905580156102b8576000805461ff00191690555b50505050565b6067546000906102d16040840184612850565b905011156102f15760405162461bcd60e51b81526004016101b590612646565b6102fa82610853565b60008060005b61030d6040860186612850565b905081101561045d5760006103256040870187612850565b8381811061032f57fe5b90506020020160208101906103449190611ecc565b600181111561034f57fe5b1480610391575060016103656040870187612850565b8381811061036f57fe5b90506020020160208101906103849190611ecc565b600181111561038f57fe5b145b6103ad5760405162461bcd60e51b81526004016101b590612136565b60006103bc6040870187612850565b838181106103c657fe5b90506020020160208101906103db9190611ecc565b60018111156103e657fe5b14156104275761041a6103f98680612850565b8581811061040357fe5b905060200281019061041591906128ad565b610cdb565b9350600190920191610455565b61044c6104376020870187612866565b8481811061044157fe5b905060c00201610f2e565b93506001909101905b600101610300565b5061046884846110e7565b5050919050565b610477611307565b6001600160a01b03166104886105a9565b6001600160a01b0316146104ae5760405162461bcd60e51b81526004016101b590612559565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b610500611307565b6001600160a01b03166105116105a9565b6001600160a01b0316146105375760405162461bcd60e51b81526004016101b590612559565b6001600160a01b03811661055d5760405162461bcd60e51b81526004016101b5906122ed565b6001600160a01b038116600081815260666020526040808220805460ff19166001179055517f763ba138b73b63a43de614b1d4efd85711b3240cdb9c79a0a6a67647a95c4a319190a250565b6033546001600160a01b031690565b6065546001600160a01b031681565b60666020526000908152604090205460ff1681565b6105e4611307565b6001600160a01b03166105f56105a9565b6001600160a01b03161461061b5760405162461bcd60e51b81526004016101b590612559565b6000811161063b5760405162461bcd60e51b81526004016101b590612712565b606755565b610648611307565b6001600160a01b03166106596105a9565b6001600160a01b03161461067f5760405162461bcd60e51b81526004016101b590612559565b6001600160a01b0381166106a55760405162461bcd60e51b81526004016101b5906122ed565b6001600160a01b038116600081815260666020526040808220805460ff19169055517f62825d4e3dc47438cdd2a3014131db621a70e653474b90da2dd00d8ddb90bfca9190a250565b6106f6611307565b6001600160a01b03166107076105a9565b6001600160a01b03161461072d5760405162461bcd60e51b81526004016101b590612559565b6001600160a01b0381166107535760405162461bcd60e51b81526004016101b59061216d565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60006107ba3061130b565b15905090565b600054610100900460ff16806107d957506107d96107af565b806107e7575060005460ff16155b6108035760405162461bcd60e51b81526004016101b5906124c3565b600054610100900460ff1615801561082e576000805460ff1961ff0019909116610100171660011790555b610836611311565b61083e611392565b8015610850576000805461ff00191690555b50565b600080806108646040850185612850565b600081811061086f57fe5b90506020020160208101906108849190611ecc565b600181111561088f57fe5b1415610b8757606060006108a38580612850565b60008181106108ae57fe5b90506020028101906108c091906128ad565b6108ce906020810190611ecc565b60018111156108d957fe5b14156109fb576065546040805163c45a015560e01b815290516109f4926001600160a01b03169163c45a0155916004808301926020929190829003018186803b15801561092557600080fd5b505afa158015610939573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095d9190611dbb565b6109678680612850565b600081811061097257fe5b905060200281019061098491906128ad565b602001356109928780612850565b600081811061099d57fe5b90506020028101906109af91906128ad565b6109bd906060810190612809565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061146c92505050565b9050610b13565b6065546040805163c45a015560e01b81529051610b10926001600160a01b03169163c45a0155916004808301926020929190829003018186803b158015610a4157600080fd5b505afa158015610a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a799190611dbb565b610a838680612850565b6000818110610a8e57fe5b9050602002810190610aa091906128ad565b60400135610aae8780612850565b6000818110610ab957fe5b9050602002810190610acb91906128ad565b610ad9906060810190612809565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061158392505050565b90505b610b1d8480612850565b6000818110610b2857fe5b9050602002810190610b3a91906128ad565b610b48906060810190612809565b6000818110610b5357fe5b9050602002016020810190610b689190611d9f565b925080600081518110610b7757fe5b6020026020010151915050610cc5565b6000610b966020850185612866565b6000818110610ba157fe5b610bb792602060c0909202019081019150611d9f565b6001600160a01b03811660009081526066602052604090205490915060ff16610bf25760405162461bcd60e51b81526004016101b59061258e565b6001600160a01b0381166382b86600610c0e6020870187612866565b6000818110610c1957fe5b905060c002016020016020810190610c319190611fa4565b6040518263ffffffff1660e01b8152600401610c4d91906127d0565b60206040518083038186803b158015610c6557600080fd5b505afa158015610c79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9d9190611dbb565b9250610cac6020850185612866565b6000818110610cb757fe5b905060c00201606001359150505b816102b86001600160a01b038216333085611686565b600080610ceb6020840184611ecc565b6001811115610cf657fe5b1480610d1957506001610d0c6020840184611ecc565b6001811115610d1757fe5b145b610d355760405162461bcd60e51b81526004016101b590612260565b6060610d7c610d4684830185612809565b6000818110610d5157fe5b9050602002016020810190610d669190611d9f565b6065546001600160a01b031660208601356116de565b6000610d8b6020850185611ecc565b6001811115610d9657fe5b1415610e57576065546001600160a01b03166338ed173960208501356040860135610dc46060880188612809565b610dd460a08a0160808b01611d9f565b8960a001356040518763ffffffff1660e01b8152600401610dfa9695949392919061275d565b600060405180830381600087803b158015610e1457600080fd5b505af1158015610e28573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e509190810190611dd7565b9050610f0e565b6065546001600160a01b0316638803dbee60408501356020860135610e7f6060880188612809565b610e8f60a08a0160808b01611d9f565b8960a001356040518763ffffffff1660e01b8152600401610eb59695949392919061275d565b600060405180830381600087803b158015610ecf57600080fd5b505af1158015610ee3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f0b9190810190611dd7565b90505b80600182510381518110610f1e57fe5b6020026020010151915050919050565b600080610f3e6020840184611d9f565b6001600160a01b03811660009081526066602052604090205490915060ff16610f795760405162461bcd60e51b81526004016101b59061258e565b60006001600160a01b0382166382b86600610f9a6040870160208801611fa4565b6040518263ffffffff1660e01b8152600401610fb691906127d0565b60206040518083038186803b158015610fce57600080fd5b505afa158015610fe2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110069190611dbb565b9050611023816110196020870187611d9f565b86606001356116de565b6110306020850185611d9f565b6001600160a01b0316639169558661104e6040870160208801611fa4565b61105e6060880160408901611fa4565b876060013588608001358960a001356040518663ffffffff1660e01b815260040161108d9594939291906127de565b602060405180830381600087803b1580156110a757600080fd5b505af11580156110bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110df9190611f8c565b949350505050565b60008060016110f96040860186612850565b919091039150600090506111106040860186612850565b8381811061111a57fe5b905060200201602081019061112f9190611ecc565b600181111561113a57fe5b14156111f2576000600161114e8680612850565b9190910391506000905060016111648780612850565b8481811061116e57fe5b905060200281019061118091906128ad565b61118e906060810190612809565b9190910391506111a090508680612850565b838181106111aa57fe5b90506020028101906111bc91906128ad565b6111ca906060810190612809565b828181106111d457fe5b90506020020160208101906111e99190611d9f565b935050506112eb565b600060016112036020870187612866565b9050039050600085806020019061121a9190612866565b8381811061122457fe5b61123a92602060c0909202019081019150611d9f565b90506001600160a01b0381166382b866006112586020890189612866565b8581811061126257fe5b905060c00201604001602081019061127a9190611fa4565b6040518263ffffffff1660e01b815260040161129691906127d0565b60206040518083038186803b1580156112ae57600080fd5b505afa1580156112c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e69190611dbb565b935050505b816113006001600160a01b038216338661177f565b5050505050565b3390565b3b151590565b600054610100900460ff168061132a575061132a6107af565b80611338575060005460ff16155b6113545760405162461bcd60e51b81526004016101b5906124c3565b600054610100900460ff1615801561083e576000805460ff1961ff0019909116610100171660011790558015610850576000805461ff001916905550565b600054610100900460ff16806113ab57506113ab6107af565b806113b9575060005460ff16155b6113d55760405162461bcd60e51b81526004016101b5906124c3565b600054610100900460ff16158015611400576000805460ff1961ff0019909116610100171660011790555b600061140a611307565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610850576000805461ff001916905550565b60606002825110156114905760405162461bcd60e51b81526004016101b59061248c565b815167ffffffffffffffff811180156114a857600080fd5b506040519080825280602002602001820160405280156114d2578160200160208202803683370190505b50905082816000815181106114e357fe5b60200260200101818152505060005b600183510381101561157b576000806115358786858151811061151157fe5b602002602001015187866001018151811061152857fe5b60200260200101516117a3565b9150915061155784848151811061154857fe5b6020026020010151838361187c565b84846001018151811061156657fe5b602090810291909101015250506001016114f2565b509392505050565b60606002825110156115a75760405162461bcd60e51b81526004016101b59061248c565b815167ffffffffffffffff811180156115bf57600080fd5b506040519080825280602002602001820160405280156115e9578160200160208202803683370190505b50905082816001835103815181106115fd57fe5b60209081029190910101528151600019015b801561157b5760008061163f8786600186038151811061162b57fe5b602002602001015187868151811061152857fe5b9150915061166184848151811061165257fe5b60200260200101518383611916565b84600185038151811061167057fe5b602090810291909101015250506000190161160f565b6102b8846323b872dd60e01b8585856040516024016116a79392919061208c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526119b0565b604051636eb1769f60e11b815283906000906001600160a01b0383169063dd62ed3e906117119030908890600401612072565b60206040518083038186803b15801561172957600080fd5b505afa15801561173d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117619190611f8c565b905082811015611300576113006001600160a01b0383168585611a3f565b61179e8363a9059cbb60e01b84846040516024016116a79291906120b0565b505050565b60008060006117b28585611aea565b5090506000806117c3888888611b74565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156117fb57600080fd5b505afa15801561180f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118339190611f20565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b03161461186a57808261186d565b81815b90999098509650505050505050565b600080841161189d5760405162461bcd60e51b81526004016101b5906126c7565b6000831180156118ad5750600082115b6118c95760405162461bcd60e51b81526004016101b590612511565b60006118d7856103e5611be4565b905060006118e58285611be4565b905060006118ff836118f9886103e8611be4565b90611c21565b905080828161190a57fe5b04979650505050505050565b60008084116119375760405162461bcd60e51b81526004016101b5906122a1565b6000831180156119475750600082115b6119635760405162461bcd60e51b81526004016101b590612511565b600061197b6103e86119758688611be4565b90611be4565b9050600061198f6103e56119758689611c44565b90506119a6600182848161199f57fe5b0490611c21565b9695505050505050565b6060611a05826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c679092919063ffffffff16565b80519091501561179e5780806020019051810190611a239190611e6c565b61179e5760405162461bcd60e51b81526004016101b59061267d565b6000611ac982856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b8152600401611a73929190612072565b60206040518083038186803b158015611a8b57600080fd5b505afa158015611a9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac39190611f8c565b90611c80565b90506102b88463095ea7b360e01b85846040516024016116a79291906120b0565b600080826001600160a01b0316846001600160a01b03161415611b1f5760405162461bcd60e51b81526004016101b5906123b2565b826001600160a01b0316846001600160a01b031610611b3f578284611b42565b83835b90925090506001600160a01b038216611b6d5760405162461bcd60e51b81526004016101b59061260f565b9250929050565b6000806000611b838585611aea565b91509150858282604051602001611b9b929190611fc5565b60405160208183030381529060405280519060200120604051602001611bc2929190612008565b60408051601f1981840301815291905280516020909101209695505050505050565b6000811580611bff57505080820282828281611bfc57fe5b04145b611c1b5760405162461bcd60e51b81526004016101b5906121fb565b92915050565b80820182811015611c1b5760405162461bcd60e51b81526004016101b590612342565b80820382811115611c1b5760405162461bcd60e51b81526004016101b590612107565b6060611c768484600085611ca5565b90505b9392505050565b600082820183811015611c795760405162461bcd60e51b81526004016101b590612229565b606082471015611cc75760405162461bcd60e51b81526004016101b590612446565b611cd08561130b565b611cec5760405162461bcd60e51b81526004016101b5906125d8565b60006060866001600160a01b03168587604051611d099190611fec565b60006040518083038185875af1925050503d8060008114611d46576040519150601f19603f3d011682016040523d82523d6000602084013e611d4b565b606091505b5091509150611d5b828286611d66565b979650505050505050565b60608315611d75575081611c79565b825115611d855782518084602001fd5b8160405162461bcd60e51b81526004016101b591906120d4565b600060208284031215611db0578081fd5b8135611c7981612935565b600060208284031215611dcc578081fd5b8151611c7981612935565b60006020808385031215611de9578182fd5b825167ffffffffffffffff811115611dff578283fd5b8301601f81018513611e0f578283fd5b8051611e22611e1d826128e9565b6128c2565b8181528381019083850185840285018601891015611e3e578687fd5b8694505b83851015611e60578051835260019490940193918501918501611e42565b50979650505050505050565b600060208284031215611e7d578081fd5b81518015158114611c79578182fd5b600080600060608486031215611ea0578182fd5b8335611eab81612935565b92506020840135611ebb81612935565b929592945050506040919091013590565b600060208284031215611edd578081fd5b8135611c798161294a565b600060208284031215611ef9578081fd5b813567ffffffffffffffff811115611f0f578182fd5b820160608185031215611c79578182fd5b600080600060608486031215611f34578283fd5b8351611f3f81612957565b6020850151909350611f5081612957565b604085015190925063ffffffff81168114611f69578182fd5b809150509250925092565b600060208284031215611f85578081fd5b5035919050565b600060208284031215611f9d578081fd5b5051919050565b600060208284031215611fb5578081fd5b813560ff81168114611c79578182fd5b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b60008251611ffe818460208701612909565b9190910192915050565b6001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527fa0f80de0dc21d1d892ac8c8c804bb2945a43ec20fbd363e94272c4db65343f20603582015260550190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b60006020825282518060208401526120f3816040850160208701612909565b601f01601f19169190910160400192915050565b60208082526015908201527464732d6d6174682d7375622d756e646572666c6f7760581b604082015260600190565b6020808252601d908201527f52756279526f757465723a20496e76616c696420737761702074797065000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526028908201527f52756279526f757465723a20496e76616c696420537461626c6520506f6f6c2060408201526730b2323932b9b99760c11b606082015260800190565b60208082526014908201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f52756279526f757465723a20496e76616c696420414d4d2073776170207479706040820152606560f81b606082015260800190565b6020808252602c908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60408201526b155514155517d05353d5539560a21b606082015260800190565b60208082526035908201527f52756279526f757465723a2054686520737461626c65506f6f6c2063616e6e6f6040820152747420626520746865207a65726f206164647265737360581b606082015260800190565b60208082526014908201527364732d6d6174682d6164642d6f766572666c6f7760601b604082015260600190565b60208082526022908201527f52756279526f757465723a20496e76616c6964206d6178207377617020686f70604082015261399760f11b606082015260800190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b6020808252602f908201527f52756279526f757465723a20496e76616c696420414d4d20726f75746572206160408201526e32323932b9b99030b2323932b9b99760891b606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601e908201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526028908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604082015267495155494449545960c01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602a908201527f52756279526f757465723a2054686520737461626c6520706f6f6c206973206e6040820152691bdd08195b98589b195960b21b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b6020808252601c908201527f496e76616c6964206e756d626572206f6620737761702063616c6c7300000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252602b908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960408201526a1394155517d05353d5539560aa1b606082015260800190565b60208082526022908201527f52756279526f757465723a20496e76616c6964206d6178207377617020686f70604082015261733b60f01b606082015260800190565b90815260200190565b868152602080820187905260a0604083018190528201859052600090869060c08401835b888110156127af57833561279481612935565b6001600160a01b031682529282019290820190600101612781565b506001600160a01b0396909616606085015250505060800152949350505050565b60ff91909116815260200190565b60ff958616815293909416602084015260408301919091526060820152608081019190915260a00190565b6000808335601e1984360301811261281f578283fd5b83018035915067ffffffffffffffff821115612839578283fd5b6020908101925081023603821315611b6d57600080fd5b6000808335601e1984360301811261281f578182fd5b6000808335601e1984360301811261287c578283fd5b83018035915067ffffffffffffffff821115612896578283fd5b602001915060c081023603821315611b6d57600080fd5b6000823560be19833603018112611ffe578182fd5b60405181810167ffffffffffffffff811182821017156128e157600080fd5b604052919050565b600067ffffffffffffffff8211156128ff578081fd5b5060209081020190565b60005b8381101561292457818101518382015260200161290c565b838111156102b85750506000910152565b6001600160a01b038116811461085057600080fd5b6002811061085057600080fd5b6001600160701b038116811461085057600080fdfea26469706673582212207a4818ffee3a8526c29f944a2766e760a0a00a7d41d96776e3fe30a237762c5864736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 618,
        "contract": "contracts/ruby_router/RubyRouter.sol:RubyRouter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 621,
        "contract": "contracts/ruby_router/RubyRouter.sol:RubyRouter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1657,
        "contract": "contracts/ruby_router/RubyRouter.sol:RubyRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 136,
        "contract": "contracts/ruby_router/RubyRouter.sol:RubyRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 255,
        "contract": "contracts/ruby_router/RubyRouter.sol:RubyRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 17981,
        "contract": "contracts/ruby_router/RubyRouter.sol:RubyRouter",
        "label": "ammRouter",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IUniswapV2Router02)15241"
      },
      {
        "astId": 17985,
        "contract": "contracts/ruby_router/RubyRouter.sol:RubyRouter",
        "label": "enabledStablePools",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_contract(ISwap)23762,t_bool)"
      },
      {
        "astId": 17987,
        "contract": "contracts/ruby_router/RubyRouter.sol:RubyRouter",
        "label": "_maxSwapHops",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISwap)23762": {
        "encoding": "inplace",
        "label": "contract ISwap",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)15241": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(ISwap)23762,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(ISwap)23762",
        "label": "mapping(contract ISwap => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
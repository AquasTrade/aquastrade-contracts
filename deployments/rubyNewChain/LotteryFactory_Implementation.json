{
  "address": "0xD3126ad1ec8Efb36B8fd79dB562626cbdec115aF",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "LotteryCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ticketSize",
          "type": "uint256"
        }
      ],
      "name": "costToBuyTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lotterySize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "distribution",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "createNewLotto",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentLotto",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentLottoryId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "getLotto",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "getRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "getRewardNFT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinningNumbers",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ruby",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_randomNumberGenerator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_RNG",
          "type": "address"
        }
      ],
      "name": "setRNG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ruby",
          "type": "address"
        }
      ],
      "name": "setRuby",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1c2b85eba5d6e524ad5eb53c17eb575f5fbf75cc7804a20e21049c37c4753684",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0xF63Bb14E7E9bD2882957129c3E3197E6D18933B4",
    "contractAddress": "0xD3126ad1ec8Efb36B8fd79dB562626cbdec115aF",
    "transactionIndex": 0,
    "gasUsed": "3105168",
    "logsBloom": "0x
    "blockHash": "0xf435706b3a54a8b11e1915fff54607ab71818ae9673e6b2367136d7da170feec",
    "transactionHash": "0x1c2b85eba5d6e524ad5eb53c17eb575f5fbf75cc7804a20e21049c37c4753684",
    "logs": [],
    "blockNumber": 356419,
    "cumulativeGasUsed": "3105168",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7aa7e42edecf6f63eb36e406f51b9e04",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"LotteryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketSize\",\"type\":\"uint256\"}],\"name\":\"costToBuyTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lotterySize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"createNewLotto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLotto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLottoryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"getLotto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getRewardNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinningNumbers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ruby\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomNumberGenerator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_RNG\",\"type\":\"address\"}],\"name\":\"setRNG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ruby\",\"type\":\"address\"}],\"name\":\"setRuby\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createNewLotto(address,uint256,uint256,uint256,uint256[],uint256)\":{\"params\":{\"_lotterySize\":\"Digit count of ticket.\",\"_nft\":\"The NFT address for bonus.\",\"_tokenId\":\"The Bonus NFT ID.\",\"distribution\":\"An array defining the distribution of the prize pool.\",\"duration\":\"The duration until no more tickets will be sold for the lottery from now.\",\"ticketPrice\":\"Cost per ticket in $ruby.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createNewLotto(address,uint256,uint256,uint256,uint256[],uint256)\":{\"notice\":\"Create a new Lottery instance.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lottery/LotteryFactory.sol\":\"LotteryFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x3dab19bb4a63bcbda1ee153ca291694f92f9009fad28626126b15a8503b0e5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"contracts/interfaces/IRubyNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\ninterface IRubyNFT is IERC721Upgradeable {\\n\\n    event MinterSet(address indexed minter, bool allowance);\\n\\n    event DescriptionSet(string newDescription);\\n\\n    event VisualAppearanceSet(string newVisualAppearance);\\n\\n    function nftIds() external view returns (uint256);\\n\\n    function minters(address minter) external view returns (bool);\\n\\n    function description() external view returns (string memory);\\n\\n    function visualAppearance() external view returns (string memory);\\n\\n    function mint(address to) external;\\n\\n    function setMinter(address minter, bool allowance) external;\\n\\n    function setDescription(string memory _description) external;\\n\\n    function setVisualAppearance(string memory _visualAppearance) external;\\n}\\n\",\"keccak256\":\"0x63bd2ec6b7ca067adb01941670222c47d5373f49d40169167ab0b0cedaad54ea\",\"license\":\"MIT\"},\"contracts/lottery/IRandomNumberGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRandomNumberGenerator {\\n\\n    function getRandomNumber(uint256 lotterySize) external returns (uint256 randomness);\\n\\n}\",\"keccak256\":\"0x13c438fa73498efa6e4682d09676b961b8fee45142faad1ff787a44be239f385\",\"license\":\"MIT\"},\"contracts/lottery/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n// Imported OZ helper contracts\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./IRandomNumberGenerator.sol\\\";\\nimport \\\"../interfaces/IRubyNFT.sol\\\";\\n//\\n\\ncontract Lottery is Ownable, Pausable {\\n    // Libraries\\n    // Safe math\\n    using SafeMath for uint256;\\n    // Safe ERC20\\n    using SafeERC20 for IERC20;\\n    // Address functionality \\n    using Address for address;\\n    uint256 private constant MAX_WINNERS = 10;\\n\\n    address private factory; // LotteryFactory address.\\n    IERC20 private ruby; // Instance of Ruby token (collateral currency for lotto).\\n    IRandomNumberGenerator internal RNG; // Instance of Random Number Generator.\\n    IRubyNFT private nft; // Instance of NFT for lottery reward.\\n    uint256 private bonusTokenId; // ID of NFT for lottery reward.\\n\\n    uint256 private startingTimestamp; // Block timestamp for start of lottery.\\n    uint256 private closingTimestamp; // Block timestamp for end of lottery.\\n    uint256 private lotterySize; // Digit count of ticket.\\n    uint256 private winnersSize; // The number of winners for reward.\\n    uint256 private rubyTotal; // Total prize pool.\\n    uint256[] private winners; // The winning numbers.\\n    uint256 private ticketPrice; // Cost per ticket in $ruby.\\n    uint256[] private prizeDistribution; // An array defining the distribution of the prize pool.\\n\\n    mapping (uint256 => address) private ticketsToPerson;\\n    mapping (uint256 => uint256) private visited;\\n    mapping (address => uint256[]) private personToTickets;\\n    uint256 private count;\\n\\n    event NewTickets(uint256 ticketSize, uint256[] _choosenTicketNumbers);\\n    event DrewWinningNumber(uint256[] _winners);\\n    event RewardClaimed(address to);\\n\\n    constructor (address _factory, address _ruby, address _nft, uint256 _bonusTokenId, uint256 _lotterySize, uint256 _ticketPrice, uint256[] memory _prizeDistribution /*first, second, ..., last, treasury*/, uint256 _duration, address _RNG) \\n      public {\\n    \\trequire(\\n          _ruby != address(0),\\n          \\\"Lottery: Ruby cannot be 0 address\\\"\\n      );\\n      require(\\n          _factory != address(0),\\n          \\\"Lottery: Factory cannot be 0 address\\\"\\n      );\\n      require(\\n          _nft != address(0),\\n          \\\"Lottery: Nft cannot be 0 address\\\"\\n      );\\n      require(\\n          _RNG != address(0),\\n          \\\"Lottery: Random Number Generator cannot be 0 address\\\"\\n      );\\n    \\trequire(\\n          _prizeDistribution.length >= 2,\\n          \\\"Lottery: Invalid distribution\\\"\\n      );\\n      require(\\n          _prizeDistribution.length <= MAX_WINNERS + 1,\\n          \\\"Lottery: Invalid distribution\\\"\\n      );\\n      winnersSize = uint256(_prizeDistribution.length - 1);\\n    \\tuint256 prizeDistributionTotal = 0;\\n      for (uint256 j = 0; j < _prizeDistribution.length; j++) {\\n          prizeDistributionTotal = prizeDistributionTotal.add(\\n              uint256(_prizeDistribution[j])\\n          );\\n      }\\n      // Ensuring that prize distribution total is 100%\\n      require(\\n          prizeDistributionTotal == 100,\\n          \\\"Lottery: Prize distribution is not 100%\\\"\\n      );\\n      count = 1;\\n      factory = _factory;\\n      ruby = IERC20(_ruby);\\n      RNG = IRandomNumberGenerator(_RNG);\\n      nft = IRubyNFT(_nft);\\n      bonusTokenId = _bonusTokenId;\\n\\n      ticketPrice = _ticketPrice;\\n    \\tlotterySize = _lotterySize;\\n    \\tstartingTimestamp = getCurrentTime();\\n    \\tclosingTimestamp = startingTimestamp + _duration;\\n    \\tprizeDistribution = _prizeDistribution;\\n    }\\n\\n    modifier opened() {\\n      require(getCurrentTime() >= startingTimestamp, \\\"Lottery: Ticket selling is not yet started\\\");\\n      require(getCurrentTime() < closingTimestamp, \\\"Lottery: Ticket selling is closed\\\");\\n      _;\\n    }\\n    modifier closed() {\\n      require(getCurrentTime() >= closingTimestamp, \\\"Lottery: Ticket selling is not yet closed\\\");\\n      _;\\n    }\\n    modifier drew() {\\n    \\trequire(winners.length == winnersSize, \\\"Lottery: Winning Numbers not chosen yet\\\");\\n      _;\\n    }\\n\\n    function pause() external onlyOwner() {\\n      _pause();\\n    }\\n\\n    function unpause() external onlyOwner() {\\n      _unpause();\\n    }\\n\\n    /// @notice Buy ticket for lottery.\\n    /// @param _ticketSize The number of tickets to buy.\\n    /// @param _choosenTicketNumbers An array containing the ticket numbers to buy.\\n    function buyTicket(uint256 _ticketSize, uint256[] calldata _choosenTicketNumbers) external opened() whenNotPaused() {\\n    \\t// Ensuring that there are the right amount of chosen numbers\\n      require(\\n          _choosenTicketNumbers.length == _ticketSize,\\n          \\\"Lottery: Invalid chosen numbers\\\"\\n      );\\n      count = count + 1;\\n      for (uint256 i = 0; i < _choosenTicketNumbers.length; i++) {\\n      \\trequire(_choosenTicketNumbers[i] < uint256(10) ** lotterySize, \\\"Lottery: Ticket Number is out of range\\\");\\n      \\trequire(ticketsToPerson[_choosenTicketNumbers[i]] == address(0), \\\"Lottery: Ticket Number is already exist\\\");\\n      \\trequire(visited[_choosenTicketNumbers[i]] != count, \\\"Lottery: Requested Ticket Numbers are not unique\\\");\\n      \\tvisited[_choosenTicketNumbers[i]] = count;\\n      }\\n      uint256 totalCost =  uint256(_ticketSize).mul(ticketPrice);\\n      ruby.transferFrom(\\n          msg.sender, \\n          address(this), \\n          totalCost\\n      );\\n      rubyTotal = rubyTotal.add(totalCost);\\n    \\tfor (uint256 i = 0; i < _choosenTicketNumbers.length; i++) {\\n    \\t\\tticketsToPerson[_choosenTicketNumbers[i]] = msg.sender;\\n        personToTickets[msg.sender].push(_choosenTicketNumbers[i]);\\n    \\t}\\n    \\temit NewTickets(_ticketSize, _choosenTicketNumbers);\\n    }\\n\\n    /// @notice Draw winning numbers.\\n    function drawWinningNumbers() external closed() onlyOwner() {\\n    \\trequire(winners.length == 0, \\\"Lottery: Have already drawn the winning number\\\");\\n    \\twinners = new uint256[](winnersSize);\\n    \\tfor (uint256 i = 0; i < winnersSize; i++) {\\n    \\t\\tfor (;;) {\\n\\t    \\t\\tuint256 value = RNG.getRandomNumber(lotterySize);\\n\\t    \\t\\tuint256 j;\\n\\t    \\t\\tfor (j = 0; j < i; j++) if (winners[j] == value) break;\\n\\t    \\t\\tif (j == i) {\\n\\t    \\t\\t\\twinners[i] = value;\\n\\t    \\t\\t\\tbreak;\\n\\t    \\t\\t}\\n\\t    \\t}\\n    \\t}\\n    \\temit DrewWinningNumber(winners);\\n    }\\n\\n    function withdraw(uint256 _amount) external drew() onlyOwner() {\\n      ruby.safeTransfer(\\n          msg.sender, \\n          _amount\\n      );\\n    }\\n\\n    /// @notice Claim rewards to caller if he/she bought winning ticket\\n    function claimReward() external closed() drew() {\\n      uint256 prize = 0;\\n      if (ticketsToPerson[winners[0]] == msg.sender) nft.safeTransferFrom(address(this), msg.sender, bonusTokenId);\\n      for (uint256 i = 0; i < winnersSize; i++) {\\n        uint256 winner = winners[i];\\n        address winAddress = ticketsToPerson[winner];\\n        if (winAddress == msg.sender) {\\n          ticketsToPerson[winner] = address(0);\\n          prize = prize.add(rubyTotal.mul(prizeDistribution[i]).div(100));\\n        }\\n      }\\n      ruby.transfer(address(msg.sender), prize);\\n      emit RewardClaimed(msg.sender);\\n    }\\n\\n    function getCurrentTime() internal view returns(uint256) {\\n      return block.timestamp;\\n    }\\n\\n    /// @notice Check the reward amount.\\n    /// @param to The address where you want to check the reward amount.\\n    function getRewardAmount(address to) public view drew() returns (uint256) {\\n    \\tuint256 prize = 0;\\n    \\tfor (uint256 i = 0; i < winnersSize; i++) {\\n    \\t\\tuint256 winner = winners[i];\\n    \\t\\taddress winAddress = ticketsToPerson[winner];\\n    \\t\\tif (winAddress == to) prize = prize.add(rubyTotal.mul(prizeDistribution[i]).div(100));\\n    \\t}\\n    \\treturn prize;\\n    }\\n\\n    /// @notice Check the reward NFT.\\n    /// @param to The address where you want to check the reward NFT.\\n    function getRewardNFT(address to) public view drew() returns(bool) {\\n    \\tif (ticketsToPerson[winners[0]] == to) return true;\\n    \\treturn false;\\n    }\\n\\n    /// @notice Cost to buy tickets in $ruby.\\n    /// @param _ticketSize The number of tickets to buy.\\n    function costToBuyTickets(uint256 _ticketSize) external view returns(uint256) {\\n      return ticketPrice * _ticketSize;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // VIEW FUNCTIONS \\n    //-------------------------------------------------------------------------\\n    function getWinningNumbers() external view drew() returns (uint256[] memory) {\\n      return winners;\\n    }\\n    function getStartingTimestamp() external view returns (uint256) {\\n      return startingTimestamp;\\n    }\\n    function getClosingTimestamp() external view returns (uint256) {\\n      return closingTimestamp;\\n    }\\n    function getTickets(address person) external view returns(uint256[] memory) {\\n      return personToTickets[person];\\n    }\\n    function getLotterySize() external view returns(uint256) {\\n      return lotterySize;\\n    }\\n    function getTotalRuby() external view returns(uint256) {\\n      return rubyTotal;\\n    }\\n    function getDistibution() external view returns(uint256[] memory) {\\n      return prizeDistribution;\\n    }\\n    function getBonusNFT() external view returns(address) {\\n      return address(nft);\\n    }\\n    function getBonusId() external view returns(uint256) {\\n      return bonusTokenId;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // SET FUNCTIONS \\n    //-------------------------------------------------------------------------\\n    function setTicketPrice(uint256 _price) external onlyOwner() {\\n        ticketPrice = _price;\\n    }\\n    function setStartingTimestamp(uint256 _time) external onlyOwner() {\\n      startingTimestamp = _time;\\n    }\\n    function setClosingTimestamp(uint256 _time) external onlyOwner() {\\n      closingTimestamp = _time;\\n    }\\n}\\n\",\"keccak256\":\"0x41fa670925f269b952d65899070d4402077fda10320c614648f20bc723acc04b\",\"license\":\"MIT\"},\"contracts/lottery/LotteryFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./Lottery.sol\\\";\\nimport \\\"../interfaces/IRubyNFT.sol\\\";\\n//\\n\\ncontract LotteryFactory is OwnableUpgradeable {\\n\\n    // Safe math\\n    using SafeMath for uint256;\\n    // Safe ERC20\\n    using SafeERC20 for IERC20;\\n\\n    // Instance of Ruby token (collateral currency for lotto)\\n    address private ruby;\\n    address private RNG;\\n    uint256 private constant MAX_WINNERS = 10;\\n\\n    mapping (uint256 => Lottery) private allLotteries;\\n    uint256 private lotteryId;\\n\\n    event LotteryCreated(uint256 _lotteryId);\\n\\n    //-------------------------------------------------------------------------\\n    // initializer\\n    //-------------------------------------------------------------------------\\n    function initialize(address _ruby, address _randomNumberGenerator) public initializer {\\n        require(\\n          _ruby != address(0),\\n          \\\"LotteryFactory: ruby cannot be 0 address\\\"\\n        );\\n        \\n        require(\\n          _randomNumberGenerator != address(0),\\n          \\\"LotteryFactory: randomNumberGenerator cannot be 0 address\\\"\\n        );\\n        ruby = _ruby;\\n        RNG = _randomNumberGenerator;\\n        OwnableUpgradeable.__Ownable_init();\\n    }\\n\\n    /// @notice Create a new Lottery instance.\\n    /// @param _nft The NFT address for bonus.\\n    /// @param _tokenId The Bonus NFT ID.\\n    /// @param _lotterySize Digit count of ticket.\\n    /// @param ticketPrice Cost per ticket in $ruby.\\n    /// @param distribution An array defining the distribution of the prize pool.\\n    /// @param duration The duration until no more tickets will be sold for the lottery from now.\\n    function createNewLotto(address _nft, uint256 _tokenId, uint256 _lotterySize, uint256 ticketPrice, uint256[] calldata distribution, uint256 duration) external onlyOwner() {\\n        require(\\n            _nft != address(0),\\n            \\\"LotteryFactory: Nft cannot be 0 address\\\"\\n        );\\n        require(\\n            distribution.length >= 2,\\n            \\\"LotteryFactory: Invalid distribution\\\"\\n        );\\n        require(\\n            distribution.length <= MAX_WINNERS + 1,\\n            \\\"LotteryFactory: Invalid distribution\\\"\\n        );\\n        require(IRubyNFT(_nft).ownerOf(_tokenId) == msg.sender, \\\"LotteryFactory: Owner of NFT is invalid\\\");\\n        lotteryId ++;\\n        allLotteries[lotteryId] = new Lottery(address(this), ruby, _nft, _tokenId, _lotterySize, ticketPrice, distribution, duration, RNG);\\n        Lottery(allLotteries[lotteryId]).transferOwnership(owner());\\n        IRubyNFT(_nft).transferFrom(msg.sender, address(allLotteries[lotteryId]), _tokenId);\\n        emit LotteryCreated(lotteryId);\\n    }\\n\\n    function getCurrentLotto() public view returns(address) {\\n        return address(allLotteries[lotteryId]);\\n    }\\n\\n    function getLotto(uint256 _lotteryId) external view returns(address) {\\n        return address(allLotteries[_lotteryId]);\\n    }\\n\\n    function getCurrentLottoryId() external view returns(uint256) {\\n        return lotteryId;\\n    }\\n\\n    function setRNG(address _RNG) external onlyOwner() {\\n        require(\\n            _RNG != address(0),\\n            \\\"LotteryFactory: RNG cannot be 0 address\\\"\\n        );\\n        RNG = _RNG;\\n    }\\n\\n    function setRuby(address _ruby) external onlyOwner() {\\n        require(\\n            _ruby != address(0),\\n            \\\"LotteryFactory: Ruby cannot be 0 address\\\"\\n        );\\n        ruby = _ruby;\\n    }\\n\\n    function getRewardAmount(address to) external view returns (uint256) {\\n        return Lottery(getCurrentLotto()).getRewardAmount(to);\\n    }\\n\\n    function getRewardNFT(address to) external view returns(bool) {\\n        return Lottery(getCurrentLotto()).getRewardNFT(to);\\n    }\\n\\n    function costToBuyTickets(uint256 _ticketSize) external view returns(uint256) {\\n      return Lottery(getCurrentLotto()).costToBuyTickets(_ticketSize);\\n    }\\n\\n    function getWinningNumbers() external view returns (uint256[] memory) {\\n      return Lottery(getCurrentLotto()).getWinningNumbers();\\n    }\\n}\",\"keccak256\":\"0xf135252c029f13730da99b309989ece387f945997b6136cbcdcf8ad2ed7342cc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000ff5760003560e01c8063715018a611620000995780638da5cb5b116200006f5780638da5cb5b1462000344578063b661c637146200034e578063d2941c7f1462000358578063f2fde38b146200037857620000ff565b8063715018a614620002b557806384350e1d14620002bf578063868ca68e146200031b57620000ff565b806344a040f511620000db57806344a040f514620001a8578063485cc95514620001e357806363910e0d14620002145780636a8dfd3a14620002ab57620000ff565b80621ace9314620001045780630c65747814620001415780633b84edbd146200017d575b600080fd5b6200012d600480360360208110156200011c57600080fd5b50356001600160a01b0316620003a1565b604080519115158252519081900360200190f35b62000161600480360360208110156200015957600080fd5b50356200042d565b604080516001600160a01b039092168252519081900360200190f35b620001a6600480360360208110156200019557600080fd5b50356001600160a01b031662000448565b005b620001d160048036036020811015620001c057600080fd5b50356001600160a01b031662000519565b60408051918252519081900360200190f35b620001a660048036036040811015620001fb57600080fd5b506001600160a01b038135811691602001351662000572565b620001a6600480360360c08110156200022c57600080fd5b6001600160a01b038235169160208101359160408201359160608101359181019060a0810160808201356401000000008111156200026957600080fd5b8201836020820111156200027c57600080fd5b803590602001918460208302840111640100000000831117156200029f57600080fd5b919350915035620006e6565b6200016162000b22565b620001a662000b40565b620002c962000bf2565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101562000307578181015183820152602001620002ed565b505050509050019250505060405180910390f35b620001a6600480360360208110156200033357600080fd5b50356001600160a01b031662000d0c565b6200016162000ddd565b620001d162000dec565b620001d1600480360360208110156200037057600080fd5b503562000df2565b620001a6600480360360208110156200039057600080fd5b50356001600160a01b031662000e42565b6000620003ad62000b22565b6001600160a01b0316621ace93836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015620003f957600080fd5b505afa1580156200040e573d6000803e3d6000fd5b505050506040513d60208110156200042557600080fd5b505192915050565b6000908152606760205260409020546001600160a01b031690565b6200045262000f4d565b6001600160a01b03166200046562000ddd565b6001600160a01b031614620004b0576040805162461bcd60e51b815260206004820181905260248201526000805160206200363d833981519152604482015290519081900360640190fd5b6001600160a01b038116620004f75760405162461bcd60e51b8152600401808060200182810382526027815260200180620036ac6027913960400191505060405180910390fd5b606680546001600160a01b0319166001600160a01b0392909216919091179055565b60006200052562000b22565b6001600160a01b03166344a040f5836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015620003f957600080fd5b600054610100900460ff16806200058e57506200058e62000f51565b806200059d575060005460ff16155b620005da5760405162461bcd60e51b815260040180806020018281038252602e8152602001806200359c602e913960400191505060405180910390fd5b600054610100900460ff1615801562000606576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0383166200064d5760405162461bcd60e51b81526004018080602001828103825260288152602001806200365d6028913960400191505060405180910390fd5b6001600160a01b038216620006945760405162461bcd60e51b8152600401808060200182810382526039815260200180620036d36039913960400191505060405180910390fd5b606580546001600160a01b038086166001600160a01b0319928316179092556066805492851692909116919091179055620006ce62000f64565b8015620006e1576000805461ff00191690555b505050565b620006f062000f4d565b6001600160a01b03166200070362000ddd565b6001600160a01b0316146200074e576040805162461bcd60e51b815260206004820181905260248201526000805160206200363d833981519152604482015290519081900360640190fd5b6001600160a01b038716620007955760405162461bcd60e51b8152600401808060200182810382526027815260200180620035f26027913960400191505060405180910390fd5b6002821015620007d75760405162461bcd60e51b8152600401808060200182810382526024815260200180620036196024913960400191505060405180910390fd5b600b821115620008195760405162461bcd60e51b8152600401808060200182810382526024815260200180620036196024913960400191505060405180910390fd5b336001600160a01b0316876001600160a01b0316636352211e886040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156200086857600080fd5b505afa1580156200087d573d6000803e3d6000fd5b505050506040513d60208110156200089457600080fd5b50516001600160a01b031614620008dd5760405162461bcd60e51b8152600401808060200182810382526027815260200180620036856027913960400191505060405180910390fd5b60688054600101905560655460665460405130926001600160a01b03908116928b928b928b928b928b928b928b929116906200091990620011d3565b808b6001600160a01b031681526020018a6001600160a01b03168152602001896001600160a01b0316815260200188815260200187815260200186815260200180602001848152602001836001600160a01b0316815260200182810382528686828181526020019250602002808284376000838201819052604051601f909201601f19169093018190039e509c50909a5050505050505050505050f080158015620009c8573d6000803e3d6000fd5b506068805460009081526067602052604080822080546001600160a01b0319166001600160a01b039586161790559154815220541663f2fde38b62000a0c62000ddd565b6040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801562000a4c57600080fd5b505af115801562000a61573d6000803e3d6000fd5b50506068546000908152606760205260408082205481516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018c90529151908c1694506323b872dd93506064808301939282900301818387803b15801562000aca57600080fd5b505af115801562000adf573d6000803e3d6000fd5b505060685460408051918252517f9e0023bebcc752baaa41057318405b5a6a8e9c6372b519717cfdf238e5caa7959350908190036020019150a150505050505050565b6068546000908152606760205260409020546001600160a01b031690565b62000b4a62000f4d565b6001600160a01b031662000b5d62000ddd565b6001600160a01b03161462000ba8576040805162461bcd60e51b815260206004820181905260248201526000805160206200363d833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b606062000bfe62000b22565b6001600160a01b03166384350e1d6040518163ffffffff1660e01b815260040160006040518083038186803b15801562000c3757600080fd5b505afa15801562000c4c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101562000c7657600080fd5b810190808051604051939291908464010000000082111562000c9757600080fd5b90830190602082018581111562000cad57600080fd5b825186602082028301116401000000008211171562000ccb57600080fd5b82525081516020918201928201910280838360005b8381101562000cfa57818101518382015260200162000ce0565b50505050905001604052505050905090565b62000d1662000f4d565b6001600160a01b031662000d2962000ddd565b6001600160a01b03161462000d74576040805162461bcd60e51b815260206004820181905260248201526000805160206200363d833981519152604482015290519081900360640190fd5b6001600160a01b03811662000dbb5760405162461bcd60e51b8152600401808060200182810382526028815260200180620035ca6028913960400191505060405180910390fd5b606580546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031690565b60685490565b600062000dfe62000b22565b6001600160a01b031663d2941c7f836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015620003f957600080fd5b62000e4c62000f4d565b6001600160a01b031662000e5f62000ddd565b6001600160a01b03161462000eaa576040805162461bcd60e51b815260206004820181905260248201526000805160206200363d833981519152604482015290519081900360640190fd5b6001600160a01b03811662000ef15760405162461bcd60e51b8152600401808060200182810382526026815260200180620035766026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b600062000f5e3062001022565b15905090565b600054610100900460ff168062000f80575062000f8062000f51565b8062000f8f575060005460ff16155b62000fcc5760405162461bcd60e51b815260040180806020018281038252602e8152602001806200359c602e913960400191505060405180910390fd5b600054610100900460ff1615801562000ff8576000805460ff1961ff0019909116610100171660011790555b6200100262001028565b6200100c620010d0565b80156200101f576000805461ff00191690555b50565b3b151590565b600054610100900460ff16806200104457506200104462000f51565b8062001053575060005460ff16155b620010905760405162461bcd60e51b815260040180806020018281038252602e8152602001806200359c602e913960400191505060405180910390fd5b600054610100900460ff161580156200100c576000805460ff1961ff00199091166101001716600117905580156200101f576000805461ff001916905550565b600054610100900460ff1680620010ec5750620010ec62000f51565b80620010fb575060005460ff16155b620011385760405162461bcd60e51b815260040180806020018281038252602e8152602001806200359c602e913960400191505060405180910390fd5b600054610100900460ff1615801562001164576000805460ff1961ff0019909116610100171660011790555b60006200117062000f4d565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156200101f576000805461ff001916905550565b61239480620011e28339019056fe60806040523480156200001157600080fd5b50604051620023943803806200239483398181016040526101208110156200003857600080fd5b815160208301516040808501516060860151608087015160a088015160c089018051955197999698949793969295919483019291846401000000008211156200008057600080fd5b9083019060208201858111156200009657600080fd5b8251866020820283011164010000000082111715620000b457600080fd5b82525081516020918201928201910280838360005b83811015620000e3578181015183820152602001620000c9565b505050509190910160409081526020830151920151919350909150600090506200010c6200046e565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000805460ff60a01b191690556001600160a01b038816620001aa5760405162461bcd60e51b8152600401808060200182810382526021815260200180620023736021913960400191505060405180910390fd5b6001600160a01b038916620001f15760405162461bcd60e51b8152600401808060200182810382526024815260200180620023286024913960400191505060405180910390fd5b6001600160a01b0387166200024d576040805162461bcd60e51b815260206004820181905260248201527f4c6f74746572793a204e66742063616e6e6f7420626520302061646472657373604482015290519081900360640190fd5b6001600160a01b038116620002945760405162461bcd60e51b8152600401808060200182810382526034815260200180620022f46034913960400191505060405180910390fd5b600283511015620002ec576040805162461bcd60e51b815260206004820152601d60248201527f4c6f74746572793a20496e76616c696420646973747269627574696f6e000000604482015290519081900360640190fd5b8251600b101562000344576040805162461bcd60e51b815260206004820152601d60248201527f4c6f74746572793a20496e76616c696420646973747269627574696f6e000000604482015290519081900360640190fd5b8251600019016009556000805b84518110156200039457620003898582815181106200036c57fe5b6020026020010151836200047260201b620015941790919060201c565b915060010162000351565b5080606414620003d65760405162461bcd60e51b81526004018080602001828103825260278152602001806200234c6027913960400191505060405180910390fd5b6001601181905580546001600160a01b03808d166001600160a01b031992831617909255600280548c84169083161790556003805485841690831617905560048054928b16929091169190911790556005879055600c85905560088690556200043e620004d4565b6006819055830160075583516200045d90600d906020870190620004d8565b50505050505050505050506200053f565b3390565b600082820183811015620004cd576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b4290565b82805482825590600052602060002090810192821562000516579160200282015b8281111562000516578251825591602001919060010190620004f9565b506200052492915062000528565b5090565b5b8082111562000524576000815560010162000529565b611da5806200054f6000396000f3fe608060405234801561001057600080fd5b50600436106101725760003560e01c80635edc958d116100de5780638456cb5911610097578063b88a802f11610071578063b88a802f146103bb578063c01f8b5f146103c3578063d2941c7f146103e0578063f2fde38b146103fd57610172565b80638456cb59146103875780638da5cb5b1461038f578063932eb678146103b357610172565b80635edc958d14610357578063601dd0e51461035f578063608620aa14610367578063715018a61461036f5780637420901c1461037757806384350e1d1461037f57610172565b80633f4ba83a116101305780633f4ba83a146102f457806344a040f5146102fc578063477601b8146103225780634a66ae271461032a5780635659f582146103475780635c975abb1461034f57610172565b80621ace93146101775780630ad182bc146101b15780630b2e66911461022757806315981650146102a05780632e1a7d4d146102bd578063329398e4146102da575b600080fd5b61019d6004803603602081101561018d57600080fd5b50356001600160a01b0316610423565b604080519115158252519081900360200190f35b6101d7600480360360208110156101c757600080fd5b50356001600160a01b03166104c0565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102135781810151838201526020016101fb565b505050509050019250505060405180910390f35b61029e6004803603604081101561023d57600080fd5b8135919081019060408101602082013564010000000081111561025f57600080fd5b82018360208201111561027157600080fd5b8035906020019184602083028401116401000000008311171561029357600080fd5b50909250905061052c565b005b61029e600480360360208110156102b657600080fd5b50356109a3565b61029e600480360360208110156102d357600080fd5b5035610a0a565b6102e2610ac8565b60408051918252519081900360200190f35b61029e610ace565b6102e26004803603602081101561031257600080fd5b50356001600160a01b0316610b3a565b6102e2610c25565b61029e6004803603602081101561034057600080fd5b5035610c2b565b6101d7610c92565b61019d610cea565b6102e2610cfa565b6102e2610d00565b61029e610d06565b61029e610fbe565b6102e261106a565b6101d7611070565b61029e611109565b610397611173565b604080516001600160a01b039092168252519081900360200190f35b610397611182565b61029e611191565b61029e600480360360208110156103d957600080fd5b5035611424565b6102e2600480360360208110156103f657600080fd5b503561148b565b61029e6004803603602081101561041357600080fd5b50356001600160a01b0316611492565b600954600b54600091146104685760405162461bcd60e51b8152600401808060200182810382526027815260200180611c306027913960400191505060405180910390fd5b816001600160a01b0316600e6000600b60008154811061048457fe5b600091825260208083209091015483528201929092526040019020546001600160a01b031614156104b7575060016104bb565b5060005b919050565b6001600160a01b03811660009081526010602090815260409182902080548351818402810184019094528084526060939283018282801561052057602002820191906000526020600020905b81548152602001906001019080831161050c575b50505050509050919050565b6006546105376115f7565b10156105745760405162461bcd60e51b815260040180806020018281038252602a815260200180611cf0602a913960400191505060405180910390fd5b60075461057f6115f7565b106105bb5760405162461bcd60e51b8152600401808060200182810382526021815260200180611b736021913960400191505060405180910390fd5b6105c3610cea565b15610608576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b80831461065c576040805162461bcd60e51b815260206004820152601f60248201527f4c6f74746572793a20496e76616c69642063686f73656e206e756d6265727300604482015290519081900360640190fd5b60118054600101905560005b818110156107d057600854600a0a83838381811061068257fe5b90506020020135106106c55760405162461bcd60e51b8152600401808060200182810382526026815260200180611d1a6026913960400191505060405180910390fd5b6000600e818585858181106106d657fe5b60209081029290920135835250810191909152604001600020546001600160a01b0316146107355760405162461bcd60e51b8152600401808060200182810382526027815260200180611bba6027913960400191505060405180910390fd5b601154600f600085858581811061074857fe5b90506020020135815260200190815260200160002054141561079b5760405162461bcd60e51b8152600401808060200182810382526030815260200180611d406030913960400191505060405180910390fd5b601154600f60008585858181106107ae57fe5b6020908102929092013583525081019190915260400160002055600101610668565b5060006107e8600c54856115fb90919063ffffffff16565b600254604080516323b872dd60e01b81523360048201523060248201526044810184905290519293506001600160a01b03909116916323b872dd916064808201926020929091908290030181600087803b15801561084557600080fd5b505af1158015610859573d6000803e3d6000fd5b505050506040513d602081101561086f57600080fd5b5050600a5461087e9082611594565b600a5560005b828110156109315733600e600086868581811061089d57fe5b90506020020135815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060106000336001600160a01b03166001600160a01b0316815260200190815260200160002084848381811061090757fe5b83546001808201865560009586526020958690209290950293909301359201919091555001610884565b507f27c5e501eb43fd045a53af63d8557af7ac8810c8550dbc296c823bd73527315084848460405180848152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a150505050565b6109ab611654565b6001600160a01b03166109bc611173565b6001600160a01b031614610a05576040805162461bcd60e51b81526020600482018190526024820152600080516020611c78833981519152604482015290519081900360640190fd5b600c55565b600954600b5414610a4c5760405162461bcd60e51b8152600401808060200182810382526027815260200180611c306027913960400191505060405180910390fd5b610a54611654565b6001600160a01b0316610a65611173565b6001600160a01b031614610aae576040805162461bcd60e51b81526020600482018190526024820152600080516020611c78833981519152604482015290519081900360640190fd5b600254610ac5906001600160a01b03163383611658565b50565b60065490565b610ad6611654565b6001600160a01b0316610ae7611173565b6001600160a01b031614610b30576040805162461bcd60e51b81526020600482018190526024820152600080516020611c78833981519152604482015290519081900360640190fd5b610b386116af565b565b600954600b5460009114610b7f5760405162461bcd60e51b8152600401808060200182810382526027815260200180611c306027913960400191505060405180910390fd5b6000805b600954811015610c1e576000600b8281548110610b9c57fe5b6000918252602080832090910154808352600e9091526040909120549091506001600160a01b03908116908616811415610c1457610c11610c0a6064610c04600d8781548110610be857fe5b9060005260206000200154600a546115fb90919063ffffffff16565b90611752565b8590611594565b93505b5050600101610b83565b5092915050565b60075490565b610c33611654565b6001600160a01b0316610c44611173565b6001600160a01b031614610c8d576040805162461bcd60e51b81526020600482018190526024820152600080516020611c78833981519152604482015290519081900360640190fd5b600755565b6060600d805480602002602001604051908101604052809291908181526020018280548015610ce057602002820191906000526020600020905b815481526020019060010190808311610ccc575b5050505050905090565b600054600160a01b900460ff1690565b60085490565b600a5490565b600754610d116115f7565b1015610d4e5760405162461bcd60e51b8152600401808060200182810382526029815260200180611c076029913960400191505060405180910390fd5b610d56611654565b6001600160a01b0316610d67611173565b6001600160a01b031614610db0576040805162461bcd60e51b81526020600482018190526024820152600080516020611c78833981519152604482015290519081900360640190fd5b600b5415610def5760405162461bcd60e51b815260040180806020018281038252602e815260200180611c98602e913960400191505060405180910390fd5b60095467ffffffffffffffff81118015610e0857600080fd5b50604051908082528060200260200182016040528015610e32578160200160208202803683370190505b508051610e4791600b91602090910190611b12565b5060005b600954811015610f45575b60035460085460408051632cdc85e960e21b81526004810192909252516000926001600160a01b03169163b37217a491602480830192602092919082900301818787803b158015610ea657600080fd5b505af1158015610eba573d6000803e3d6000fd5b505050506040513d6020811015610ed057600080fd5b5051905060005b82811015610f0b5781600b8281548110610eed57fe5b90600052602060002001541415610f0357610f0b565b600101610ed7565b82811415610f365781600b8481548110610f2157fe5b90600052602060002001819055505050610f3d565b5050610e56565b600101610e4b565b507fb0f137151d6582b5d3bf7c348610be27187d15bbb0d28e553cb95e9cbcf30ba5600b60405180806020018281038252838181548152602001915080548015610fae57602002820191906000526020600020905b815481526020019060010190808311610f9a575b50509250505060405180910390a1565b610fc6611654565b6001600160a01b0316610fd7611173565b6001600160a01b031614611020576040805162461bcd60e51b81526020600482018190526024820152600080516020611c78833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60055490565b600954600b54606091146110b55760405162461bcd60e51b8152600401808060200182810382526027815260200180611c306027913960400191505060405180910390fd5b600b805480602002602001604051908101604052809291908181526020018280548015610ce05760200282019190600052602060002090815481526020019060010190808311610ccc575050505050905090565b611111611654565b6001600160a01b0316611122611173565b6001600160a01b03161461116b576040805162461bcd60e51b81526020600482018190526024820152600080516020611c78833981519152604482015290519081900360640190fd5b610b386117b9565b6000546001600160a01b031690565b6004546001600160a01b031690565b60075461119c6115f7565b10156111d95760405162461bcd60e51b8152600401808060200182810382526029815260200180611c076029913960400191505060405180910390fd5b600954600b541461121b5760405162461bcd60e51b8152600401808060200182810382526027815260200180611c306027913960400191505060405180910390fd5b6000336001600160a01b0316600e6000600b60008154811061123957fe5b600091825260208083209091015483528201929092526040019020546001600160a01b031614156112db576004805460055460408051632142170760e11b815230948101949094523360248501526044840191909152516001600160a01b03909116916342842e0e91606480830192600092919082900301818387803b1580156112c257600080fd5b505af11580156112d6573d6000803e3d6000fd5b505050505b60005b60095481101561136d576000600b82815481106112f757fe5b6000918252602080832090910154808352600e9091526040909120549091506001600160a01b031633811415611363576000828152600e6020526040902080546001600160a01b0319169055600d805461136091610c0a91606491610c049188908110610be857fe5b93505b50506001016112de565b506002546040805163a9059cbb60e01b81523360048201526024810184905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b1580156113c257600080fd5b505af11580156113d6573d6000803e3d6000fd5b505050506040513d60208110156113ec57600080fd5b50506040805133815290517fea61a2a22523394f29506de20cc9db2e881f096477982d51012058ec9032714a9181900360200190a150565b61142c611654565b6001600160a01b031661143d611173565b6001600160a01b031614611486576040805162461bcd60e51b81526020600482018190526024820152600080516020611c78833981519152604482015290519081900360640190fd5b600655565b600c540290565b61149a611654565b6001600160a01b03166114ab611173565b6001600160a01b0316146114f4576040805162461bcd60e51b81526020600482018190526024820152600080516020611c78833981519152604482015290519081900360640190fd5b6001600160a01b0381166115395760405162461bcd60e51b8152600401808060200182810382526026815260200180611b946026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000828201838110156115ee576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b4290565b60008261160a575060006115f1565b8282028284828161161757fe5b04146115ee5760405162461bcd60e51b8152600401808060200182810382526021815260200180611c576021913960400191505060405180910390fd5b3390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526116aa908490611842565b505050565b6116b7610cea565b6116ff576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611735611654565b604080516001600160a01b039092168252519081900360200190a1565b60008082116117a8576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816117b157fe5b049392505050565b6117c1610cea565b15611806576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611735611654565b6060611897826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118f39092919063ffffffff16565b8051909150156116aa578080602001905160208110156118b657600080fd5b50516116aa5760405162461bcd60e51b815260040180806020018281038252602a815260200180611cc6602a913960400191505060405180910390fd5b6060611902848460008561190c565b90505b9392505050565b60608247101561194d5760405162461bcd60e51b8152600401808060200182810382526026815260200180611be16026913960400191505060405180910390fd5b61195685611a68565b6119a7576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106119e65780518252601f1990920191602091820191016119c7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611a48576040519150601f19603f3d011682016040523d82523d6000602084013e611a4d565b606091505b5091509150611a5d828286611a6e565b979650505050505050565b3b151590565b60608315611a7d575081611905565b825115611a8d5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611ad7578181015183820152602001611abf565b50505050905090810190601f168015611b045780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054828255906000526020600020908101928215611b4d579160200282015b82811115611b4d578251825591602001919060010190611b32565b50611b59929150611b5d565b5090565b5b80821115611b595760008155600101611b5e56fe4c6f74746572793a205469636b65742073656c6c696e6720697320636c6f7365644f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734c6f74746572793a205469636b6574204e756d62657220697320616c7265616479206578697374416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4c6f74746572793a205469636b65742073656c6c696e67206973206e6f742079657420636c6f7365644c6f74746572793a2057696e6e696e67204e756d62657273206e6f742063686f73656e20796574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724c6f74746572793a204861766520616c726561647920647261776e207468652077696e6e696e67206e756d6265725361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644c6f74746572793a205469636b65742073656c6c696e67206973206e6f742079657420737461727465644c6f74746572793a205469636b6574204e756d626572206973206f7574206f662072616e67654c6f74746572793a20526571756573746564205469636b6574204e756d6265727320617265206e6f7420756e69717565a26469706673582212201c636a8fd5df819de695259c24403df65d47fdaf885cb25f4013c8f97c9b943d64736f6c634300060c00334c6f74746572793a2052616e646f6d204e756d6265722047656e657261746f722063616e6e6f74206265203020616464726573734c6f74746572793a20466163746f72792063616e6e6f74206265203020616464726573734c6f74746572793a205072697a6520646973747269627574696f6e206973206e6f7420313030254c6f74746572793a20527562792063616e6e6f74206265203020616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644c6f7474657279466163746f72793a20527562792063616e6e6f74206265203020616464726573734c6f7474657279466163746f72793a204e66742063616e6e6f74206265203020616464726573734c6f7474657279466163746f72793a20496e76616c696420646973747269627574696f6e4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724c6f7474657279466163746f72793a20727562792063616e6e6f74206265203020616464726573734c6f7474657279466163746f72793a204f776e6572206f66204e465420697320696e76616c69644c6f7474657279466163746f72793a20524e472063616e6e6f74206265203020616464726573734c6f7474657279466163746f72793a2072616e646f6d4e756d62657247656e657261746f722063616e6e6f7420626520302061646472657373a2646970667358221220ca19940f397caae4844868c993cd2ae945e3e31c7d764f7c4b8e3c07cf6ab95f64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createNewLotto(address,uint256,uint256,uint256,uint256[],uint256)": {
        "params": {
          "_lotterySize": "Digit count of ticket.",
          "_nft": "The NFT address for bonus.",
          "_tokenId": "The Bonus NFT ID.",
          "distribution": "An array defining the distribution of the prize pool.",
          "duration": "The duration until no more tickets will be sold for the lottery from now.",
          "ticketPrice": "Cost per ticket in $ruby."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createNewLotto(address,uint256,uint256,uint256,uint256[],uint256)": {
        "notice": "Create a new Lottery instance."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 705,
        "contract": "contracts/lottery/LotteryFactory.sol:LotteryFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 708,
        "contract": "contracts/lottery/LotteryFactory.sol:LotteryFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2910,
        "contract": "contracts/lottery/LotteryFactory.sol:LotteryFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 136,
        "contract": "contracts/lottery/LotteryFactory.sol:LotteryFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 255,
        "contract": "contracts/lottery/LotteryFactory.sol:LotteryFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 21392,
        "contract": "contracts/lottery/LotteryFactory.sol:LotteryFactory",
        "label": "ruby",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 21394,
        "contract": "contracts/lottery/LotteryFactory.sol:LotteryFactory",
        "label": "RNG",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 21401,
        "contract": "contracts/lottery/LotteryFactory.sol:LotteryFactory",
        "label": "allLotteries",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_contract(Lottery)21373)"
      },
      {
        "astId": 21403,
        "contract": "contracts/lottery/LotteryFactory.sol:LotteryFactory",
        "label": "lotteryId",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Lottery)21373": {
        "encoding": "inplace",
        "label": "contract Lottery",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_contract(Lottery)21373)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract Lottery)",
        "numberOfBytes": "32",
        "value": "t_contract(Lottery)21373"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}